.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_iot_mqtt:

8.4 Communication IoT avec MQTT
=======================================

Ce projet se concentre sur l'utilisation de MQTT, un protocole de communication populaire dans le domaine de l'Internet des Objets (IoT). MQTT permet aux appareils IoT d'√©changer des donn√©es en utilisant un mod√®le de publication/abonnement, o√π les appareils communiquent via des sujets.

Dans ce projet, nous explorons la mise en ≈ìuvre de MQTT en construisant un circuit incluant une LED, un bouton et un thermistor. Le microcontr√¥leur ESP32-WROOM-32E est utilis√© pour √©tablir une connexion WiFi et communiquer avec un courtier MQTT. Le code permet au microcontr√¥leur de s'abonner √† des sujets sp√©cifiques, de recevoir des messages et de contr√¥ler la LED en fonction des informations re√ßues. De plus, le projet montre comment publier des donn√©es de temp√©rature du thermistor sur un sujet d√©sign√© lorsque le bouton est press√©.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|

**T√©l√©chargement du code**

#. Montez le circuit.

    .. note:: 
        Lors de l'√©tablissement d'une connexion WiFi, seuls les broches 36, 39, 34, 35, 32, 33 peuvent √™tre utilis√©es pour la lecture analogique. Assurez-vous que le thermistor est connect√© √† ces broches d√©sign√©es.

    .. image:: ../../img/wiring/iot_4_matt_bb.png

#. Ensuite, connectez l'ESP32-WROOM-32E √† l'ordinateur √† l'aide du c√¢ble USB.

    .. image:: ../../img/plugin_esp32.png

#. Ouvrez le code.

    * Ouvrez le fichier ``iot_4_mqtt.ino`` situ√© dans le r√©pertoire ``esp32-starter-kit-main\c\codes\iot_4_mqtt``, ou copiez le code dans l'Arduino IDE.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **Upload**.
    * :ref:`unknown_com_port`
    * La biblioth√®que ``PubSubClient`` est utilis√©e ici, vous pouvez l'installer depuis le **Library Manager**.

        .. image:: img/mqtt_lib.png
 
    .. raw:: html

        <iframe src=https://create.arduino.cc/editor/sunfounder01/e45a4bd6-9b35-47f0-af5e-92d802004087/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Trouvez les lignes suivantes et modifiez-les avec votre ``SSID`` et ``PASSWORD``.

    .. code-block::  Arduino

        // Remplacez les variables suivantes par votre combinaison SSID/Mot de passe
        const char* ssid = "SSID";
        const char* password = "PASSWORD";

#. Trouvez la ligne suivante et modifiez votre ``unique_identifier``. Assurez-vous que votre ``unique_identifier`` est vraiment unique car tout identifiant identique tentant de se connecter au m√™me courtier MQTT peut entra√Æner un √©chec de connexion.

    .. code-block::  Arduino

        // Ajoutez l'adresse de votre courtier MQTT, exemple :
        const char* mqtt_server = "broker.hivemq.com";
        const char* unique_identifier = "sunfounder-client-sdgvsda";  

**Abonnement au sujet**

#. Pour √©viter les interf√©rences des messages envoy√©s par d'autres participants, vous pouvez le d√©finir comme une cha√Æne obscure ou peu commune. Remplacez simplement le sujet actuel ``SF/LED`` par le nom de sujet souhait√©.

    .. note:: 
        Vous avez la libert√© de d√©finir le sujet comme n'importe quel caract√®re souhait√©. Tout appareil MQTT qui s'est abonn√© au m√™me sujet pourra recevoir le m√™me message. Vous pouvez √©galement vous abonner simultan√©ment √† plusieurs sujets.

    .. code-block::  Arduino
        :emphasize-lines: 9

        void reconnect() {
            // Boucle jusqu'√† ce que nous soyons reconnect√©s
            while (!client.connected()) {
                Serial.print("Attempting MQTT connection...");
                // Tentative de connexion
                if (client.connect(unique_identifier)) {
                    Serial.println("connected");
                    // S'abonner
                    client.subscribe("SF/LED");
                } else {
                    Serial.print("failed, rc=");
                    Serial.print(client.state());
                    Serial.println(" try again in 5 seconds");
                    // Attendre 5 secondes avant de r√©essayer
                    delay(5000);
                }
            }
        }

#. Modifiez la fonctionnalit√© pour r√©pondre au sujet abonn√©. Dans le code fourni, si un message est re√ßu sur le sujet ``SF/LED``, il v√©rifie si le message est ``on`` ou ``off``. En fonction du message re√ßu, il modifie l'√©tat de sortie pour contr√¥ler l'allumage ou l'extinction de la LED.

    .. note::
       Vous pouvez le modifier pour n'importe quel sujet auquel vous √™tes abonn√©, et vous pouvez √©crire plusieurs instructions if pour r√©pondre √† plusieurs sujets.

    .. code-block::  arduino
        :emphasize-lines: 15

        void callback(char* topic, byte* message, unsigned int length) {
            Serial.print("Message arrived on topic: ");
            Serial.print(topic);
            Serial.print(". Message: ");
            String messageTemp;

            for (int i = 0; i < length; i++) {
                Serial.print((char)message[i]);
                messageTemp += (char)message[i];
            }
            Serial.println();

            // Si un message est re√ßu sur le sujet "SF/LED", v√©rifiez si le message est "on" ou "off".
            // Change l'√©tat de sortie en fonction du message
            if (String(topic) == "SF/LED") {
                Serial.print("Changing state to ");
                if (messageTemp == "on") {
                    Serial.println("on");
                    digitalWrite(ledPin, HIGH);
                } else if (messageTemp == "off") {
                    Serial.println("off");
                    digitalWrite(ledPin, LOW);
                }
            }
        }

#. Apr√®s avoir s√©lectionn√© la carte correcte (ESP32 Dev Module) et le port, cliquez sur le bouton **Upload**.

#. Ouvrez le moniteur s√©rie et si les informations suivantes sont imprim√©es, cela indique une connexion r√©ussie au serveur MQTT.

    .. code-block:: 

        WiFi connect√©
        Adresse IP : 
        192.168.18.77
        Tentative de connexion MQTT...connect√©

**Publication de messages via HiveMQ**

HiveMQ est une plateforme de messagerie qui fonctionne comme un courtier MQTT, facilitant le transfert de donn√©es rapide, efficace et fiable vers les appareils IoT.

Notre code utilise sp√©cifiquement le courtier MQTT fourni par HiveMQ. Nous avons inclus l'adresse du courtier MQTT HiveMQ dans le code comme suit :

    .. code-block::  Arduino

        // Ajoutez l'adresse de votre courtier MQTT, exemple :
        const char* mqtt_server = "broker.hivemq.com";

#. √Ä pr√©sent, ouvrez le |link_hivemq| dans votre navigateur web.

#. Connectez le client au proxy public par d√©faut.

    .. image:: img/sp230512_092258.png

#. Publiez un message dans le sujet auquel vous vous √™tes abonn√©. Dans ce projet, vous pouvez publier ``on`` ou ``off`` pour contr√¥ler votre LED.

    .. image:: img/sp230512_140234.png

**Publication de messages vers MQTT**

Nous pouvons √©galement utiliser le code pour publier des informations sur le sujet. Dans cette d√©monstration, nous avons cod√© une fonctionnalit√© qui envoie la temp√©rature mesur√©e par le thermistor sur le sujet lorsque vous appuyez sur le bouton.

#. Cliquez sur **Ajouter une nouvelle abonnement au sujet**.

    .. image:: img/sp230512_092341.png

#. Remplissez les sujets que vous souhaitez suivre et cliquez sur **S'abonner**. Dans le code, nous envoyons des informations de temp√©rature sur le sujet ``SF/TEMP``.

    .. code-block::  Arduino
        :emphasize-lines: 14

        void loop() {
            if (!client.connected()) {
                reconnect();
            }
            client.loop();

            // si le bouton est press√©, publier la temp√©rature sur le sujet "SF/TEMP"
            if (digitalRead(buttonPin)) {
                    long now = millis();
                    if (now - lastMsg > 5000) {
                    lastMsg = now;
                    char tempString[8];
                    dtostrf(thermistor(), 1, 2, tempString);
                    client.publish("SF/TEMP", tempString);
                }
            }
        }

#. Ainsi, nous pouvons surveiller ce sujet sur HiveMQ, nous permettant de voir les informations que vous avez publi√©es.

    .. image:: img/sp230512_154342.png

