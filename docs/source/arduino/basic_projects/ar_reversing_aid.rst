.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_reversing_aid:

6.3 Aide au stationnement en marche arri√®re
==================================================

Imaginez ceci : Vous √™tes dans votre voiture, sur le point de reculer dans une place de parking √©troite. Avec notre projet, vous aurez un module ultrasonique mont√© √† l'arri√®re de votre v√©hicule, agissant comme un ≈ìil num√©rique. Lorsque vous engagez la marche arri√®re, le module s'anime, √©mettant des impulsions ultrasoniques qui rebondissent sur les obstacles derri√®re vous.

La magie op√®re lorsque ces impulsions reviennent au module. Il calcule rapidement la distance entre votre voiture et les objets, transformant ces donn√©es en un retour visuel en temps r√©el affich√© sur un √©cran LCD vibrant. Vous verrez des indicateurs dynamiques, cod√©s par couleur, repr√©sentant la proximit√© des obstacles, vous assurant une compr√©hension claire de l'environnement.

Mais nous ne nous sommes pas arr√™t√©s l√†. Pour vous immerger davantage dans cette exp√©rience de conduite, nous avons incorpor√© un buzzer anim√©. √Ä mesure que votre voiture se rapproche d'un obstacle, le rythme du buzzer s'intensifie, cr√©ant une symphonie auditive d'avertissements. C'est comme avoir un orchestre personnel vous guidant √† travers les complexit√©s du stationnement en marche arri√®re.

Ce projet innovant combine une technologie de pointe avec une interface utilisateur interactive, rendant votre exp√©rience de recul s√©curis√©e et sans stress. Avec le module ultrasonique, l'√©cran LCD et le buzzer anim√© travaillant en harmonie, vous vous sentirez autonome et confiant en man≈ìuvrant dans des espaces restreints, vous laissant libre de vous concentrer sur le plaisir de conduire.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_ultrasonic`
        - |link_ultrasonic_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|
    *   - :ref:`cpn_lcd`
        - |link_i2clcd1602_buy|

**Sch√©ma**

.. image:: ../../img/circuit/circuit_6.4_reversing_aid.png
    :width: 800
    :align: center

Le capteur ultrasonique du projet √©met des ondes sonores √† haute fr√©quence et mesure le temps n√©cessaire pour que ces ondes rebondissent apr√®s avoir frapp√© un objet. En analysant ces donn√©es, la distance entre le capteur et l'objet peut √™tre calcul√©e. Pour avertir lorsque l'objet est trop proche, un buzzer est utilis√© pour produire un signal sonore. De plus, la distance mesur√©e est affich√©e sur un √©cran LCD pour une visualisation facile.

**C√¢blage**

.. image:: ../../img/wiring/6.4_aid_ultrasonic_bb.png

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``6.3_reversing_aid.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\6.3_reversing_aid`` directement.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **T√©l√©verser**.
    * :ref:`unknown_com_port`
    * La biblioth√®que ``LiquidCrystal I2C`` est utilis√©e ici, vous pouvez l'installer √† partir du **Gestionnaire de Biblioth√®ques**.


.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/c06deba0-36fd-4f17-8290-c7a39202e089/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    

Apr√®s avoir t√©l√©vers√© le code avec succ√®s, la distance d√©tect√©e actuelle sera affich√©e sur le LCD. Ensuite, le buzzer changera la fr√©quence sonore en fonction des diff√©rentes distances.

.. note:: 

    Si le code et le c√¢blage sont corrects, mais que le LCD n'affiche toujours aucun contenu, vous pouvez ajuster le potentiom√®tre √† l'arri√®re pour augmenter le contraste.


**Comment √ßa marche ?**

Ce code nous aide √† cr√©er un dispositif de mesure de distance simple qui peut mesurer la distance entre les objets et fournir un retour d'information via un √©cran LCD et un buzzer.

La fonction ``loop()`` contient la logique principale du programme et s'ex√©cute en continu. Regardons de plus pr√®s la fonction ``loop()``.

#. Boucle pour lire la distance et mettre √† jour les param√®tres

    Dans la ``loop``, le code lit d'abord la distance mesur√©e par le module ultrasonique et met √† jour le param√®tre d'intervalle en fonction de la distance.

    .. code-block:: arduino

        // Mise √† jour de la distance
        distance = readDistance();

        // Mise √† jour des intervalles en fonction de la distance
        if (distance <= 10) {
            intervals = 300;
        } else if (distance <= 20) {
            intervals = 500;
        } else if (distance <= 50) {
            intervals = 1000;
        } else {
            intervals = 2000;
        }

#. V√©rifier s'il est temps de biper

    Le code calcule la diff√©rence entre l'heure actuelle et l'heure pr√©c√©dente du bip, et si la diff√©rence est sup√©rieure ou √©gale au temps d'intervalle, il d√©clenche le buzzer et met √† jour l'heure pr√©c√©dente du bip.

    .. code-block:: arduino

        unsigned long currentMillis = millis();
        if (currentMillis - previousMillis >= intervals) {
            Serial.println("Beeping!");
            beep();
            previousMillis = currentMillis;
        }

#. Mettre √† jour l'affichage LCD

    Le code efface l'affichage LCD, puis affiche "Dis:" et la distance actuelle en centim√®tres sur la premi√®re ligne.

    .. code-block:: arduino

        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Dis: ");
        lcd.print(distance);
        lcd.print(" cm");

        delay(100);





