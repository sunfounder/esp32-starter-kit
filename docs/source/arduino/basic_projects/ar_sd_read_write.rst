.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_sd_write:

7.4 √âcriture et Lecture de Carte SD
========================================
Ce projet d√©montre les capacit√©s essentielles de l'utilisation d'une carte SD avec le microcontr√¥leur ESP32. 
Il met en avant des op√©rations essentielles telles que le montage de la carte SD, la cr√©ation d'un fichier, 
l'√©criture de donn√©es dans le fichier et la liste de tous les fichiers dans le r√©pertoire racine. Ces op√©rations forment la base de nombreuses applications de journalisation et de stockage de donn√©es, faisant de ce projet une √©tape cruciale pour comprendre et utiliser le p√©riph√©rique h√¥te SDMMC int√©gr√© de l'ESP32.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|


**√âtapes de fonctionnement**

#. Avant de connecter le c√¢ble USB, ins√©rez la carte SD dans le slot de carte SD de la carte d'extension.

    .. image:: ../../img/insert_sd.png

#. Connectez l'ESP32-WROOM-32E √† l'ordinateur √† l'aide du c√¢ble USB.

    .. image:: ../../img/plugin_esp32.png

#. S√©lectionnez le port et la carte appropri√©s dans l'IDE Arduino et t√©l√©versez le code sur votre ESP32.

    .. note::

        * Ouvrez le fichier ``7.4_sd_read_write.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\7.4_sd_read_write``.
        * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **T√©l√©verser**.
        * :ref:`unknown_com_port`

    .. raw:: html

        <iframe src=https://create.arduino.cc/editor/sunfounder01/912df4b8-a7b6-43dc-95b5-8206801cc9c1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
        

#. Apr√®s que le code a √©t√© t√©l√©vers√© avec succ√®s, vous verrez une invite indiquant l'√©criture r√©ussie du fichier, ainsi qu'une liste de tous les noms de fichiers et tailles sur la carte SD. Si vous ne voyez aucune sortie apr√®s avoir ouvert le moniteur s√©rie, vous devez appuyer sur le bouton EN (RST) pour relancer le code.

    .. image:: img/sd_write_read.png

    .. note::

        Si vous voyez les informations suivantes.

        .. code-block::

            E (528) vfs_fat_sdmmc: mount_to_vfs failed (0xffffffff).
            Failed to mount SD card

        V√©rifiez d'abord si votre carte SD est correctement ins√©r√©e dans la carte d'extension.

        Si elle est ins√©r√©e correctement, il pourrait y avoir un probl√®me avec votre carte SD. Vous pouvez essayer d'utiliser une gomme pour nettoyer les contacts m√©talliques.

        Si le probl√®me persiste, il est recommand√© de formater la carte SD, veuillez vous r√©f√©rer √† :ref:`format_sd_card`.


**Comment √ßa marche ?**

Le but de ce projet est de d√©montrer l'utilisation de la carte SD avec la carte ESP32. Le p√©riph√©rique h√¥te SDMMC int√©gr√© de l'ESP32 est utilis√© pour se connecter √† la carte SD.

Le projet commence par initialiser la communication s√©rie, puis tente de monter la carte SD. Si la carte SD ne parvient pas √† monter correctement, le programme imprimera un message d'erreur et quittera la fonction setup.

Une fois la carte SD mont√©e avec succ√®s, le programme proc√®de √† la cr√©ation d'un fichier nomm√© "test.txt" dans le r√©pertoire racine de la carte SD. Si le fichier est ouvert avec succ√®s en mode √©criture, le programme √©crit une ligne de texte - "Hello, world!" dans le fichier. Le programme imprimera un message de succ√®s si l'op√©ration d'√©criture est r√©ussie, sinon un message d'erreur sera imprim√©.

Apr√®s l'op√©ration d'√©criture, le programme ferme le fichier puis ouvre le r√©pertoire racine de la carte SD. Il commence ensuite √† parcourir tous les fichiers du r√©pertoire racine, en imprimant le nom et la taille de chaque fichier trouv√©.

Dans la fonction loop principale, il n'y a pas d'op√©rations. Ce projet se concentre sur les op√©rations de carte SD telles que le montage de la carte, la cr√©ation d'un fichier, l'√©criture dans un fichier et la lecture du r√©pertoire, qui sont toutes ex√©cut√©es dans la fonction setup.

Ce projet sert d'introduction utile √† la gestion des cartes SD avec l'ESP32, ce qui peut √™tre crucial dans les applications n√©cessitant une journalisation ou un stockage de donn√©es.


Voici une analyse du code :

#. Inclure la biblioth√®que ``SD_MMC``, qui est n√©cessaire pour travailler avec les cartes SD en utilisant le p√©riph√©rique h√¥te SDMMC int√©gr√© de l'ESP32.

    .. code-block:: arduino

        #include "SD_MMC.h"

#. Dans la fonction ``setup()``, les t√¢ches suivantes sont effectu√©es.

    * **Initialiser la carte SD**

    Initialiser et monter la carte SD. Si la carte SD ne parvient pas √† monter, elle imprimera "Failed to mount SD card" sur le moniteur s√©rie et arr√™tera l'ex√©cution.

    .. code-block:: arduino
        
        if(!SD_MMC.begin()) { // Tentative de monter la carte SD
            Serial.println("Failed to mount card"); // Si le montage √©choue, imprimer sur le moniteur s√©rie et quitter setup
            return;
        } 
      
    * **Ouvrir le fichier**

    Ouvrir un fichier nomm√© ``"test.txt"`` situ√© dans le r√©pertoire racine de la carte SD en mode √©criture. Si le fichier ne parvient pas √† s'ouvrir, il imprime "Failed to open file for writing" et retourne.

    .. code-block:: arduino

        File file = SD_MMC.open("/test.txt", FILE_WRITE); 
        if (!file) {
            Serial.println("Failed to open file for writing"); // Imprimer un message d'erreur si le fichier n'a pas pu s'ouvrir
            return;
        }


    * **√âcrire des donn√©es dans le fichier**

    √âcrire le texte "Test file write" dans le fichier. 
    Si l'op√©ration d'√©criture est r√©ussie, elle imprime "File write success"; sinon, elle imprime "File write failed".

    
    .. code-block:: arduino

        if(file.print("Test file write")) { // √âcrire le message dans le fichier
            Serial.println("File write success"); // Si l'√©criture r√©ussit, imprimer sur le moniteur s√©rie
        } else {
            Serial.println("File write failed"); // Si l'√©criture √©choue, imprimer sur le moniteur s√©rie
        } 

    * **Fermer le fichier**
        
    Fermer le fichier ouvert. Cela garantit que toutes les donn√©es mises en m√©moire tampon sont √©crites dans le fichier et que le fichier est correctement ferm√©.

    .. code-block:: arduino

        file.close(); // Fermer le fichier

    * **Ouvrir le r√©pertoire racine**

    Ouvrir le r√©pertoire racine de la carte SD. Si le r√©pertoire ne parvient pas √† s'ouvrir, il imprime "Failed to open directory" et retourne.

    .. code-block:: arduino

        File root = SD_MMC.open("/"); // Ouvrir le r√©pertoire racine de la carte SD
        if (!root) {
            Serial.println("Failed to open directory"); // Imprimer un message d'erreur si le r√©pertoire n'a pas pu s'ouvrir
            return;
        }

    * **Imprimer le nom et la taille de chaque fichier**
    
    La boucle commen√ßant par while (``File file = root.openNextFile()``) parcourt tous les fichiers du r√©pertoire racine, en imprimant le nom et la taille de chaque fichier trouv√© sur le moniteur s√©rie.

    .. code-block:: arduino
    
        Serial.println("Files found in root directory:"); // Imprimer la liste des fichiers trouv√©s dans le r√©pertoire racine
        while (File file = root.openNextFile()) { // Parcourir tous les fichiers du r√©pertoire racine
              Serial.print("  ");
              Serial.print(file.name()); // Imprimer le nom du fichier
              Serial.print("\t");
              Serial.println(file.size()); // Imprimer la taille du fichier
              file.close(); // Fermer le fichier
        }

#.  Cette fonction ``loop()`` est une boucle vide et ne fait rien dans le programme actuel. Cependant, dans un programme Arduino typique, cette fonction bouclerait en continu et ex√©cuterait le code √† l'int√©rieur. Dans ce cas, puisque toutes les t√¢ches requises ont √©t√© effectu√©es dans la fonction setup, la fonction loop n'est pas n√©cessaire.

    .. code-block:: arduino

        void loop() {} // Fonction loop vide, ne fait rien

