.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_sd_write:

7.4 SD-Karten Schreiben und Lesen
====================================
Dieses Projekt demonstriert die Kernf√§higkeiten der Verwendung einer SD-Karte mit dem Mikrocontroller ESP32. 
Es zeigt wesentliche Operationen wie das Einbinden der SD-Karte, das Erstellen einer Datei, das Schreiben von Daten in die Datei 
und das Auflisten aller Dateien im Root-Verzeichnis. Diese Operationen bilden die Grundlage vieler Datenprotokollierungs- und Speicheranwendungen 
und machen dieses Projekt zu einem entscheidenden Schritt im Verst√§ndnis und in der Nutzung des eingebauten SDMMC-Host-Peripherieger√§ts des ESP32.

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir folgende Komponenten.

Es ist definitiv praktisch, ein komplettes Set zu kaufen. Hier ist der Link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - ESP32 Starter Kit
        - 320+
        - |link_esp32_starter_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|


**Betriebsschritte**

#. Bevor Sie das USB-Kabel anschlie√üen, stecken Sie die SD-Karte in den SD-Kartenslot des Erweiterungsboards.

    .. image:: ../../img/insert_sd.png

#. Verbinden Sie ESP32-WROOM-32E mit dem Computer √ºber das USB-Kabel.

    .. image:: ../../img/plugin_esp32.png

#. W√§hlen Sie den passenden Port und das Board in der Arduino IDE aus und laden Sie den Code auf Ihren ESP32.

    .. note::

        * √ñffnen Sie die Datei ``7.4_sd_read_write.ino`` unter dem Pfad ``esp32-starter-kit-main\c\codes\7.4_sd_read_write``.
        * Nachdem Sie das Board (ESP32 Dev Module) und den passenden Port ausgew√§hlt haben, klicken Sie auf den **Upload**-Knopf.
        * :ref:`unknown_com_port`

    .. raw:: html

        <iframe src=https://create.arduino.cc/editor/sunfounder01/912df4b8-a7b6-43dc-95b5-8206801cc9c1/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
        

#. Nachdem der Code erfolgreich hochgeladen wurde, sehen Sie eine Aufforderung, die auf den erfolgreichen Dateischreibvorgang hinweist, zusammen mit einer Liste aller Dateinamen und -gr√∂√üen auf der SD-Karte. Wenn Sie nach dem √ñffnen des seriellen Monitors keine Ausgabe sehen, m√ºssen Sie den EN (RST)-Knopf dr√ºcken, um den Code erneut auszuf√ºhren.

    .. image:: img/sd_write_read.png

    .. note::

        Wenn Sie folgende Informationen sehen.

        .. code-block::

            E (528) vfs_fat_sdmmc: mount_to_vfs failed (0xffffffff).
            Failed to mount SD card

        √úberpr√ºfen Sie zuerst, ob Ihre SD-Karte richtig in das Erweiterungsboard eingelegt ist.

        Wenn sie richtig eingelegt ist, k√∂nnte es ein Problem mit Ihrer SD-Karte geben. Sie k√∂nnen versuchen, die Metallkontakte mit einem Radiergummi zu reinigen.

        Wenn das Problem weiterhin besteht, wird empfohlen, die SD-Karte zu formatieren. Bitte beachten Sie :ref:`format_sd_card`.


**Wie funktioniert das?**

Der Zweck dieses Projekts ist es, die Verwendung einer SD-Karte mit dem ESP32-Board zu demonstrieren. Das eingebaute SDMMC-Host-Peripherieger√§t des ESP32 wird verwendet, um eine Verbindung mit der SD-Karte herzustellen.

Das Projekt beginnt mit der Initialisierung der seriellen Kommunikation und versucht dann, die SD-Karte einzubinden. Wenn das Einbinden der SD-Karte nicht erfolgreich ist, druckt das Programm eine Fehlermeldung und beendet die Setup-Funktion.

Sobald die SD-Karte erfolgreich eingebunden ist, erstellt das Programm eine Datei mit dem Namen "test.txt" im Root-Verzeichnis der SD-Karte. Wenn die Datei erfolgreich im Schreibmodus ge√∂ffnet wird, schreibt das Programm eine Zeile Text - "Hello, world!" in die Datei. Das Programm druckt eine Erfolgsmeldung, wenn der Schreibvorgang erfolgreich ist, andernfalls wird eine Fehlermeldung gedruckt.

Nachdem der Schreibvorgang abgeschlossen ist, schlie√üt das Programm die Datei und √∂ffnet dann das Root-Verzeichnis der SD-Karte. Anschlie√üend beginnt es, alle Dateien im Root-Verzeichnis zu durchlaufen und druckt den Dateinamen und die Dateigr√∂√üe jeder gefundenen Datei.

In der Hauptschleifenfunktion gibt es keine Operationen. Dieses Projekt konzentriert sich auf SD-Kartenoperationen wie das Einbinden der Karte, das Erstellen einer Datei, das Schreiben in eine Datei und das Lesen des Dateiverzeichnisses, die alle in der Setup-Funktion ausgef√ºhrt werden.

Dieses Projekt dient als n√ºtzliche Einf√ºhrung in den Umgang mit SD-Karten mit dem ESP32, was in Anwendungen, die Datenprotokollierung oder Speicherung erfordern, entscheidend sein kann.


Hier ist eine Analyse des Codes:

#. Binden Sie die ``SD_MMC``-Bibliothek ein, die ben√∂tigt wird, um mit SD-Karten mit dem eingebauten SDMMC-Host-Peripherieger√§t des ESP32 zu arbeiten.

    .. code-block:: arduino

        #include "SD_MMC.h"

#. Innerhalb der ``setup()``-Funktion werden die folgenden Aufgaben ausgef√ºhrt.

    * **Initialisieren Sie die SD-Karte**

    Initialisieren und binden Sie die SD-Karte ein. Wenn das Einbinden der SD-Karte fehlschl√§gt, druckt sie "Failed to mount SD card" auf den seriellen Monitor und stoppt die Ausf√ºhrung.

    .. code-block:: arduino
        
        if(!SD_MMC.begin()) { // Attempt to mount the SD card
            Serial.println("Failed to mount card"); // If mount fails, print to serial and exit setup
            return;
        } 
      
    * **√ñffnen Sie die Datei**

    √ñffnen Sie eine Datei mit dem Namen ``"test.txt"`` im Root-Verzeichnis der SD 
    -Karte im Schreibmodus. Wenn die Datei nicht ge√∂ffnet werden kann, druckt sie "Failed to open file for writing" und kehrt zur√ºck.

    .. code-block:: arduino

        File file = SD_MMC.open("/test.txt", FILE_WRITE); 
        if (!file) {
            Serial.println("Failed to open file for writing"); // Print error message if file failed to open
            return;
        }


    * **Schreiben Sie Daten in die Datei**

    Schreiben Sie den Text "Test file write" in die Datei. 
    Wenn der Schreibvorgang erfolgreich ist, druckt sie "File write successful"; andernfalls druckt sie "File write failed".

    .. code-block:: arduino

        if(file.print("Test file write")) { // Write the message to the file
            Serial.println("File write success"); // If write succeeds, print to serial
        } else {
            Serial.println("File write failed"); // If write fails, print to serial
        } 

    * **Schlie√üen Sie die Datei**

    Schlie√üen Sie die ge√∂ffnete Datei. Dadurch wird sichergestellt, dass alle gepufferten Daten in die Datei geschrieben und die Datei ordnungsgem√§√ü geschlossen wird.

    .. code-block:: arduino

        file.close(); // Close the file

    * **√ñffnen Sie das Root-Verzeichnis**

    √ñffnen Sie das Root-Verzeichnis der SD-Karte. Wenn das Verzeichnis nicht ge√∂ffnet werden kann, druckt es "Failed to open directory" und kehrt zur√ºck.

    .. code-block:: arduino

        File root = SD_MMC.open("/"); // Open the root directory of SD card
        if (!root) {
            Serial.println("Failed to open directory"); // Print error message if directory failed to open
            return;
        }

    * **Drucken Sie den Namen und die Gr√∂√üe jeder Datei**
    
    Die Schleife, die mit while (``File file = root.openNextFile()``) beginnt, iteriert √ºber alle Dateien im Root-Verzeichnis und 
    druckt den Namen und die Gr√∂√üe jeder Datei auf den seriellen Monitor.

    .. code-block:: arduino
    
        Serial.println("Files found in root directory:"); // Print the list of files found in the root directory
        while (File file = root.openNextFile()) { // Loop through all the files in the root directory
              Serial.print("  ");
              Serial.print(file.name()); // Print the filename
              Serial.print("\t");
              Serial.println(file.size()); // Print the filesize
              file.close(); // Close the file
        }

#.  Diese ``loop()``-Funktion ist eine leere Schleife und tut in diesem Programm nichts. Allerdings w√ºrde in einem typischen Arduino-Programm diese Funktion kontinuierlich √ºberlaufen und den Code in ihr ausf√ºhren. In diesem Fall sind jedoch alle erforderlichen Aufgaben in der Setup-Funktion ausgef√ºhrt worden, daher wird die Loop-Funktion nicht ben√∂tigt.

    .. code-block:: arduino

        void loop() {} // Empty loop function, does nothing
