.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_pa_buz:

3.2 Tonalit√© Personnalis√©e
==========================================

Nous avons utilis√© un buzzer actif dans le projet pr√©c√©dent, cette fois nous utiliserons un buzzer passif.

Comme le buzzer actif, le buzzer passif utilise √©galement le ph√©nom√®ne d'induction √©lectromagn√©tique pour fonctionner. La diff√©rence est qu'un buzzer passif n'a pas de source d'oscillation, il ne bipera donc pas si des signaux continus sont utilis√©s. Mais cela permet au buzzer passif d'ajuster sa propre fr√©quence d'oscillation et peut √©mettre diff√©rentes notes telles que "do, r√©, mi, fa, sol, la, si".

Faisons jouer une m√©lodie au buzzer passif !

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

**Sch√©ma**

.. image:: ../../img/circuit/circuit_3.1_buzzer.png
    :width: 500
    :align: center

Lorsque la sortie IO14 est haute, apr√®s la r√©sistance de limitation de courant de 1K (pour prot√©ger le transistor), le S8050 (transistor NPN) sera conducteur, de sorte que le buzzer sonnera.

Le r√¥le du S8050 (transistor NPN) est d'amplifier le courant et de rendre le buzzer plus fort. En fait, vous pouvez √©galement connecter directement le buzzer √† IO14, mais vous constaterez que le son du buzzer est plus faible.

**C√¢blage**

Deux types de buzzers sont inclus dans le kit. 
Nous devons utiliser le buzzer passif. Tournez-les, le PCB expos√© est celui que nous voulons.

.. image:: ../../components/img/buzzer.png
    :width: 500
    :align: center

Le buzzer doit utiliser un transistor lorsqu'il fonctionne, ici nous utilisons le S8050 (transistor NPN).

.. image:: ../../img/wiring/3.1_buzzer_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``3.2_custom_tone.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\3.2_custom_tone``.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **Upload**.
    * :ref:`unknown_com_port`
    
.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/09a319a6-6861-40e1-ba1b-e7027bc0383d/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s avoir t√©l√©charg√© le code avec succ√®s, vous entendrez le buzzer passif jouer une s√©quence de 7 notes musicales.


**Comment √ßa marche ?**

#. D√©finir les constantes pour la broche du buzzer et la r√©solution PWM.

    .. code-block:: arduino

        const int buzzerPin = 14; // broche du buzzer
        const int resolution = 8; 

#. D√©finir un tableau contenant les fr√©quences des 7 notes musicales en Hz.

    .. code-block:: arduino

        int frequencies[] = {262, 294, 330, 349, 392, 440, 494};

#. Cr√©er une fonction pour jouer une fr√©quence donn√©e sur le buzzer pendant une dur√©e sp√©cifi√©e.

    .. code-block:: arduino

        void playFrequency(int frequency, int duration) {
            ledcWriteTone(buzzerPin, frequency); // D√©marrer la tonalit√©
            delay(duration); // Attendre la dur√©e sp√©cifi√©e
            ledcWriteTone(buzzerPin, 0); // Arr√™ter le buzzer
        }

    * ``uint32_t ledcWriteTone(uint8_t pin, uint32_t freq);`` : Cette fonction est utilis√©e pour configurer la broche √† 50 % de la tonalit√© PWM sur la fr√©quence s√©lectionn√©e.

        * ``pin`` s√©lectionner la broche LEDC.
        * ``freq`` s√©lectionner la fr√©quence du signal pwm.

    Cette fonction retournera ``frequency`` d√©finie pour le canal. Si ``0`` est retourn√©, une erreur se produit et le canal LEDC n'a pas √©t√© configur√©.

#. Configurer le canal PWM et attacher la broche du buzzer dans la fonction ``setup()``.

    .. code-block:: arduino

        void setup() {
            ledcAttach(buzzerPin, 2000, resolution); // Configurer la broche PWM
        }

    * ``bool ledcAttach(uint8_t pin, uint32_t freq, uint8_t resolution);`` : Cette fonction est utilis√©e pour configurer la broche LEDC avec la fr√©quence et la r√©solution donn√©es. Le canal LEDC sera s√©lectionn√© automatiquement.
            
        * ``pin`` s√©lectionner la broche GPIO.
        * ``freq`` s√©lectionner la fr√©quence du pwm.
        * ``resolution_bits`` s√©lectionner la r√©solution pour le canal LEDC. La plage est de 1 √† 14 bits (1-20 bits pour ESP32).

#. Dans la fonction ``loop()``, jouer la s√©quence de 7 notes avec une pause br√®ve entre chaque note et une pause d'une seconde avant de r√©p√©ter la s√©quence.

    .. code-block:: arduino

        void loop() {
            for (int i = 0; i < 7; i++) {
                playFrequency(frequencies[i], 300); // Jouer chaque note pendant 300ms
                delay(50); // Ajouter une pause br√®ve entre les notes
            }
            delay(1000); // Attendre 1 seconde avant de rejouer la s√©quence
        }
