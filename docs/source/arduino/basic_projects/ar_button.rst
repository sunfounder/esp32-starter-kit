.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans le monde du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et √† des promotions de vacances.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_button:

5.1 Lecture de la valeur du bouton
==============================================

Dans ce projet interactif, nous allons explorer le domaine des contr√¥les de boutons et de la manipulation des LED.

Le concept est simple mais efficace. Nous allons lire l'√©tat d'un bouton. Lorsque le bouton est enfonc√©, il enregistre un niveau de tension √©lev√©, ou "√©tat haut". Cette action d√©clenchera ensuite l'allumage d'une LED.

**Composants n√©cessaires**

Dans ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

**Broches disponibles**

* **Broches disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 20

        *   - Pour entr√©e
            - IO14, IO25, I35, I34, I39, I36, IO18, IO19, IO21, IO22, IO23
        *   - Pour sortie
            - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23
    
* **Broches √† usage conditionnel (entr√©e)**

    Les broches suivantes ont des r√©sistances pull-up ou pull-down int√©gr√©es, donc des r√©sistances externes ne sont pas n√©cessaires lorsque **vous les utilisez comme broches d'entr√©e** :

    .. list-table::
        :widths: 5 15
        :header-rows: 1

        *   - Broches √† usage conditionnel
            - Description
        *   - IO13, IO15, IO2, IO4
            - Tirer vers le haut avec une r√©sistance de 47K par d√©faut au niveau haut.
        *   - IO27, IO26, IO33
            - Tirer vers le haut avec une r√©sistance de 4.7K par d√©faut au niveau haut.
        *   - IO32
            - Tirer vers le bas avec une r√©sistance de 1K par d√©faut au niveau bas.

* **Broches de d√©marrage (entr√©e)**

    Les broches de d√©marrage sont un ensemble sp√©cial de broches utilis√©es pour d√©terminer des modes de d√©marrage sp√©cifiques lors du d√©marrage de l'appareil 
    (c'est-√†-dire, reset √† la mise sous tension).
     
    .. list-table::
        :widths: 5 15

        *   - Broches de d√©marrage
            - IO5, IO0, IO2, IO12, IO15 
    
    En g√©n√©ral, il est **non recommand√© de les utiliser comme broches d'entr√©e**. Si vous souhaitez utiliser ces broches, consid√©rez l'impact potentiel sur le processus de d√©marrage. Pour plus de d√©tails, veuillez vous r√©f√©rer √† la section :ref:`esp32_strapping`.

**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.1_button.png

Pour assurer un bon fonctionnement, connectez un c√¥t√© de la broche du bouton √† 3,3V et l'autre c√¥t√© √† IO14. Lorsque le bouton est enfonc√©, IO14 sera mis √† l'√©tat haut, ce qui fera s'allumer la LED. Lorsque le bouton est rel√¢ch√©, IO14 reviendra √† son √©tat de repos, qui peut √™tre soit haut soit bas. Pour garantir un niveau bas stable lorsque le bouton n'est pas enfonc√©, IO14 doit √™tre connect√© √† la masse (GND) via une r√©sistance de tirage vers le bas de 10K.

**C√¢blage**

.. image:: ../../img/wiring/5.1_button_bb.png

.. note::
    
    Un bouton √† quatre broches est con√ßu en forme de H. Lorsque le bouton n'est pas enfonc√©, les broches gauche et droite sont d√©connect√©es, et le courant ne peut pas circuler entre elles. Cependant, lorsque le bouton est enfonc√©, les broches gauche et droite sont connect√©es, cr√©ant un chemin pour que le courant puisse circuler.

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``5.1_button.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\5.1_button``.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **Upload**.
    * :ref:`unknown_com_port`
   
.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/702c5a70-78e7-4a8b-a0c7-10c0acebfc12/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

N'oubliez pas de d√©finir le d√©bit de communication s√©rie √† 115200.

Une fois le code t√©l√©charg√© avec succ√®s, la LED s'allume lorsque vous appuyez sur le bouton et s'√©teint lorsque vous le rel√¢chez.

En m√™me temps, vous pouvez ouvrir le Moniteur S√©rie dans le coin sup√©rieur droit pour observer la valeur du bouton. Lorsque le bouton est enfonc√©, "1" sera imprim√©, sinon "0" sera imprim√©.

.. image:: img/button_serial.png


**Comment √ßa marche**

Les projets pr√©c√©dents impliquaient tous la sortie de signaux, soit sous forme de signaux num√©riques ou PWM.

Ce projet consiste √† recevoir des signaux d'entr√©e d'un composant externe vers la carte ESP32. Vous pouvez visualiser le signal d'entr√©e via le Moniteur S√©rie dans l'IDE Arduino.

#. Dans la fonction ``setup()``, la broche du bouton est initialis√©e en tant qu'``input`` et la broche de la LED est initialis√©e en tant qu'``output``. La communication s√©rie est √©galement lanc√©e avec un d√©bit de 115200.

    .. code-block:: arduino

        void setup() {
            Serial.begin(115200);
            // initialise la broche du bouton comme entr√©e
            pinMode(buttonPin, INPUT);
            // initialise la broche de la LED comme sortie
            pinMode(ledPin, OUTPUT);
        }
    
    * ``Serial.begin(speed)`` : D√©finit le d√©bit en bits par seconde (baud) pour la transmission de donn√©es s√©rie.

        * ``speed`` : en bits par seconde (baud). Types de donn√©es autoris√©s : ``long``.

#. Dans la fonction ``loop()``, l'√©tat du bouton est lu et stock√© dans la variable ``buttonState``. La valeur de ``buttonState`` est imprim√©e sur le Moniteur S√©rie √† l'aide de ``Serial.println()``.

    .. code-block:: arduino

        void loop() {
            // lire l'√©tat de la valeur du bouton
            buttonState = digitalRead(buttonPin);
            Serial.println(buttonState);
            delay(100);
            // si le bouton est enfonc√©, l'√©tat du bouton est HAUT
            if (buttonState == HIGH) {
                // allumer la LED
                digitalWrite(ledPin, HIGH);

            } else {
                // √©teindre la LED
                digitalWrite(ledPin, LOW);
            }
        }

    Si le bouton est enfonc√© et que l'``buttonState`` est HAUT, la LED est allum√©e en mettant la broche ``ledPin`` √† HAUT. Sinon, la LED est √©teinte.

    * ``int digitalRead(uint8_t pin);`` : Pour lire l'√©tat d'une broche donn√©e configur√©e comme INPUT, on utilise la fonction digitalRead. Cette fonction renverra l'√©tat logique de la broche s√©lectionn√©e comme ``HIGH`` ou ``LOW``.

        * ``pin`` : s√©lectionne le GPIO.

    * ``Serial.println()`` : Imprime des donn√©es sur le port s√©rie sous forme de texte ASCII lisible par l'homme, suivi d'un caract√®re de retour chariot (ASCII 13, ou '\r') et d'un caract√®re de nouvelle ligne (ASCII 10, ou '\n').
