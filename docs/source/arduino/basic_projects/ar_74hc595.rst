.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_74hc595:

2.4 Microchip - 74HC595
===========================

Willkommen bei diesem aufregenden Projekt! In diesem Projekt verwenden wir den 74HC595-Chip, um eine flie√üende Anzeige von 8 LEDs zu steuern.

Stellen Sie sich vor, Sie starten dieses Projekt und beobachten einen faszinierenden Lichtfluss, als ob ein funkelnder Regenbogen zwischen den 8 LEDs springt. Jede LED leuchtet nacheinander auf und verblasst schnell, w√§hrend die n√§chste LED weiterhin leuchtet und einen wundersch√∂nen und dynamischen Effekt erzeugt.

Durch geschickte Nutzung des 74HC595-Chips k√∂nnen wir die Ein- und Ausschaltzust√§nde mehrerer LEDs steuern, um den flie√üenden Effekt zu erzielen. Dieser Chip verf√ºgt √ºber mehrere Ausgangspins, die in Serie geschaltet werden k√∂nnen, um die Reihenfolge der LED-Beleuchtung zu steuern. Dar√ºber hinaus k√∂nnen wir dank der Erweiterbarkeit des Chips problemlos weitere LEDs zur flie√üenden Anzeige hinzuf√ºgen und noch spektakul√§rere Effekte erzielen.

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Kit zu kaufen. Hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - ESP32 Starter Kit
        - 320+
        - |link_esp32_starter_kit|

Sie k√∂nnen sie auch einzeln √ºber die unten stehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|


**Verf√ºgbare Pins**

Hier ist eine Liste der verf√ºgbaren Pins auf dem ESP32-Board f√ºr dieses Projekt.

.. list-table::
    :widths: 5 20 

    * - Verf√ºgbare Pins
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Schaltplan**

.. image:: ../../img/circuit/circuit_2.4_74hc595_led.png
    :width: 600

* Wenn MR (Pin10) auf hohem Pegel ist und CE (Pin13) auf niedrigem Pegel ist, wird die Daten beim Anstieg der SHcp eingegeben und geht durch den Anstieg der SHcp in das Speicherregister.
* Wenn die beiden Takte miteinander verbunden sind, ist der Schieberegister immer einen Takt fr√ºher als das Speicherregister.
* Im Speicherregister befinden sich ein serieller Schiebeeingangspin (DS), ein serieller Ausgangspin (Q7') und ein asynchroner R√ºcksetzknopf (niedriger Pegel).
* Das Speicherregister gibt einen Bus mit parallel 8 Bit und in drei Zust√§nden aus.
* Wenn OE aktiviert ist (niedriger Pegel), werden die Daten im Speicherregister auf den Bus (Q0 ~ Q7) ausgegeben.

**Verdrahtung**

.. image:: ../../img/wiring/2.4_74hc595_bb.png
    :width: 800


**Code**

.. note::

    * √ñffnen Sie die Datei ``2.4_74hc595.ino`` im Pfad ``esp32-starter-kit-main\c\codes\2.4_74hc595``.
    * W√§hlen Sie das Board (ESP32 Dev Module) und den entsprechenden Port aus, klicken Sie dann auf die Schaltfl√§che **Upload**.
    * :ref:`unknown_com_port`
    
.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/024e20bb-f9c6-4baf-bb27-cdf49eb91e9e/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Nachdem Sie den Code auf das ESP32-Board hochgeladen haben, k√∂nnen Sie sehen, wie die LEDs nacheinander eingeschaltet werden.

**Wie funktioniert das?**

#. Deklarieren Sie ein Array, um mehrere 8-Bit-Bin√§rzahlen zu speichern, die verwendet werden, um den Arbeitszustand der acht LEDs zu √§ndern, die von 74HC595 gesteuert werden. 

    .. code-block:: arduino

        int datArray[] = {B00000000, B00000001, B00000011, B00000111, B00001111, B00011111, B00111111, B01111111, B11111111};

#. ``loop()`` Funktion.

    .. code-block:: arduino

        void loop()
            {
                for(int num = 0; num <10; num++)
                {
                    digitalWrite(STcp,LOW); //Set ST_CP and hold low for as long as you are transmitting
                    shiftOut(DS,SHcp,MSBFIRST,datArray[num]);
                    digitalWrite(STcp,HIGH); //pull the ST_CPST_CP to save the data
                    delay(1000);
                }
            }


    * Durchl√§uft das Array ``datArray[]`` und sendet nacheinander die bin√§ren Werte an das Schieberegister.
    * Die Befehle ``digitalWrite(STcp, LOW)`` und ``digitalWrite(STcp, HIGH)`` speichern die Daten im Speicherregister.
    * Die Funktion ``shiftOut()`` sendet die bin√§ren Werte aus ``datArray[]`` an das Schieberegister unter Verwendung des Datenpins (DS) und des Schieberegister-Takt-Pins (SHcp). ``MSBFIRST`` bedeutet, dass die √úbertragung von den h√∂chsten Bits erfolgt.
    * Erzeugt dann eine 1-sek√ºndige Pause zwischen jedem Aktualisieren des LED-Musters.