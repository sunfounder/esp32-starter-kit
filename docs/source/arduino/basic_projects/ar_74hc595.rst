.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_74hc595:

2.4 Microchip - 74HC595
=============================

Bienvenue dans ce projet excitant ! Dans ce projet, nous utiliserons la puce 74HC595 pour contr√¥ler un affichage d√©filant de 8 LEDs.

Imaginez d√©clencher ce projet et assister √† un flux lumineux captivant, comme un arc-en-ciel scintillant sautant entre les 8 LEDs. Chaque LED s'allume une par une et s'√©teint rapidement, tandis que la LED suivante continue de briller, cr√©ant un effet dynamique et magnifique.

En utilisant intelligemment la puce 74HC595, nous pouvons contr√¥ler les √©tats de marche et d'arr√™t de plusieurs LEDs pour obtenir l'effet de d√©filement. Cette puce a plusieurs broches de sortie qui peuvent √™tre connect√©es en s√©rie pour contr√¥ler la s√©quence d'illumination des LEDs. De plus, gr√¢ce √† l'extensibilit√© de la puce, nous pouvons facilement ajouter plus de LEDs √† l'affichage d√©filant, cr√©ant des effets encore plus spectaculaires.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|


**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Sch√©ma**

.. image:: ../../img/circuit/circuit_2.4_74hc595_led.png
    :width: 600

* Lorsque MR (pin10) est au niveau haut et CE (pin13) est au niveau bas, les donn√©es sont entr√©es sur le front montant de SHcp et vont au registre de m√©moire par le front montant de SHcp. 
* Si les deux horloges sont connect√©es ensemble, le registre √† d√©calage est toujours une impulsion plus t√¥t que le registre de m√©moire. 
* Il y a une broche d'entr√©e de d√©calage s√©rie (DS), une broche de sortie s√©rie (Q7') et un bouton de r√©initialisation asynchrone (niveau bas) dans le registre de m√©moire. 
* Le registre de m√©moire produit un bus avec un parall√®le 8 bits et dans trois √©tats. 
* Lorsque OE est activ√© (niveau bas), les donn√©es du registre de m√©moire sont sorties sur le bus (Q0 ~ Q7).

**C√¢blage**

.. image:: ../../img/wiring/2.4_74hc595_bb.png
    :width: 800


**Code**

.. note::

    * Ouvrez le fichier ``2.4_74hc595.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\2.4_74hc595``.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **T√©l√©verser**.
    * :ref:`unknown_com_port`
    
.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/024e20bb-f9c6-4baf-bb27-cdf49eb91e9e/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Une fois que vous avez termin√© de t√©l√©verser le code sur la carte ESP32, vous pouvez voir les LEDs s'allumer une par une.

**Comment √ßa marche ?**

#. D√©clarez un tableau, stockez plusieurs nombres binaires de 8 bits qui sont utilis√©s pour changer l'√©tat de fonctionnement des huit LEDs contr√¥l√©es par 74HC595. 

    .. code-block:: arduino

        int datArray[] = {B00000000, B00000001, B00000011, B00000111, B00001111, B00011111, B00111111, B01111111, B11111111};

#. Fonction ``loop()``.

    .. code-block:: arduino

        void loop()
            {
                for(int num = 0; num <10; num++)
                {
                    digitalWrite(STcp,LOW); //R√©glez ST_CP et maintenez-le bas aussi longtemps que vous transmettez
                    shiftOut(DS,SHcp,MSBFIRST,datArray[num]);
                    digitalWrite(STcp,HIGH); //Tirez le ST_CP pour sauvegarder les donn√©es
                    delay(1000);
                }
            }

    * Parcourt le tableau ``datArray[]``, en envoyant s√©quentiellement les valeurs binaires au registre √† d√©calage.
    * Les commandes ``digitalWrite(STcp, LOW)`` et ``digitalWrite(STcp, HIGH)`` verrouillent les donn√©es dans le registre de stockage.
    * La fonction ``shiftOut()`` envoie les valeurs binaires de ``datArray[]`` au registre √† d√©calage en utilisant la broche de donn√©es (DS) et la broche d'horloge du registre √† d√©calage (SHcp). ``MSBFIRST`` signifie d√©placer √† partir des bits de poids fort.
    * Ensuite, cr√©ez une pause d'une seconde entre chaque mise √† jour du motif LED.
