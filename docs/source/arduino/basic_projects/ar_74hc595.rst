.. note::

    Ciao, benvenuto nella Community di Appassionati di SunFounder Raspberry Pi, Arduino e ESP32 su Facebook! Approfondisci le tue conoscenze su Raspberry Pi, Arduino e ESP32 insieme ad altri appassionati.

    **Perch√© unirsi a noi?**

    - **Supporto esperto**: Risolvi problemi post-vendita e sfide tecniche con l'aiuto della nostra community e del nostro team.
    - **Impara e Condividi**: Scambia consigli e tutorial per migliorare le tue competenze.
    - **Anteprime esclusive**: Ottieni l'accesso anticipato a nuovi annunci di prodotti e anteprime.
    - **Sconti speciali**: Goditi sconti esclusivi sui nostri prodotti pi√π recenti.
    - **Promozioni festive e Giveaway**: Partecipa a giveaway e promozioni festive.

    üëâ Pronto a esplorare e creare con noi? Clicca su [|link_sf_facebook|] e unisciti oggi!

.. _ar_74hc595:

2.4 Microchip - 74HC595
===========================

Benvenuto in questo entusiasmante progetto! In questo progetto utilizzeremo il chip 74HC595 per controllare una sequenza di accensione di 8 LED.

Immagina di avviare questo progetto e di assistere a un affascinante flusso di luce, come se un arcobaleno scintillante saltasse tra gli 8 LED. Ogni LED si accender√† uno alla volta e si spegner√† rapidamente, mentre il LED successivo continuer√† a brillare, creando un effetto dinamico e spettacolare.

Grazie all'uso intelligente del chip 74HC595, possiamo controllare lo stato di accensione e spegnimento di pi√π LED per ottenere l'effetto di flusso. Questo chip ha pi√π pin di uscita che possono essere collegati in serie per controllare la sequenza di illuminazione dei LED. Inoltre, grazie all'espandibilit√† del chip, possiamo facilmente aggiungere altri LED al display in movimento, creando effetti ancora pi√π spettacolari.

**Componenti necessari**

In questo progetto, avremo bisogno dei seguenti componenti.

√à sicuramente conveniente acquistare un kit completo, ecco il link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nome	
        - ELEMENTI IN QUESTO KIT
        - LINK
    *   - ESP32 Starter Kit
        - 320+
        - |link_esp32_starter_kit|

Puoi anche acquistarli separatamente dai link sottostanti.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUZIONE AI COMPONENTI
        - LINK PER L'ACQUISTO

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

**Pin Disponibili**

Ecco un elenco di pin disponibili sulla scheda ESP32 per questo progetto.

.. list-table::
    :widths: 5 20 

    * - Pin Disponibili
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Schema Elettrico**

.. image:: ../../img/circuit/circuit_2.4_74hc595_led.png
    :width: 600

* Quando MR (pin10) √® a livello alto e CE (pin13) √® a livello basso, i dati vengono immessi sul fronte di salita di SHcp e passano al registro di memoria attraverso il fronte di salita di SHcp. 
* Se i due clock sono collegati insieme, il registro a scorrimento √® sempre un impulso in anticipo rispetto al registro di memoria. 
* Nel registro di memoria c'√® un pin di ingresso di scorrimento seriale (DS), un pin di uscita seriale (Q7') e un pulsante di reset asincrono (livello basso). 
* Il registro di memoria fornisce un bus con uscita parallela a 8 bit e in tre stati. 
* Quando OE √® abilitato (livello basso), i dati nel registro di memoria vengono inviati al bus (Q0 ~ Q7).

**Cablaggio**

.. image:: ../../img/wiring/2.4_74hc595_bb.png
    :width: 800

**Codice**

.. note::

    * Apri il file ``2.4_74hc595.ino`` nel percorso ``esp32-starter-kit-main\c\codes\2.4_74hc595``.
    * Dopo aver selezionato la scheda (ESP32 Dev Module) e la porta appropriata, clicca sul pulsante **Carica**.
    * :ref:`unknown_com_port`
    
.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/024e20bb-f9c6-4baf-bb27-cdf49eb91e9e/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Una volta completato il caricamento del codice sulla scheda ESP32, vedrai i LED accendersi uno dopo l'altro.

**Come funziona?**

#. Dichiarare un array, memorizzare diversi numeri binari a 8 bit che vengono utilizzati per cambiare lo stato operativo degli otto LED controllati da 74HC595.

    .. code-block:: arduino

        int datArray[] = {B00000000, B00000001, B00000011, B00000111, B00001111, B00011111, B00111111, B01111111, B11111111};

#. Funzione ``loop()``.

    .. code-block:: arduino

        void loop()
            {
                for(int num = 0; num <10; num++)
                {
                    digitalWrite(STcp,LOW); //Imposta ST_CP e tieni basso finch√© trasmetti
                    shiftOut(DS,SHcp,MSBFIRST,datArray[num]);
                    digitalWrite(STcp,HIGH); //solleva ST_CP per salvare i dati
                    delay(1000);
                }
            }


    * Scorre attraverso il ``datArray[]``, inviando sequenzialmente i valori binari al registro a scorrimento.
    * I comandi ``digitalWrite(STcp, LOW)`` e ``digitalWrite(STcp, HIGH)`` agganciano i dati nel registro di memoria.
    * La funzione ``shiftOut()`` invia i valori binari da ``datArray[]`` al registro a scorrimento utilizzando il pin dati (DS) e il pin clock del registro a scorrimento (SHcp). ``MSBFIRST`` significa muoversi dai bit pi√π alti.
    * Poi crea una pausa di 1 secondo tra ogni aggiornamento del pattern dei LED.

