.. note::

    ¬°Hola, bienvenido a la Comunidad de Aficionados a Raspberry Pi, Arduino y ESP32 de SunFounder en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte de expertos**: Resuelve problemas posventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y avances.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de fiestas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy!

.. _ar_74hc595:

2.4 Microchip - 74HC595
===========================

¬°Bienvenido a este emocionante proyecto! En este proyecto, utilizaremos el chip 74HC595 para controlar un flujo luminoso de 8 LEDs.

Imagina activar este proyecto y ser testigo de un flujo hipnotizante de luz, como si un arco√≠ris chispeante saltara entre los 8 LEDs. Cada LED se iluminar√° uno por uno y se apagar√° r√°pidamente, mientras el siguiente LED contin√∫a brillando, creando un efecto hermoso y din√°mico.

Utilizando de manera ingeniosa el chip 74HC595, podemos controlar los estados de encendido y apagado de m√∫ltiples LEDs para lograr el efecto de flujo. Este chip tiene m√∫ltiples pines de salida que pueden conectarse en serie para controlar la secuencia de iluminaci√≥n de los LEDs. Adem√°s, gracias a la capacidad de expansi√≥n del chip, podemos agregar f√°cilmente m√°s LEDs al display de flujo, creando efectos a√∫n m√°s espectaculares.

**Componentes Necesarios**

Para este proyecto, necesitamos los siguientes componentes.

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit de Inicio ESP32
        - 320+
        - |link_esp32_starter_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DE COMPONENTES
        - ENLACE DE COMPRA

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|


**Pines Disponibles**

Aqu√≠ est√° una lista de los pines disponibles en la placa ESP32 para este proyecto.

.. list-table::
    :widths: 5 20 

    * - Pines Disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Esquem√°tico**

.. image:: ../../img/circuit/circuit_2.4_74hc595_led.png
    :width: 600

* Cuando MR (pin10) est√° a nivel alto y CE (pin13) est√° a nivel bajo, los datos se ingresan en el flanco ascendente de SHcp y pasan al registro de memoria a trav√©s del flanco ascendente de SHcp. 
* Si los dos relojes est√°n conectados juntos, el registro de desplazamiento siempre va un pulso antes que el registro de memoria. 
* Hay un pin de entrada de desplazamiento serial (DS), un pin de salida serial (Q7') y un bot√≥n de reinicio as√≠ncrono (nivel bajo) en el registro de memoria. 
* El registro de memoria produce una salida de Bus con 8 bits paralelos y en tres estados. 
* Cuando OE est√° habilitado (nivel bajo), los datos en el registro de memoria se env√≠an al bus(Q0 ~ Q7).

**Cableado**

.. image:: ../../img/wiring/2.4_74hc595_bb.png
    :width: 800


**C√≥digo**

.. note::

    * Abre el archivo ``2.4_74hc595.ino`` bajo la ruta de ``esp32-starter-kit-main\c\codes\2.4_74hc595``.
    * Despu√©s de seleccionar la placa (ESP32 Dev Module) y el puerto apropiado, haz clic en el bot√≥n **Subir**.
    * :ref:`unknown_com_port`
    
.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/024e20bb-f9c6-4baf-bb27-cdf49eb91e9e/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Cuando termines de subir los c√≥digos a la placa ESP32, podr√°s ver los LEDs encendi√©ndose uno tras otro.

**¬øC√≥mo funciona?**

#. Declara un arreglo, almacena varios n√∫meros binarios de 8 bits que se utilizan para cambiar el estado de trabajo de los ocho LEDs controlados por 74HC595.

    .. code-block:: arduino

        int datArray[] = {B00000000, B00000001, B00000011, B00000111, B00001111, B00011111, B00111111, B01111111, B11111111};

#. Funci√≥n ``loop()``.

    .. code-block:: arduino

        void loop()
            {
                for(int num = 0; num <10; num++)
                {
                    digitalWrite(STcp,LOW); //Set ST_CP and hold low for as long as you are transmitting
                    shiftOut(DS,SHcp,MSBFIRST,datArray[num]);
                    digitalWrite(STcp,HIGH); //pull the ST_CPST_CP to save the data
                    delay(1000);
                }
            }


    * Itera a trav√©s de ``datArray[]``, enviando secuencialmente los valores binarios al registro de desplazamiento.
    * Los comandos ``digitalWrite(STcp, LOW)`` y ``digitalWrite(STcp, HIGH)`` aseguran los datos en el registro de almacenamiento.
    * La funci√≥n ``shiftOut()`` env√≠a los valores binarios desde ``datArray[]`` al registro de desplazamiento usando el pin de datos (DS) y el pin de reloj del registro de desplazamiento (SHcp). ``MSBFIRST`` significa moverse desde los bits m√°s altos.
    * Luego crea una pausa de 1 segundo entre cada actualizaci√≥n del patr√≥n de LEDs.
