.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_servo:

4.3 Servo Oscillant
=========================
Un servo est un dispositif de positionnement connu pour sa capacit√© √† maintenir des angles sp√©cifiques et √† offrir une rotation pr√©cise. Cela le rend tr√®s pris√© pour les syst√®mes de contr√¥le n√©cessitant des ajustements angulaires constants. Il n'est pas surprenant que les servos soient largement utilis√©s dans les jouets t√©l√©command√©s haut de gamme, des mod√®les d'avions aux r√©pliques de sous-marins et aux robots t√©l√©command√©s sophistiqu√©s.

Dans cette aventure intrigante, nous allons nous lancer le d√©fi de manipuler le servo de mani√®re unique - en le faisant osciller ! Ce projet offre une excellente occasion de plonger plus profond√©ment dans la dynamique des servos, d'affiner vos comp√©tences en syst√®mes de contr√¥le pr√©cis et de mieux comprendre leur fonctionnement.

√ätes-vous pr√™t √† faire danser le servo au rythme de vos envies ? Embarquons ensemble dans cette aventure passionnante !

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_servo`
        - |link_servo_buy|


**Pins disponibles**

Voici une liste des pins disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Pins disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Sch√©ma**

.. image:: ../../img/circuit/circuit_4.3_servo.png

**C√¢blage**

* Le fil orange est le signal et est connect√© √† IO25.
* Le fil rouge est le VCC et est connect√© √† 5V.
* Le fil marron est la masse (GND) et est connect√© √† GND.

.. image:: ../../img/wiring/4.3_swinging_servo_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``4.3_servo.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\4.3_servo``. Ou copiez ce code dans **Arduino IDE**.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **T√©l√©verser**.
    * :ref:`unknown_com_port`
    * La biblioth√®que ``ESP32Servo`` est utilis√©e ici, vous pouvez l'installer √† partir du **Gestionnaire de Biblioth√®ques**.

        .. image:: img/servo_lib.png

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/34c7969e-fee3-413c-9fe7-9d38ca6fb906/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Une fois le code t√©l√©vers√©, vous pouvez voir le bras du servo osciller dans une plage de 0¬∞ √† 180¬∞.

**Comment √ßa marche ?**

#. Inclure la biblioth√®que |link_esp32servo| : Cette ligne importe la biblioth√®que ESP32Servo, n√©cessaire pour contr√¥ler le servo-moteur.

    .. code-block:: arduino

        #include <ESP32Servo.h>

#. D√©finir le servo et la broche √† laquelle il est connect√© : Cette section d√©clare un objet Servo (``myServo``) et un entier constant (``servoPin``) pour repr√©senter la broche √† laquelle le servo-moteur est connect√© (broche 25).

    .. code-block:: arduino

        // D√©finir le servo et la broche √† laquelle il est connect√©
        Servo myServo;
        const int servoPin = 25;

#. D√©finir les largeurs d'impulsion minimales et maximales pour le servo : Cette section d√©finit les largeurs d'impulsion minimales et maximales pour le servo-moteur (0,5 ms et 2,5 ms, respectivement).

    .. code-block:: arduino

        // D√©finir les largeurs d'impulsion minimales et maximales pour le servo
        const int minPulseWidth = 500; // 0.5 ms
        const int maxPulseWidth = 2500; // 2.5 ms


#. La fonction ``setup`` initialise le servo-moteur en l'attachant √† la broche sp√©cifi√©e et en d√©finissant sa plage de largeur d'impulsion. Elle d√©finit √©galement la fr√©quence PWM du servo √† la norme de 50Hz.

    .. code-block:: arduino

        void setup() {
            // Attacher le servo √† la broche sp√©cifi√©e et d√©finir sa plage de largeur d'impulsion
            myServo.attach(servoPin, minPulseWidth, maxPulseWidth);

            // D√©finir la fr√©quence PWM du servo
            myServo.setPeriodHertz(50); // Servo standard 50Hz
        }
    
    * ``attach (int pin, int min, int max)``: Cette fonction attache le servo-moteur √† la broche GPIO sp√©cifi√©e et d√©finit les largeurs d'impulsion minimales et maximales pour le servo.

        * ``pin``: Le num√©ro de la broche GPIO √† laquelle le servo est connect√©. 
        * Les ``min`` et ``max``: les largeurs d'impulsion minimales et maximales, respectivement, en microsecondes. Ces valeurs d√©finissent la plage de mouvement du servo-moteur.

    * ``setPeriodHertz(int hertz)``: Cette fonction d√©finit la fr√©quence PWM du servo-moteur en hertz.

        * ``hertz``: La fr√©quence PWM souhait√©e en hertz. La fr√©quence PWM par d√©faut pour les servos est de 50Hz, ce qui convient √† la plupart des applications. 


#. La fonction ``loop`` est la partie principale du code qui s'ex√©cute en continu. Elle fait osciller le servo-moteur de 0 √† 180 degr√©s, puis de nouveau √† 0 degr√©s. Cela se fait en mappant l'angle √† la largeur d'impulsion correspondante et en mettant √† jour le servo-moteur avec la nouvelle valeur de largeur d'impulsion.

    .. code-block:: arduino

        void loop() {
            // Faire osciller le servo de 0 √† 180 degr√©s
            for (int angle = 0; angle <= 180; angle++) {
                int pulseWidth = map(angle, 0, 180, minPulseWidth, maxPulseWidth);
                myServo.writeMicroseconds(pulseWidth);
                delay(15);
            }
    
            // Faire osciller le servo de 180 √† 0 degr√©s
            for (int angle = 180; angle >= 0; angle--) {
                int pulseWidth = map(angle, 0, 180, minPulseWidth, maxPulseWidth);
                myServo.writeMicroseconds(pulseWidth);
                delay(15);
            }
        }

    * ``writeMicroseconds(int value)``: Cette fonction d√©finit la largeur d'impulsion du servo-moteur en microsecondes. 
    
        * ``value``: La largeur d'impulsion souhait√©e en microsecondes. 
        
        La fonction ``writeMicroseconds(int value)`` prend un entier en argument, repr√©sentant la largeur d'impulsion souhait√©e en microsecondes. Cette valeur doit g√©n√©ralement se situer dans la plage sp√©cifi√©e par les largeurs d'impulsion minimales et maximales (``minPulseWidth`` et ``maxPulseWidth``) d√©finies plus t√¥t dans le code. La fonction d√©finit ensuite la largeur d'impulsion pour le servo-moteur, le faisant ainsi se d√©placer √† la position correspondante.
