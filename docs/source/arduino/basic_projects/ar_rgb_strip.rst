.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_rgb_strip:

2.7 RGB-LED-Streifen
======================

In diesem Projekt tauchen wir ein in die faszinierende Welt der Steuerung von WS2812-LED-Streifen und erwecken eine lebendige Farbenvielfalt zum Leben. Mit der F√§higkeit, jede LED auf dem Streifen einzeln zu steuern, k√∂nnen wir fesselnde Lichteffekte kreieren, die die Sinne bezaubern.

Dar√ºber hinaus haben wir eine spannende Erweiterung zu diesem Projekt hinzugef√ºgt, in der wir das Reich der Zuf√§lligkeit erkunden. Durch die Einf√ºhrung zuf√§lliger Farben und die Implementierung eines flie√üenden Lichteffekts k√∂nnen wir ein hypnotisierendes visuelles Erlebnis schaffen, das fasziniert und verzaubert.

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - ESP32 Starter Kit
        - 320+
        - |link_esp32_starter_kit|

Sie k√∂nnen sie auch separat √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ws2812`
        - |link_ws2812_buy|

**Schaltplan**

.. image:: ../../img/circuit/circuit_2.7_ws2812.png
    :width: 500
    :align: center


**Verf√ºgbare Pins**

Hier ist eine Liste der verf√ºgbaren Pins auf dem ESP32-Board f√ºr dieses Projekt.

.. list-table::
    :widths: 5 20 

    * - Verf√ºgbare Pins
      - IO13, IO12, IO14, IO27, IO26, IO25, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


.. note::

    IO33 ist f√ºr dieses Projekt nicht verf√ºgbar.

    Der WS2812-LED-Streifen ist eine Art von LED-Streifen, der ein pr√§zises Pulsweitenmodulationssignal (PWM) ben√∂tigt. Das PWM-Signal hat genaue Anforderungen in Bezug auf Zeit und Spannung. Zum Beispiel entspricht ein "0"-Bit f√ºr den WS2812 einem High-Level-Impuls von etwa 0,4 Mikrosekunden, w√§hrend ein "1"-Bit einem High-Level-Impuls von etwa 0,8 Mikrosekunden entspricht. Das bedeutet, dass der Streifen hochfrequente Spannungs√§nderungen empfangen muss.

    Jedoch wird mit einem 4,7K-Pull-Up-Widerstand und einem 100nf-Pull-Down-Kondensator an IO33 ein einfacher Tiefpassfilter erstellt. Diese Art von Schaltung ‚Äûgl√§ttet‚Äú hochfrequente Signale, da der Kondensator einige Zeit zum Aufladen und Entladen ben√∂tigt, wenn er Spannungs√§nderungen erh√§lt. Wenn sich das Signal zu schnell √§ndert (d.h. hochfrequent ist), kann der Kondensator nicht mithalten. Dies f√ºhrt dazu, dass das Ausgangssignal verschwommen und f√ºr den Streifen unkenntlich wird.

**Verdrahtung**

.. image:: ../../img/wiring/2.7_rgb_strip_bb.png
    :width: 800

**Code**

.. note::

    * Sie k√∂nnen die Datei ``2.7_rgb_strip.ino`` unter dem Pfad ``esp32-starter-kit-main\c\codes\2.7_rgb_strip`` √∂ffnen. Oder kopieren Sie diesen Code in die **Arduino IDE**.
    * Nachdem Sie das Board (ESP32 Dev Module) und den entsprechenden Port ausgew√§hlt haben, klicken Sie auf den **Upload**-Knopf.
    * :ref:`unknown_com_port`
    * Hier wird die ``Adafruit NeoPixel``-Bibliothek verwendet, die Sie √ºber den **Library Manager** installieren k√∂nnen.

        .. image:: img/rgb_strip_lib.png

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/bccd25f6-4e3e-45e2-b9f5-76a1b0866794/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


Nachdem der Code erfolgreich hochgeladen wurde, werden die LEDs auf dem Streifen nacheinander mit einer gelben Farbe aufleuchten und dann ausgehen, wodurch ein einfacher Verfolgungseffekt entsteht.


**Wie funktioniert das?**

#. Die Adafruit NeoPixel-Bibliothek einbinden: Diese Zeile importiert die Adafruit NeoPixel-Bibliothek, damit das Sketch ihre Funktionen und Klassen zur Steuerung des LED-Streifens nutzen kann.

    .. code-block:: arduino

        #include <Adafruit_NeoPixel.h> // Include the Adafruit NeoPixel library

#. Konstanten f√ºr den LED-Streifen definieren.

    .. code-block:: arduino

        #define LED_PIN 13 // NeoPixel LED strip
        #define NUM_LEDS 8 // Number of LEDs

#. Eine Instanz der Adafruit_NeoPixel-Klasse erstellen.

    .. code-block:: arduino

       // Create an instance of the Adafruit_NeoPixel class
        Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

    Diese Zeile erstellt eine Instanz der Klasse ``Adafruit_NeoPixel`` namens ``strip`` und konfiguriert sie mit der Anzahl der LEDs, dem mit dem LED-Streifen verbundenen Pin und den Signalparametern (GRB-Farbreihenfolge und 800 kHz Datenrate).


    * ``Adafruit_NeoPixel (uint16_t n, int16_t p = 6, neoPixelType t = NEO_GRB + NEO_KHZ800)``

    NeoPixel-Konstruktor, wenn L√§nge, Pin und Pixeltyp zur Kompilierzeit bekannt sind. Gibt ein Adafruit_NeoPixel-Objekt zur√ºck. Vor der Verwendung die Funktion ``begin()`` aufrufen.

        * ``n``: Anzahl der NeoPixels im Strang.
        * ``p``: Arduino-Pinnummer, die das NeoPixel-Datensignal steuert.
        * ``t``: Pixeltyp - Kombinieren Sie ``NEO_*`` Konstanten definiert in ``Adafruit_NeoPixel.h``, zum Beispiel ``NEO_GRB+NEO_KHZ800`` f√ºr NeoPixels, die einen 800 KHz (statt 400 KHz) Datenstrom erwarten mit Farbbytes in gr√ºn, rot, blau Reihenfolge pro Pixel.

#. Den WS2812 RGB-Streifen initialisieren und die Anfangsfarbe des Streifens auf Schwarz (aus) setzen.

    .. code-block:: arduino

        void setup() {
            strip.begin(); // Initialize the NeoPixel strip
            strip.show(); // Set initial color to black
        }

    * ``void begin (void)``: Konfigurieren des NeoPixel-Pins f√ºr den Ausgang.
    * ``void show (void)``: √úbertragen von Pixeldaten im RAM zu NeoPixels.

#. In der Funktion ``loop()`` werden die LEDs auf dem Streifen nacheinander mit einer gelben Farbe eingeschaltet und dann ausgeschaltet, um einen einfachen Verfolgungseffekt zu erzeugen.

    .. code-block:: arduino

        void loop() {
            // Turn on LEDs one by one
            for (int i = 0; i < NUM_LEDS; i++) {
                strip.setPixelColor(i, 100, 45, 0); // Set the color of the i-th LED to red
                strip.show(); // Update the LED strip with the new colors
                delay(100); // Wait for 100 milliseconds
            }
            
            // Turn off LEDs one by one
            for (int i = 0; i < NUM_LEDS; i++) {
                strip.setPixelColor(i, 0, 0, 0); // Set the color of the i-th LED to black (turn it off)
                strip.show(); // Update the LED strip with the new colors
                delay(100); // Wait for 100 milliseconds
            }
        }

    * ``void setPixelColor (uint16_t n, uint8_t r, uint8_t g, uint8_t b)``

    Setzt die Farbe eines Pixels mit separaten Rot-, Gr√ºn- und Blaukomponenten. Bei Verwendung von RGBW-Pixeln wird Wei√ü auf 0 gesetzt.

        * ``n``: Pixelindex, beginnend bei 0.
        * ``r``: Rot-Helligkeit, 0 = minimal (aus), 255 = maximal.
        * ``g``: Gr√ºn-Helligkeit, 0 = minimal (aus), 255 = maximal.
        * ``b``: Blau-Helligkeit, 0 = minimal (aus), 255 = maximal.
