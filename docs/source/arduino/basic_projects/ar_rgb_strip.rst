.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_rgb_strip:

2.7 Bande LED RGB
=========================

Dans ce projet, nous allons plonger dans le monde fascinant des bandes LED WS2812 et donner vie √† un affichage vibrant de couleurs. Avec la capacit√© de contr√¥ler individuellement chaque LED de la bande, nous pouvons cr√©er des effets lumineux captivants qui √©blouiront les sens.

De plus, nous avons inclus une extension passionnante √† ce projet, o√π nous explorerons le domaine du hasard. En introduisant des couleurs al√©atoires et en impl√©mentant un effet de lumi√®re fluide, nous pouvons cr√©er une exp√©rience visuelle envo√ªtante et captivante.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ws2812`
        - |link_ws2812_buy|

**Sch√©ma**

.. image:: ../../img/circuit/circuit_2.7_ws2812.png
    :width: 500
    :align: center


**Pins disponibles**

Voici une liste des pins disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Pins disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


.. note::

    IO33 n'est pas disponible pour ce projet.

    La bande LED WS2812 est un type de bande LED qui n√©cessite un signal de modulation de largeur d'impulsion (PWM) pr√©cis. Le signal PWM a des exigences pr√©cises en termes de temps et de tension. Par exemple, un bit "0" pour le WS2812 correspond √† une impulsion de niveau haut d'environ 0,4 microsecondes, tandis qu'un bit "1" correspond √† une impulsion de niveau haut d'environ 0,8 microsecondes. Cela signifie que la bande doit recevoir des changements de tension √† haute fr√©quence.

    Cependant, avec une r√©sistance pull-up de 4,7K et un condensateur pull-down de 100nF sur IO33, un simple filtre passe-bas est cr√©√©. Ce type de circuit "lisse" les signaux haute fr√©quence, car le condensateur a besoin de temps pour se charger et se d√©charger lorsqu'il re√ßoit des changements de tension. Par cons√©quent, si le signal change trop rapidement (c'est-√†-dire √† haute fr√©quence), le condensateur ne pourra pas suivre. Cela entra√Æne un flou du signal de sortie et le rend m√©connaissable pour la bande.

**C√¢blage**

.. image:: ../../img/wiring/2.7_rgb_strip_bb.png
    :width: 800

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``2.7_rgb_strip.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\2.7_rgb_strip``. Ou copiez ce code dans **Arduino IDE**.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **T√©l√©verser**.
    * :ref:`unknown_com_port`
    * La biblioth√®que ``Adafruit NeoPixel`` est utilis√©e ici, vous pouvez l'installer √† partir du **Gestionnaire de Biblioth√®ques**.

        .. image:: img/rgb_strip_lib.png

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/bccd25f6-4e3e-45e2-b9f5-76a1b0866794/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


Lorsque le code est t√©l√©vers√© avec succ√®s, les LED de la bande s'allumeront s√©quentiellement avec une couleur jaune puis s'√©teindront, cr√©ant un simple effet de poursuite.


**Comment √ßa marche ?**


#. Inclure la biblioth√®que Adafruit NeoPixel : Cette ligne importe la biblioth√®que Adafruit NeoPixel afin que le croquis puisse utiliser ses fonctions et classes pour contr√¥ler la bande LED.

    .. code-block:: arduino

        #include <Adafruit_NeoPixel.h> // Inclure la biblioth√®que Adafruit NeoPixel

#. D√©finir les constantes pour la bande LED.

    .. code-block:: arduino

        #define LED_PIN 13 // Bande LED NeoPixel
        #define NUM_LEDS 8 // Nombre de LEDs

#. Cr√©er une instance de la classe Adafruit_NeoPixel.

    .. code-block:: arduino

       // Cr√©er une instance de la classe Adafruit_NeoPixel
        Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

    Cette ligne cr√©e une instance de la classe ``Adafruit_NeoPixel`` appel√©e ``strip`` et la configure avec le nombre de LEDs, la pin connect√©e √† la bande LED et les param√®tres du signal (ordre des couleurs GRB et fr√©quence de donn√©es de 800 kHz).


    * ``Adafruit_NeoPixel (uint16_t n, int16_t p = 6, neoPixelType t = NEO_GRB + NEO_KHZ800)``	

    Constructeur NeoPixel lorsque la longueur, la pin et le type de pixel sont connus au moment de la compilation. Retourne un objet Adafruit_NeoPixel. Appelez la fonction ``begin()`` avant utilisation.

        * ``n``: Nombre de NeoPixels dans la bande.
        * ``p``: Num√©ro de la pin Arduino qui pilotera les donn√©es NeoPixel.
        * ``t``: Type de pixel - additionnez les constantes ``NEO_*`` d√©finies dans ``Adafruit_NeoPixel.h``, par exemple ``NEO_GRB+NEO_KHZ800`` pour les NeoPixels n√©cessitant un flux de donn√©es de 800 KHz (vs 400 KHz) avec des octets de couleur exprim√©s dans l'ordre vert, rouge, bleu par pixel.

#. Initialiser la bande RGB WS2812 et d√©finir la couleur initiale de la bande sur noir (√©teint).

    .. code-block:: arduino

        void setup() {
            strip.begin(); // Initialiser la bande NeoPixel
            strip.show(); // D√©finir la couleur initiale sur noir
        }

    * ``void begin (void)``: Configure la pin NeoPixel pour la sortie.
    * ``void show (void)``: Transmet les donn√©es des pixels en RAM aux NeoPixels.

#. Dans la fonction ``loop()``, les LED de la bande s'allumeront s√©quentiellement avec une couleur jaune puis s'√©teindront, cr√©ant un simple effet de poursuite.

    .. code-block:: arduino

        void loop() {
        // Allumer les LEDs une par une
        for (int i = 0; i < NUM_LEDS; i++) {
            strip.setPixelColor(i, 100, 45, 0); // D√©finir la couleur de la i√®me LED en rouge
            strip.show(); // Mettre √† jour la bande LED avec les nouvelles couleurs
            delay(100); // Attendre 100 millisecondes
        }
        
        // √âteindre les LEDs une par une
        for (int i = 0; i < NUM_LEDS; i++) {
            strip.setPixelColor(i, 0, 0, 0); // D√©finir la couleur de la i√®me LED en noir (√©teindre)
            strip.show(); // Mettre √† jour la bande LED avec les nouvelles couleurs
            delay(100); // Attendre 100 millisecondes
        }
        }

    * ``void setPixelColor (uint16_t n, uint8_t r, uint8_t g, uint8_t b)``

    D√©finir la couleur d'un pixel en utilisant des composantes rouge, verte et bleue s√©par√©es. Si vous utilisez des pixels RGBW, le blanc sera d√©fini sur 0.

        * ``n``: Index du pixel, en commen√ßant par 0.
        * ``r``: Luminosit√© du rouge, 0 = minimum (√©teint), 255 = maximum.
        * ``g``: Luminosit√© du vert, 0 = minimum (√©teint), 255 = maximum.
        * ``b``: Luminosit√© du bleu, 0 = minimum (√©teint), 255 = maximum.

