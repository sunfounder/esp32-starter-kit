.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _ar_potentiometer:

5.8 Den Knopf Drehen
========================

Ein Potentiometer ist ein dreipoliges Ger√§t, das h√§ufig verwendet wird, um den Widerstand in einem Schaltkreis anzupassen. Es verf√ºgt √ºber einen Drehknopf oder einen Schieberegler, mit dem der Widerstandswert des Potentiometers ver√§ndert werden kann. In diesem Projekt werden wir es nutzen, um die Helligkeit einer LED zu steuern, √§hnlich wie bei einer Schreibtischlampe im t√§glichen Leben. Durch Anpassen der Position des Potentiometers k√∂nnen wir den Widerstand im Schaltkreis ver√§ndern, wodurch der Stromfluss durch die LED reguliert und deren Helligkeit entsprechend angepasst wird. Dies erm√∂glicht es uns, ein anpassbares und verstellbares Beleuchtungserlebnis zu schaffen, √§hnlich dem einer Schreibtischlampe.

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir die folgenden Komponenten.

Es ist definitiv praktisch, ein ganzes Kit zu kaufen, hier ist der Link:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - ESP32 Starter Kit
        - 320+
        - |link_esp32_starter_kit|

Sie k√∂nnen sie auch separat √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_pot`
        - |link_potentiometer_buy|

**Verf√ºgbare Pins**

* **Verf√ºgbare Pins**

    Hier ist eine Liste der verf√ºgbaren Pins auf dem ESP32-Board f√ºr dieses Projekt.

    .. list-table::
        :widths: 5 15

        *   - Verf√ºgbare Pins
            - IO14, IO25, I35, I34, I39, I36

* **Strapping Pins**

    Die folgenden Pins sind Strapping-Pins, die den Startprozess des ESP32 w√§hrend des Einschaltens oder Resets beeinflussen. Sobald der ESP32 jedoch erfolgreich gestartet ist, k√∂nnen sie als normale Pins verwendet werden.

    .. list-table::
        :widths: 5 15

        *   - Strapping Pins
            - IO0, IO12


**Schaltplan**

.. image:: ../../img/circuit/circuit_5.8_potentiometer.png

Wenn Sie das Potentiometer drehen, √§ndert sich der Wert von I35. Durch Programmierung k√∂nnen Sie den Wert von I35 verwenden, um die Helligkeit der LED zu steuern. Daher √§ndert sich die Helligkeit der LED entsprechend, wenn Sie das Potentiometer drehen.



**Verdrahtung**

.. image:: ../../img/wiring/5.8_potentiometer_bb.png

**Code**


.. note::

    * Die Datei ``5.8_pot.ino`` kann unter dem Pfad ``esp32-starter-kit-main\c\codes\5.8_pot`` ge√∂ffnet werden. 
    * Nachdem Sie das Board (ESP32 Dev Module) und den passenden Port ausgew√§hlt haben, klicken Sie auf den **Upload**-Button.
    * :ref:`unknown_com_port`
   
.. raw:: html
     
    <iframe src=https://create.arduino.cc/editor/sunfounder01/aadce2e7-fd5d-4608-a557-f1e4d07ba795/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Nachdem der Code erfolgreich hochgeladen wurde, drehen Sie am Potentiometer und Sie werden sehen, wie sich die Helligkeit der LED entsprechend √§ndert. Gleichzeitig k√∂nnen Sie die analogen und Spannungswerte des Potentiometers im seriellen Monitor sehen.


**Wie funktioniert das?**

#. Definition der Konstanten f√ºr Pin-Verbindungen und PWM-Einstellungen.

    .. code-block:: arduino

        const int potPin = 35; // Potentiometer connected to GPIO14
        const int ledPin = 26; // LED connected to GPIO26

        // PWM settings
        const int freq = 5000; // PWM frequency
        const int resolution = 12; // PWM resolution (bits)

    Hier ist die PWM-Aufl√∂sung auf 12 Bit eingestellt und der Bereich ist 0-4095.

#. Konfiguration des Systems in der Funktion ``setup()``.

    .. code-block:: arduino

        void setup() {
            Serial.begin(115200);

            // Configure PWM pin
            ledcAttach(ledPin, freq, resolution);
        }

    * In der Funktion ``setup()`` wird die serielle Kommunikation mit einer Baudrate von 115200 gestartet. 
    * Die Funktion ``ledcSetup()`` wird aufgerufen, um den PWM-Kanal mit der angegebenen Frequenz und Aufl√∂sung einzurichten, und die Funktion ``ledcAttachPin()`` wird aufgerufen, um den angegebenen LED-Pin mit dem PWM-Kanal zu verkn√ºpfen.

#. Hauptloop (wird wiederholt ausgef√ºhrt) in der Funktion ``loop()``.

    .. code-block:: arduino

        void loop() {

            int potValue = analogRead(potPin); // read the value of the potentiometer
            uint32_t voltage_mV = analogReadMilliVolts(potPin); // Read the voltage in millivolts
            
            ledcWrite(ledPin, potValue);
            
            Serial.print("Potentiometer Value: ");
            Serial.print(potValue);
            Serial.print(", Voltage: ");
            Serial.print(voltage_mV / 1000.0); // Convert millivolts to volts
            Serial.println(" V");
            
            delay(100);
        }

    * ``uint32_t analogReadMilliVolts(uint8_t pin);``: Diese Funktion wird verwendet, um den ADC-Wert f√ºr einen gegebenen Pin/ADC-Kanal in Millivolt zu erhalten.

        * ``pin`` GPIO-Pin, um den analogen Wert zu lesen.

    Der Potentiometerwert wird direkt als PWM-Tastverh√§ltnis f√ºr die Steuerung der LED-Helligkeit √ºber die Funktion ``ledcWrite()`` verwendet, da der Wertebereich ebenfalls von 0 bis 4095 reicht.

