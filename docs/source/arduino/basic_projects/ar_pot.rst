.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_potentiometer:

5.8 Tourner le bouton
===========================

Un potentiom√®tre est un dispositif √† trois bornes couramment utilis√© pour ajuster la r√©sistance dans un circuit. Il dispose d'un bouton ou d'un levier coulissant qui permet de varier la valeur de r√©sistance du potentiom√®tre. Dans ce projet, nous l'utiliserons pour contr√¥ler la luminosit√© d'une LED, de mani√®re similaire √† une lampe de bureau dans notre vie quotidienne. En ajustant la position du potentiom√®tre, nous pouvons changer la r√©sistance dans le circuit, r√©gulant ainsi le courant traversant la LED et ajustant sa luminosit√© en cons√©quence. Cela nous permet de cr√©er une exp√©rience d'√©clairage personnalisable et r√©glable, similaire √† celle d'une lampe de bureau.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_pot`
        - |link_potentiometer_buy|

**Pins disponibles**

* **Pins disponibles**

    Voici une liste des pins disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 15

        *   - Pins disponibles
            - IO14, IO25, I35, I34, I39, I36

* **Pins de strapping**

    Les pins suivantes sont des pins de strapping, qui affectent le processus de d√©marrage de l'ESP32 lors de la mise sous tension ou du r√©initialisation. Cependant, une fois l'ESP32 d√©marr√© avec succ√®s, elles peuvent √™tre utilis√©es comme des pins normales.

    .. list-table::
        :widths: 5 15

        *   - Pins de strapping
            - IO0, IO12


**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.8_potentiometer.png

Lorsque vous tournez le potentiom√®tre, la valeur de I35 changera. En programmant, vous pouvez utiliser la valeur de I35 pour contr√¥ler la luminosit√© de la LED. Ainsi, lorsque vous tournez le potentiom√®tre, la luminosit√© de la LED changera en cons√©quence.


**C√¢blage**

.. image:: ../../img/wiring/5.8_potentiometer_bb.png

**Code**


.. note::

    * Vous pouvez ouvrir le fichier ``5.8_pot.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\5.8_pot``. 
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **T√©l√©verser**.
    * :ref:`unknown_com_port`
   
.. raw:: html
     
    <iframe src=https://create.arduino.cc/editor/sunfounder01/aadce2e7-fd5d-4608-a557-f1e4d07ba795/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s avoir t√©l√©vers√© le code avec succ√®s, tournez le potentiom√®tre et vous verrez la luminosit√© de la LED changer en cons√©quence. En m√™me temps, vous pouvez voir les valeurs analogiques et de tension du potentiom√®tre dans le moniteur s√©rie.


**Comment √ßa marche ?**

#. D√©finir les constantes pour les connexions des pins et les param√®tres PWM.

    .. code-block:: arduino

        const int potPin = 35; // Potentiom√®tre connect√© √†
        const int ledPin = 26; // LED connect√©e √†

        // Param√®tres PWM
        const int freq = 5000; // Fr√©quence PWM
        const int resolution = 12; // R√©solution PWM (bits)


    Ici, la r√©solution PWM est d√©finie sur 12 bits et la plage est de 0-4095.

#. Configurer le syst√®me dans la fonction ``setup()``.

    .. code-block:: arduino

        void setup() {
            Serial.begin(115200);

            // Configurer PWM
            ledcAttach(ledPin, freq, resolution);
        }

    * Dans la fonction ``setup()``, la communication s√©rie est d√©marr√©e √† un d√©bit de 115200 bauds. 
    * La fonction ``ledcAttach()`` est appel√©e pour configurer la pin LED sp√©cifi√©e avec la fr√©quence et la r√©solution sp√©cifi√©es.

#. Boucle principale (ex√©cut√©e en continu) dans la fonction ``loop()``.

    .. code-block:: arduino

        void loop() {

            int potValue = analogRead(potPin); // lire la valeur du potentiom√®tre
            uint32_t voltage_mV = analogReadMilliVolts(potPin); // Lire la tension en millivolts
            
            ledcWrite(ledPin, potValue);
            
            Serial.print("Potentiometer Value: ");
            Serial.print(potValue);
            Serial.print(", Voltage: ");
            Serial.print(voltage_mV / 1000.0); // Convert millivolts to volts
            Serial.println(" V");
            
            delay(100);
        }

    * ``uint32_t analogReadMilliVolts(uint8_t pin);``: Cette fonction est utilis√©e pour obtenir la valeur ADC pour une pin/canal ADC donn√©e en millivolts.

        * ``pin`` GPIO pin pour lire la valeur analogique.

    La valeur du potentiom√®tre est directement utilis√©e comme cycle de travail PWM pour contr√¥ler la luminosit√© de la LED via la fonction ``ledcWrite()``, car la plage des valeurs est √©galement de 0 √† 4095.
