.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _bluetooth_audio_player:

7.3 Lecteur audio Bluetooth
=================================

Le but de ce projet est de fournir une solution simple pour lire de l'audio depuis 
un appareil compatible Bluetooth en utilisant le DAC int√©gr√© de l'ESP32.

Le projet implique l'utilisation de la biblioth√®que ``ESP32-A2DP`` pour recevoir les 
donn√©es audio d'un appareil Bluetooth. Les donn√©es audio re√ßues sont ensuite transmises 
au DAC interne de l'ESP32 en utilisant l'interface I2S. L'interface I2S est configur√©e 
pour fonctionner en mode ma√Ætre, en mode transmission et en mode DAC int√©gr√©. Les donn√©es 
audio sont ensuite diffus√©es via le haut-parleur connect√© au DAC.

Lors de l'utilisation du DAC interne de l'ESP32, il est important de noter que le niveau 
de tension de sortie est limit√© √† 1,1V. Il est donc recommand√© d'utiliser un amplificateur 
externe pour augmenter le niveau de tension de sortie au niveau souhait√©. Il est √©galement 
important de s'assurer que les donn√©es audio sont au bon format et au bon taux d'√©chantillonnage 
pour √©viter toute distorsion ou bruit lors de la lecture.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_audio_speaker`
        - \-


**√âtapes de fonctionnement**

#. Construisez le circuit.

    Comme il s'agit d'un amplificateur mono, vous pouvez connecter IO25 √† la broche L ou R du module amplificateur audio.

    La r√©sistance de 10K est utilis√©e pour r√©duire le bruit haute fr√©quence et diminuer le volume audio. Elle forme un filtre passe-bas RC avec la capacit√© parasite du DAC et de l'amplificateur audio. Ce filtre diminue l'amplitude des signaux haute fr√©quence, r√©duisant efficacement le bruit haute fr√©quence. Ainsi, l'ajout de la r√©sistance de 10K rend la musique plus douce et √©limine les bruits ind√©sirables haute fr√©quence.

    Si la musique de votre carte SD est d√©j√† douce, vous pouvez retirer ou remplacer la r√©sistance par une valeur plus petite.

    .. image:: ../../img/wiring/7.3_bluetooth_audio_player_bb.png

#. Ouvrez le code.

    * Ouvrez le fichier ``7.3_bluetooth_audio_player.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\7.3_bluetooth_audio_player``.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **T√©l√©verser**.
    * :ref:`unknown_com_port`
    * La biblioth√®que ``ESP32-A2DP`` est utilis√©e ici, reportez-vous √† :ref:`install_lib_man` pour un tutoriel d'installation.

    .. warning::

        Si vous utilisez une carte de d√©veloppement ESP32 version 3.0.0 ou sup√©rieure, vous pouvez rencontrer des erreurs lors du processus de compilation.
        Ce probl√®me est g√©n√©ralement d√ª au fait que les versions plus r√©centes de la carte ne supportent plus la biblioth√®que ``ESP32-A2DP``.
        Pour ex√©cuter correctement cet exemple, il est recommand√© de r√©trograder la version du firmware de votre carte ESP32 √† 2.0.17. 
        Apr√®s avoir termin√© cet exemple, mettez √† jour vers la derni√®re version.

        .. image:: ../../faq/img/version_2.0.17.png



    .. raw:: html

        <iframe src=https://create.arduino.cc/editor/sunfounder01/7bb7d6dd-72d4-4529-bb42-033b38558347/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
        
#. Apr√®s avoir s√©lectionn√© la bonne carte et le bon port, cliquez sur le bouton T√©l√©verser.

#. Une fois le code t√©l√©vers√© avec succ√®s, allumez l'appareil compatible Bluetooth et recherchez les appareils disponibles, puis connectez-vous au ``ESP32_Bluetooth``.

    .. image:: img/connect_bluetooth.png

#. Lisez l'audio sur l'appareil et l'audio devrait √™tre diffus√© via le haut-parleur connect√© √† l'ESP32.


**Explication du code**

#. Le code commence par inclure la biblioth√®que ``BluetoothA2DPSink.h``, qui est utilis√©e pour recevoir les donn√©es audio de l'appareil Bluetooth. L'objet ``BluetoothA2DPSink`` est ensuite cr√©√© et configur√© avec les param√®tres de l'interface I2S. 

    .. code-block:: arduino

        #include "BluetoothA2DPSink.h"

        BluetoothA2DPSink a2dp_sink;


#. Dans la fonction setup, le code initialise une ``struct i2s_config_t`` avec la configuration souhait√©e pour l'interface I2S (Inter-IC Sound). 

    .. code-block:: arduino

        void setup() {
        const i2s_config_t i2s_config = {
            .mode = (i2s_mode_t) (I2S_MODE_MASTER | I2S_MODE_TX | I2S_MODE_DAC_BUILT_IN),
            .sample_rate = 44100, // corrig√© par les informations du Bluetooth
            .bits_per_sample = (i2s_bits_per_sample_t) 16, // le module DAC ne prendra que les 8 bits du MSB
            .channel_format =  I2S_CHANNEL_FMT_RIGHT_LEFT,
            .communication_format = (i2s_comm_format_t)I2S_COMM_FORMAT_STAND_MSB,
            .intr_alloc_flags = 0, // priorit√© d'interruption par d√©faut
            .dma_buf_count = 8,
            .dma_buf_len = 64,
            .use_apll = false
        };

        a2dp_sink.set_i2s_config(i2s_config);  
        a2dp_sink.start("ESP32_Bluetooth");  

        }

    * L'interface I2S est utilis√©e pour transf√©rer des donn√©es audio num√©riques entre les appareils. 
    * La configuration comprend le ``mode I2S``, le ``taux d'√©chantillonnage``, les ``bits par √©chantillon``, le ``format de canal``, le ``format de communication``, les ``drapeaux d'allocation d'interruption``, le ``nombre de tampons DMA``, la ``longueur du tampon DMA``, et s'il faut utiliser ou non l'APLL (Audio PLL).
    * La ``struct i2s_config_t`` est ensuite pass√©e en argument √† la fonction ``set_i2s_config`` de l'objet ``BluetoothA2DPSink`` pour configurer l'interface I2S pour la lecture audio.
    * La fonction ``start`` de l'objet ``BluetoothA2DPSink`` est appel√©e pour d√©marrer le r√©cepteur audio Bluetooth et commencer √† diffuser l'audio via le DAC int√©gr√©.

