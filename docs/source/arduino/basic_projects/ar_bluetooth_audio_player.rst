.. note::

    Hallo und willkommen in der SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasten-Gemeinschaft auf Facebook! Tauchen Sie tiefer ein in die Welt von Raspberry Pi, Arduino und ESP32 mit anderen Enthusiasten.

    **Warum beitreten?**

    - **Expertenunterst√ºtzung**: L√∂sen Sie Nachverkaufsprobleme und technische Herausforderungen mit Hilfe unserer Gemeinschaft und unseres Teams.
    - **Lernen & Teilen**: Tauschen Sie Tipps und Anleitungen aus, um Ihre F√§higkeiten zu verbessern.
    - **Exklusive Vorschauen**: Erhalten Sie fr√ºhzeitigen Zugang zu neuen Produktank√ºndigungen und exklusiven Einblicken.
    - **Spezialrabatte**: Genie√üen Sie exklusive Rabatte auf unsere neuesten Produkte.
    - **Festliche Aktionen und Gewinnspiele**: Nehmen Sie an Gewinnspielen und Feiertagsaktionen teil.

    üëâ Sind Sie bereit, mit uns zu erkunden und zu erschaffen? Klicken Sie auf [|link_sf_facebook|] und treten Sie heute bei!

.. _bluetooth_audio_player:

7.3 Bluetooth-Audio-Player
==============================

Das Ziel des Projekts ist es, eine einfache L√∂sung f√ºr das Abspielen von Audio von einem Bluetooth-f√§higen 
Ger√§t mithilfe des eingebauten DAC des ESP32 bereitzustellen.

Das Projekt umfasst die Verwendung der ``ESP32-A2DP``-Bibliothek, um Audiodaten 
von einem Bluetooth-f√§higen Ger√§t zu empfangen. Die empfangenen Audiodaten werden dann an den internen 
DAC des ESP32 √ºber die I2S-Schnittstelle √ºbertragen. Die I2S-Schnittstelle ist konfiguriert, um im Master-Modus, 
Sendemodus und mit eingebautem DAC zu arbeiten. Die Audiodaten werden dann √ºber den Lautsprecher, der an den DAC angeschlossen ist, wiedergegeben.

Beim Verwenden des internen DAC des ESP32 ist zu beachten, dass das Ausgangsspannungsniveau auf 1,1 V begrenzt ist. 
Daher wird empfohlen, einen externen Verst√§rker zu verwenden, um das Ausgangsspannungsniveau auf das gew√ºnschte Niveau zu erh√∂hen. 
Es ist auch wichtig, sicherzustellen, dass die Audiodaten im richtigen Format und mit der richtigen Abtastrate vorliegen, um Verzerrungen 
oder Ger√§usche w√§hrend der Wiedergabe zu vermeiden.

**Ben√∂tigte Komponenten**

F√ºr dieses Projekt ben√∂tigen wir folgende Komponenten.

Es ist definitiv praktisch, ein komplettes Set zu kaufen. Hier ist der Link: 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Name	
        - ARTIKEL IN DIESEM KIT
        - LINK
    *   - ESP32 Starter Kit
        - 320+
        - |link_esp32_starter_kit|

Sie k√∂nnen sie auch einzeln √ºber die untenstehenden Links kaufen.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - KOMPONENTENVORSTELLUNG
        - KAUF-LINK

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_audio_speaker`
        - \-


**Betriebsschritte**

#. Bauen Sie den Schaltkreis auf.

    Da dies ein Mono-Verst√§rker ist, k√∂nnen Sie IO25 an den L- oder R-Pin des Audioverst√§rkermoduls anschlie√üen.

    Der 10K-Widerstand wird verwendet, um hochfrequentes Rauschen zu reduzieren und die Lautst√§rke des Audios zu verringern. Er bildet zusammen mit der parasit√§ren Kapazit√§t des DAC und des Audioverst√§rkers einen RC-Tiefpassfilter. Dieser Filter verringert die Amplitude von Hochfrequenzsignalen und reduziert so effektiv hochfrequentes Rauschen. Das Hinzuf√ºgen des 10K-Widerstands macht die Musik weicher und eliminiert unerw√ºnschtes Hochfrequenzrauschen.

    Wenn die Musik auf Ihrer SD-Karte bereits leise ist, k√∂nnen Sie den Widerstand entfernen oder durch einen kleineren Wert ersetzen.

    .. image:: ../../img/wiring/7.3_bluetooth_audio_player_bb.png

#. √ñffnen Sie den Code.

    * √ñffnen Sie die Datei ``7.3_bluetooth_audio_player.ino`` unter dem Pfad ``esp32-starter-kit-main\c\codes\7.3_bluetooth_audio_player``.
    * Nachdem Sie das Board (ESP32 Dev Module) und den passenden Port ausgew√§hlt haben, klicken Sie auf den **Upload**-Knopf.
    * :ref:`unknown_com_port`
    * Hier wird die ``ESP32-A2DP``-Bibliothek verwendet, siehe :ref:`install_lib_man` f√ºr eine Anleitung zur Installation.

    .. warning::

        Wenn Sie ein ESP32-Entwicklungsboard Version 3.0.0 oder h√∂her verwenden, k√∂nnen w√§hrend des Kompilierungsprozesses Fehler auftreten.
        Dieses Problem tritt normalerweise auf, weil neuere Versionen des Boards die ``ESP32-A2DP``-Bibliothek nicht mehr unterst√ºtzen.
        Um dieses Beispiel ordnungsgem√§√ü auszuf√ºhren, wird empfohlen, die Firmware-Version Ihres ESP32-Boards auf 2.0.17 herunterzustufen.
        Nachdem Sie dieses Beispiel abgeschlossen haben, aktualisieren Sie wieder auf die neueste Version.

        .. image:: ../../faq/img/version_2.0.17.png

    .. raw:: html

        <iframe src=https://create.arduino.cc/editor/sunfounder01/7bb7d6dd-72d4-4529-bb42-033b38558347/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
        
#. Nachdem Sie das richtige Board und den Port ausgew√§hlt haben, klicken Sie auf den Hochladen-Button.

#. Sobald der Code erfolgreich hochgeladen wurde, schalten Sie das Bluetooth-f√§hige Ger√§t ein und suchen Sie nach verf√ºgbaren Ger√§ten, dann verbinden Sie sich mit dem ``ESP32_Bluetooth``.

    .. image:: img/connect_bluetooth.png

#. Spielen Sie Audio auf dem Ger√§t ab, und der Ton sollte √ºber den Lautsprecher, der an den ESP32 angeschlossen ist, wiedergegeben werden.


**Code-Erkl√§rung**

#. Der Code beginnt mit dem Einbinden der Bibliothek ``BluetoothA2DPSink.h``, die verwendet wird, um Audiodaten von dem Bluetooth-f√§higen Ger√§t zu empfangen. Das ``BluetoothA2DPSink``-Objekt wird dann erstellt und mit den Einstellungen der I2S-Schnittstelle konfiguriert. 

    .. code-block:: arduino

        #include "BluetoothA2DPSink.h"

        BluetoothA2DPSink a2dp_sink;


#. In der Setup-Funktion initialisiert der Code eine ``i2s_config_t struct`` mit der gew√ºnschten Konfiguration f√ºr die I2S (Inter-IC Sound)-Schnittstelle. 

    .. code-block:: arduino

        void setup() {
        const i2s_config_t i2s_config = {
            .mode = (i2s_mode_t) (I2S_MODE_MASTER | I2S_MODE_TX | I2S_MODE_DAC_BUILT_IN),
            .sample_rate = 44100, // corrected by info from bluetooth
            .bits_per_sample = (i2s_bits_per_sample_t) 16, // the DAC module will only take the 8bits from MSB
            .channel_format =  I2S_CHANNEL_FMT_RIGHT_LEFT,
            .communication_format = (i2s_comm_format_t)I2S_COMM_FORMAT_STAND_MSB,
            .intr_alloc_flags = 0, // default interrupt priority
            .dma_buf_count = 8,
            .dma_buf_len = 64,
            .use_apll = false
        };

        a2dp_sink.set_i2s_config(i2s_config);  
        a2dp_sink.start("ESP32_Bluetooth");  

        }

    * Die I2S-Schnittstelle wird verwendet, um digitale Audiodaten zwischen Ger√§ten zu √ºbertragen. 
    * Die Konfiguration umfasst den ``I2S mode``, ``sample rate``, ``bits per sample``, ``channel format``, ``communication format``, ``interrupt allocation flags``, ``DMA buffer count``, ``DMA buffer length`` und ob der APLL (Audio PLL) verwendet wird oder nicht.
    * Die ``i2s_config_t struct`` wird dann als Argument an die ``set_i2s_config``-Funktion des ``BluetoothA2DPSink``-Objekts √ºbergeben, um die I2S-Schnittstelle f√ºr die Audiowiedergabe zu konfigurieren.
    * Die ``start``-Funktion des ``BluetoothA2DPSink``-Objekts wird aufgerufen, um den Bluetooth-Audioempf√§nger zu starten und die Audiowiedergabe √ºber den eingebauten DAC zu beginnen.

