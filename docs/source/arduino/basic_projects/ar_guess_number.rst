.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_guess_number:

6.7 Devinez le Nombre
===========================
Vous vous sentez chanceux ? Vous voulez tester votre intuition et voir si vous pouvez deviner le bon num√©ro ? Ne cherchez pas plus loin que le jeu Devinez le Nombre !

Avec ce projet, vous pouvez jouer √† un jeu amusant et excitant de hasard.

En utilisant une t√©l√©commande IR, les joueurs saisissent des nombres entre 0 et 99 pour essayer de deviner le num√©ro chanceux g√©n√©r√© al√©atoirement.
Le syst√®me affiche le nombre saisi par le joueur sur un √©cran LCD, ainsi que des indications de limite sup√©rieure et inf√©rieure pour aider le joueur √† se rapprocher de la bonne r√©ponse. Avec chaque tentative, les joueurs se rapprochent du num√©ro chanceux, jusqu'√† ce que finalement, quelqu'un trouve le bon num√©ro et gagne le jeu !

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants.

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_receiver`
        - |link_receiver_buy|
    *   - :ref:`cpn_lcd`
        - |link_i2clcd1602_buy|

**Sch√©ma**

.. image:: ../../img/circuit/circuit_6.7_guess_number.png

**C√¢blage**

.. image:: ../../img/wiring/6.7_guess_receiver_bb.png
    :width: 800

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``6.7_guess_number.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\6.7_guess_number`` directement.
    * Les biblioth√®ques ``LiquidCrystal_I2C`` et ``IRremoteESP8266`` sont utilis√©es ici, r√©f√©rez-vous √† :ref:`install_lib_man` pour un tutoriel d'installation.


.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/2e4217f5-c1b7-4859-a34d-d791bbc5e57a/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

    
* Apr√®s avoir t√©l√©charg√© le code avec succ√®s, appuyez sur n'importe quel bouton num√©rique de la t√©l√©commande pour d√©marrer le jeu.
* Saisissez un num√©ro en utilisant les boutons num√©riques de la t√©l√©commande. Pour saisir un chiffre, vous devez appuyer sur la touche **cycle** pour confirmer.
* Le syst√®me affichera le num√©ro saisi et les indications de limite sup√©rieure et inf√©rieure sur l'√©cran LCD.
* Continuez √† deviner jusqu'√† ce que vous trouviez le bon num√©ro chanceux.
* Apr√®s avoir trouv√© le bon num√©ro, le syst√®me affichera un message de succ√®s et g√©n√©rera un nouveau num√©ro chanceux.

.. note:: 

    Si le code et le c√¢blage sont corrects, mais que l'√©cran LCD n'affiche toujours aucun contenu, vous pouvez ajuster le potentiom√®tre √† l'arri√®re pour augmenter le contraste.


**Comment √ßa marche ?**

#. Dans la fonction ``setup()``, l'√©cran LCD I2C et le r√©cepteur IR sont initialis√©s. Ensuite, appelez la fonction ``initNewValue()`` pour g√©n√©rer un nouveau num√©ro chanceux al√©atoire, et un message de bienvenue est affich√© sur l'√©cran LCD.

    .. code-block:: arduino

        void setup() {
            // Initialiser l'√©cran LCD
            lcd.init();
            lcd.backlight();

            // D√©marrer la communication s√©rie
            Serial.begin(9600);

            // Activer le r√©cepteur IR
            irrecv.enableIRIn();

            // Initialiser une nouvelle valeur chanceuse
            initNewValue();
        }

#. Dans la fonction ``loop``, le code attend un signal du r√©cepteur IR. Lorsqu'un signal est re√ßu, la fonction ``decodeKeyValue`` est appel√©e pour d√©coder le signal et obtenir la valeur du bouton correspondant.

    .. code-block:: arduino

        void loop() {
        // Si un signal est re√ßu du r√©cepteur IR
        if (irrecv.decode(&results)) {
            bool result = 0;
            String num = decodeKeyValue(results.value);

            // Si le bouton POWER est appuy√©
            if (num == "POWER") {
                initNewValue(); // Initialiser une nouvelle valeur chanceuse
            }

            // Si le bouton CYCLE est appuy√©
            else if (num == "CYCLE") {
                result = detectPoint(); // D√©tecter le num√©ro saisi
                lcdShowInput(result); // Afficher le r√©sultat sur l'√©cran LCD
            }

            // Si un bouton num√©rique (0-9) est appuy√©, 
            // ajouter le chiffre au num√©ro saisi 
            // et d√©tecter le num√©ro s'il est sup√©rieur ou √©gal √† 10
            else if (num >= "0" && num <= "9") {
                count = count * 10;
                count += num.toInt();
                if (count >= 10) {
                    result = detectPoint();
                }
                lcdShowInput(result);
            }
            irrecv.resume();
        }
        }

    * Selon la valeur du bouton, la fonction appropri√©e est appel√©e. Si un bouton num√©rique est appuy√©, la variable ``count`` est mise √† jour, et la fonction ``detectPoint`` est appel√©e pour v√©rifier si le num√©ro saisi est correct. La fonction ``lcdShowInput`` est appel√©e pour afficher le num√©ro saisi et les indications de limite sup√©rieure et inf√©rieure sur l'√©cran LCD.
    * Si le bouton ``POWER`` est appuy√©, la fonction ``initNewValue`` est appel√©e pour g√©n√©rer un nouveau num√©ro chanceux et afficher le message de bienvenue sur l'√©cran LCD.
    * Si le bouton ``CYCLE`` est appuy√©, la fonction ``detectPoint`` est appel√©e pour v√©rifier si le num√©ro saisi est correct. La fonction ``lcdShowInput`` est appel√©e pour afficher le num√©ro saisi et les indications de limite sup√©rieure et inf√©rieure sur l'√©cran LCD.
