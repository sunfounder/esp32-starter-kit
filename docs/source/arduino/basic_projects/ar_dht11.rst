.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_dht11:

5.13 Temp√©rature - Humidit√©
=======================================

Le DHT11 est un capteur de temp√©rature et d'humidit√© couramment utilis√© pour les mesures environnementales. C'est un capteur num√©rique qui communique avec un microcontr√¥leur pour fournir des relev√©s de temp√©rature et d'humidit√©.

Dans ce projet, nous allons lire les donn√©es du capteur DHT11 et afficher les valeurs de temp√©rature et d'humidit√© qu'il d√©tecte.

En lisant les donn√©es fournies par le capteur, nous pouvons obtenir les valeurs actuelles de temp√©rature et d'humidit√© de l'environnement. Ces valeurs peuvent √™tre utilis√©es pour la surveillance en temps r√©el des conditions environnementales, les observations m√©t√©orologiques, le contr√¥le du climat int√©rieur, les rapports d'humidit√©, et plus encore.

**Composants N√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_dht11`
        - |link_dht11_buy|

* **Broches Disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 20

        *   - Broches Disponibles
            - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.13_dht11.png

**C√¢blage**

.. image:: ../../img/wiring/5.13_dht11_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``5.13_dht11.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\5.13_dht11``.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **Upload**.
    * :ref:`unknown_com_port`
    * La biblioth√®que ``DHT sensor library`` est utilis√©e ici, vous pouvez l'installer depuis le **Library Manager**.

        .. image:: img/dht_lib.png

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/95bef6dc-a4db-4315-9308-6663b77ddfa0/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

N'oubliez pas de d√©finir le taux de communication s√©rie √† 115200 bauds.

Une fois le code t√©l√©vers√© avec succ√®s, vous verrez le Moniteur S√©rie imprimer continuellement la temp√©rature et l'humidit√©, et √† mesure que le programme se stabilise, ces deux valeurs deviendront de plus en plus pr√©cises.

**Comment √ßa marche ?**

#. Inclut la biblioth√®que ``DHT.h``, qui fournit des fonctions pour interagir avec les capteurs DHT. Ensuite, configurez la broche et le type pour le capteur DHT.

    .. code-block:: arduino

        #include "DHT.h"

        #define DHTPIN 14  // Configurez la broche connect√©e √† la broche de donn√©es du DHT11
        #define DHTTYPE DHT11 // DHT 11 

        DHT dht(DHTPIN, DHTTYPE);

#. Initialise la communication s√©rie √† un d√©bit de 115200 bauds et initialise le capteur DHT.

    .. code-block:: arduino

        void setup() {
            Serial.begin(115200);
            Serial.println("DHT11 test!");
            dht.begin();
        }

#. Dans la fonction ``loop()``, lisez les valeurs de temp√©rature et d'humidit√© du capteur DHT11, et imprimez-les sur le moniteur s√©rie.

    .. code-block:: arduino

        void loop() {
            // Attendre quelques secondes entre les mesures.
            delay(2000);

            // Lire la temp√©rature ou l'humidit√© prend environ 250 millisecondes !
            // Les lectures du capteur peuvent √©galement √™tre vieilles de 2 secondes (c'est un capteur tr√®s lent)
            float humidity = dht.readHumidity();
            // Lire la temp√©rature en Celsius (par d√©faut)
            float temperture = dht.readTemperature();

            // V√©rifiez si les lectures ont √©chou√© et sortez t√¥t (pour r√©essayer).
            if (isnan(humidity) || isnan(temperture)) {
                Serial.println("Failed to read from DHT sensor!");
                return;
            }
            // Print the humidity and temperature
            Serial.print("Humidity: "); 
            Serial.print(humidity);
            Serial.print(" %\t");
            Serial.print("Temperature: "); 
            Serial.print(temperture);
            Serial.println(" *C");
        }

    * La fonction ``dht.readHumidity()`` est appel√©e pour lire la valeur de l'humidit√© du capteur DHT.
    * La fonction ``dht.readTemperature()`` est appel√©e pour lire la valeur de la temp√©rature du capteur DHT.
    * La fonction ``isnan()`` est utilis√©e pour v√©rifier si les lectures sont valides. Si la valeur de l'humidit√© ou de la temp√©rature est NaN (not a number), cela indique un √©chec de lecture du capteur, et un message d'erreur est imprim√©.

**En savoir plus**

Vous pouvez √©galement afficher la temp√©rature et l'humidit√© sur le I2C LCD1602.

.. note::

    * Vous pouvez ouvrir le fichier ``5.10_thermistor_lcd.ino`` sous le chemin ``euler-kit/arduino/5.10_thermistor_lcd``.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **Upload**.
    * :ref:`unknown_com_port`
    * Les biblioth√®ques ``LiquidCrystal_I2C`` et ``DHT sensor library`` sont utilis√©es ici, vous pouvez les installer depuis le **Library Manager**.

.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/fb46ba7e-0a09-4805-87ab-f733e23eb920/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
