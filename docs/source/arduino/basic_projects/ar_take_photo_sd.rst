.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_take_photo_sd:


7.6 Prendre une Photo et Enregistrer sur SD
=================================================

Ce document d√©crit un projet qui consiste √† prendre une photo avec l'ESP32-CAM et √† l'enregistrer sur une carte SD. 
L'objectif du projet est de fournir une solution simple pour capturer des images en utilisant l'ESP32-CAM et les stocker sur une carte SD.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|


**Pr√©cautions √† prendre**

Lors de l'utilisation de l'ESP32-CAM, il est important de noter que la broche GPIO 0 doit √™tre connect√©e √† la masse (GND) pour t√©l√©charger un sketch. 
De plus, apr√®s avoir connect√© GPIO 0 √† GND, il faut appuyer sur le bouton RESET de l'ESP32-CAM pour mettre la carte en mode flash. 
Il est √©galement important de s'assurer que la carte SD est correctement mont√©e avant d'y enregistrer des images.

**√âtapes de fonctionnement**

#. Ins√©rez votre carte SD dans l'ordinateur √† l'aide d'un lecteur de cartes, puis formatez-la. Vous pouvez vous r√©f√©rer au tutoriel √† :ref:`format_sd_card`.

#. Ensuite, retirez le lecteur de cartes et ins√©rez la carte SD dans la carte d'extension.

    .. image:: ../../img/insert_sd.png

#. Maintenant, branchez la cam√©ra.

    .. raw:: html

        <video loop autoplay muted style="max-width:100%">
            <source src="../../_static/video/plugin_camera.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>

#. Connectez l'ESP32-WROOM-32E √† l'ordinateur √† l'aide du c√¢ble USB.

    .. image:: ../../img/plugin_esp32.png

#. Ouvrez le code.

    .. note::

        * Ouvrez le fichier ``7.6_take_photo_sd.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\7.6_take_photo_sd``.
        * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **T√©l√©verser**.
        * :ref:`unknown_com_port`

    .. raw:: html

        <iframe src=https://create.arduino.cc/editor/sunfounder01/4d698dc3-aef7-4aea-b8a3-7d143a4c7d3c/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


#. Maintenant, activez **PSRAM**.

    .. image:: img/sp230516_150554.png

#. D√©finissez le sch√©ma de partition sur **Huge APP (3MB No OTA/1MB SPIFFS)**.

    .. image:: img/sp230516_150840.png   

#. S√©lectionnez le port et la carte appropri√©s dans l'IDE Arduino et t√©l√©versez le code sur votre ESP32.

#. Apr√®s le t√©l√©versement r√©ussi du code, appuyez sur le bouton **Reset** pour prendre une photo. De plus, vous pouvez v√©rifier le moniteur s√©rie pour voir les informations suivantes indiquant la capture r√©ussie.

    .. code-block:: arduino

        Picture file name: /picture9.jpg
        Saved file to path: /picture9.jpg
        Going to sleep now

    .. image:: img/press_reset.png

#. Maintenant, retirez la carte SD de la carte d'extension et ins√©rez-la dans votre ordinateur. Vous pourrez voir les photos que vous venez de prendre.

    .. image:: img/take_photo1.png

**Comment √ßa marche ?**

Ce code fonctionne avec une ESP32-CAM AI Thinker pour prendre une photo, l'enregistrer sur une carte SD, puis mettre l'ESP32-CAM en sommeil profond. Voici une explication des parties cl√©s :

* **Biblioth√®ques** : Le code commence par l'inclusion des biblioth√®ques n√©cessaires pour l'ESP32-CAM, le syst√®me de fichiers (FS), la carte SD et l'EEPROM (utilis√©e pour stocker des donn√©es entre les cycles d'alimentation).

    .. code-block:: arduino

        #include "esp_camera.h"
        #include "Arduino.h"
        #include "FS.h"                // Carte SD ESP32
        #include "SD_MMC.h"            // Carte SD ESP32
        #include "soc/soc.h"           // D√©sactiver les probl√®mes de brownout
        #include "soc/rtc_cntl_reg.h"  // D√©sactiver les probl√®mes de brownout
        #include "driver/rtc_io.h"
        #include <EEPROM.h>  // lire et √©crire depuis la m√©moire flash

* **D√©finitions des Pins** : Cette section configure les constantes repr√©sentant les connexions des broches de l'ESP32-CAM au module cam√©ra.

    .. code-block:: arduino

        #define PWDN_GPIO_NUM 32
        #define RESET_GPIO_NUM -1
        #define XCLK_GPIO_NUM 0
        #define SIOD_GPIO_NUM 26
        #define SIOC_GPIO_NUM 27

        #define Y9_GPIO_NUM 35
        #define Y8_GPIO_NUM 34
        #define Y7_GPIO_NUM 39
        #define Y6_GPIO_NUM 36
        #define Y5_GPIO_NUM 21
        #define Y4_GPIO_NUM 19
        #define Y3_GPIO_NUM 18
        #define Y2_GPIO_NUM 5
        #define VSYNC_GPIO_NUM 25
        #define HREF_GPIO_NUM 23
        #define PCLK_GPIO_NUM 22


* **Variables Globales** : Une variable globale ``pictureNumber`` est d√©clar√©e pour suivre le nombre de photos prises et sauvegard√©es sur la carte SD.

    .. code-block:: arduino

        int pictureNumber = 0;


* **Fonction Setup** : Dans la fonction ``setup()``, plusieurs t√¢ches sont effectu√©es :

    * Tout d'abord, le d√©tecteur de chute de tension est d√©sactiv√© pour √©viter que l'ESP32-CAM ne se r√©initialise pendant les fortes consommations de courant (comme lors du fonctionnement de la cam√©ra).
    
        .. code-block:: arduino

            WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);  // D√©sactiver le d√©tecteur de chute de tension

    * La communication s√©rie est initialis√©e pour le d√©bogage.

        .. code-block:: arduino

            Serial.begin(115200);

    * La configuration de la cam√©ra est d√©finie avec ``camera_config_t``, y compris les broches GPIO, la fr√©quence XCLK, le format des pixels, la taille de l'image, la qualit√© JPEG et le nombre de tampons de trame.
    
        .. code-block:: arduino

            camera_config_t config;
            config.ledc_channel = LEDC_CHANNEL_0;
            config.ledc_timer = LEDC_TIMER_0;
            config.pin_d0 = Y2_GPIO_NUM;
            config.pin_d1 = Y3_GPIO_NUM;
            config.pin_d2 = Y4_GPIO_NUM;
            config.pin_d3 = Y5_GPIO_NUM;
            config.pin_d4 = Y6_GPIO_NUM;
            config.pin_d5 = Y7_GPIO_NUM;
            config.pin_d6 = Y8_GPIO_NUM;
            config.pin_d7 = Y9_GPIO_NUM;
            config.pin_xclk = XCLK_GPIO_NUM;
            config.pin_pclk = PCLK_GPIO_NUM;
            config.pin_vsync = VSYNC_GPIO_NUM;
            config.pin_href = HREF_GPIO_NUM;
            config.pin_sscb_sda = SIOD_GPIO_NUM;
            config.pin_sscb_scl = SIOC_GPIO_NUM;
            config.pin_pwdn = PWDN_GPIO_NUM;
            config.pin_reset = RESET_GPIO_NUM;
            config.xclk_freq_hz = 20000000;
            config.pixel_format = PIXFORMAT_JPEG;
    
    * La cam√©ra est ensuite initialis√©e avec la configuration, et en cas d'√©chec, un message d'erreur est imprim√©.

        .. code-block:: arduino

            esp_err_t err = esp_camera_init(&config);
            if (err != ESP_OK) {
                Serial.printf("Camera init failed with error 0x%x", err);
                return;
            }

    * La carte SD est initialis√©e, et en cas d'√©chec, un message d'erreur est imprim√©.

           .. code-block:: arduino
            
            if (!SD_MMC.begin()) {
                Serial.println("SD Card Mount Failed");
                return;
            }   

            uint8_t cardType = SD_MMC.cardType();
            if (cardType == CARD_NONE) {
                Serial.println("No SD Card attached");
                return;
            }        

    * Une photo est captur√©e avec la cam√©ra et stock√©e dans le tampon de trame.

        .. code-block:: arduino

            fb = esp_camera_fb_get();
            if (!fb) {
                Serial.println("Camera capture failed");
                return;
            }

    * L'EEPROM est lue pour r√©cup√©rer le num√©ro de la derni√®re photo, puis le num√©ro de la photo pour la nouvelle capture est incr√©ment√©.

        .. code-block:: arduino

            EEPROM.begin(EEPROM_SIZE);
            pictureNumber = EEPROM.read(0) + 1;

    * Un chemin pour la nouvelle photo est cr√©√© sur la carte SD, avec un nom de fichier correspondant au num√©ro de la photo.

        .. code-block:: arduino

            String path = "/picture" + String(pictureNumber) + ".jpg";

            fs::FS &fs = SD_MMC;
            Serial.printf("Picture file name: %s\n", path.c_str());

    * Apr√®s avoir sauvegard√© la photo, le num√©ro de la photo est stock√© dans l'EEPROM pour r√©cup√©ration lors du prochain cycle d'alimentation.

        .. code-block:: arduino

            File file = fs.open(path.c_str(), FILE_WRITE);
            if (!file) {
                Serial.println("Failed to open file in writing mode");
            } else {
                file.write(fb->buf, fb->len);  // payload (image), payload length
                Serial.printf("Saved file to path: %s\n", path.c_str());
                EEPROM.write(0, pictureNumber);
                EEPROM.commit();
            }
            file.close();
            esp_camera_fb_return(fb); 

    * Enfin, la LED int√©gr√©e (flash) est √©teinte et l'ESP32-CAM passe en mode sommeil profond.

        .. code-block:: arduino

            pinMode(4, OUTPUT);
            digitalWrite(4, LOW);
            rtc_gpio_hold_en(GPIO_NUM_4);

    * Mode Veille : L'ESP32-CAM passe en mode sommeil profond apr√®s chaque photo pour √©conomiser de l'√©nergie. Elle peut √™tre r√©veill√©e par une r√©initialisation ou par un signal sur des broches sp√©cifiques.

        .. code-block:: arduino

            delay(2000);
            Serial.println("Going to sleep now");
            delay(2000);
            esp_deep_sleep_start();
            Serial.println("This will never be printed");


* Fonction Loop : La fonction ``loop()`` est vide car apr√®s le processus de configuration, l'ESP32-CAM passe imm√©diatement en mode sommeil profond.


Notez que pour que ce code fonctionne, vous devez vous assurer que GPIO 0 est connect√© √† GND lors du t√©l√©chargement du sketch, et vous devrez peut-√™tre appuyer sur le bouton RESET int√©gr√© pour mettre votre carte en mode flash. N'oubliez pas non plus de remplacer "/picture" par votre propre nom de fichier. La taille de l'EEPROM est d√©finie √† 1, ce qui signifie qu'elle peut stocker des valeurs de 0 √† 255. Si vous pr√©voyez de prendre plus de 255 photos, vous devrez augmenter la taille de l'EEPROM et ajuster la mani√®re dont vous stockez et lisez le ``pictureNumber``.

