.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_fading:

2.2 Variation de la luminosit√©
==================================

Dans le projet pr√©c√©dent, nous avons contr√¥l√© la LED en l'allumant et l'√©teignant en utilisant une sortie num√©rique. Dans ce projet, nous allons cr√©er un effet de respiration sur la LED en utilisant la modulation de largeur d'impulsion (PWM). Le PWM est une technique qui permet de contr√¥ler la luminosit√© d'une LED ou la vitesse d'un moteur en faisant varier le cycle de travail d'un signal carr√©.

Avec le PWM, au lieu de simplement allumer ou √©teindre la LED, nous ajusterons la dur√©e pendant laquelle la LED est allum√©e par rapport √† la dur√©e pendant laquelle elle est √©teinte dans chaque cycle. En allumant et √©teignant rapidement la LED √† des intervalles vari√©s, nous pouvons cr√©er l'illusion que la LED s'√©claire et s'assombrit progressivement, simulant un effet de respiration.

En utilisant les capacit√©s PWM de l'ESP32 WROOM 32E, nous pouvons obtenir un contr√¥le fluide et pr√©cis de la luminosit√© de la LED. Cet effet de respiration ajoute un √©l√©ment dynamique et visuellement attrayant √† vos projets, cr√©ant un affichage accrocheur ou une ambiance agr√©able.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

**Pins disponibles**

Voici une liste des pins disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Pins disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Sch√©ma**

.. image:: ../../img/circuit/circuit_2.1_led.png

Ce projet utilise le m√™me circuit que le premier projet :ref:`ar_blink`, mais le type de signal est diff√©rent. Le premier projet consistait √† envoyer directement des niveaux num√©riques hauts et bas (0&1) √† partir du pin 26 pour allumer ou √©teindre la LED, ce projet utilise un signal PWM sur le pin 26 pour contr√¥ler la luminosit√© de la LED.

**C√¢blage**

.. image:: ../../img/wiring/2.1_hello_led_bb.png

**Code**

.. note::

    * Vous pouvez ouvrir le fichier ``2.2_fading_led.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\2.2_fading_led``.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **Upload**.
    * :ref:`unknown_com_port`
   
.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/aa898b09-be86-473b-9bfe-317556c696bb/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s avoir t√©l√©vers√© le code avec succ√®s, vous pouvez voir la LED respirer.

**Comment √ßa marche ?**

#. D√©finir les constantes et les variables.

    .. code-block:: arduino

        const int ledPin = 26; // Le pin GPIO pour la LED
        int brightness = 0;
        int fadeAmount = 5;
   
    * ``ledPin``: Le num√©ro du pin GPIO o√π la LED est connect√©e (dans ce cas, GPIO 26).
    * ``brightness``: Le niveau de luminosit√© actuel de la LED (initialement d√©fini √† 0).
    * ``fadeAmount``: Le montant par lequel la luminosit√© de la LED changera √† chaque √©tape (d√©fini √† 5).

#. Initialiser le canal PWM et configurer le pin de la LED.

    .. code-block:: arduino

        void setup() {
          ledcAttach(ledPin, 5000, 8);  // Attacher le pin LED
        }

    Ici, nous utilisons le p√©riph√©rique |link_ledc| (contr√¥le de LED) qui est principalement con√ßu pour contr√¥ler l'intensit√© des LED, bien qu'il puisse √©galement √™tre utilis√© pour g√©n√©rer des signaux PWM √† d'autres fins.

    * ``bool ledcAttach(uint8_t pin, uint32_t freq, uint8_t resolution);``: Cette fonction est utilis√©e pour configurer le pin LEDC avec une fr√©quence et une r√©solution donn√©es. Le canal LEDC sera s√©lectionn√© automatiquement.
            
        * ``pin`` s√©lectionner le pin GPIO.
        * ``freq`` s√©lectionner la fr√©quence du PWM.
        * ``resolution_bits`` s√©lectionner la r√©solution pour le canal LEDC. La plage est de 1 √† 14 bits (1-20 bits pour l'ESP32).

#. La fonction ``loop()`` contient la logique principale du programme et s'ex√©cute en continu. Elle met √† jour la luminosit√© de la LED, inverse la quantit√© de d√©clin lorsque la luminosit√© atteint la valeur minimale ou maximale, et introduit un d√©lai.

    .. code-block:: arduino

        void loop() {
            ledcWrite(ledPin, brightness);  // √âcrire la nouvelle valeur de luminosit√© sur le pin PWM
            brightness = brightness + fadeAmount;

            if (brightness <= 0 || brightness >= 255) {
                fadeAmount = -fadeAmount;
            }
            
            delay(50); // Attendre 50 millisecondes
        }

    * ``bool ledcWrite(uint8_t pin, uint32_t duty);``: Cette fonction est utilis√©e pour d√©finir le cycle de service pour le pin LEDC.
        
        * ``pin`` s√©lectionner le pin LEDC.
        * ``duty`` s√©lectionner le cycle de service √† d√©finir pour le canal s√©lectionn√©.

