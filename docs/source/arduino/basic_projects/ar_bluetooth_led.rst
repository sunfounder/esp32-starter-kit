.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_bluetooth_led:


7.2 Contr√¥le Bluetooth de LED RGB
======================================

Ce projet est une extension d'un projet pr√©c√©dent (:ref:`ar_bluetooth`), ajoutant des configurations de LED RGB et des commandes personnalis√©es telles que "led_off", "red", "green", etc. Ces commandes permettent de contr√¥ler la LED RGB en envoyant des commandes depuis un appareil mobile utilisant LightBlue.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_rgb`
        - |link_rgb_led_buy|

**√âtapes de fonctionnement**

#. Construisez le circuit.

    .. image:: ../../components/img/rgb_pin.jpg
        :width: 200
        :align: center

    La LED RGB a 4 broches : la broche longue est la cathode commune, qui est g√©n√©ralement connect√©e √† la masse ; la broche gauche √† c√¥t√© de la broche la plus longue est le rouge ; et les deux broches √† droite sont le vert et le bleu.

    .. image:: ../../img/wiring/2.3_color_light_bb.png

#. Ouvrez le fichier ``7.2_bluetooth_rgb_led.ino`` situ√© dans le r√©pertoire ``esp32-starter-kit-main\c\codes\7.2_bluetooth_rgb_led``, ou copiez le code dans l'IDE Arduino.

    .. raw:: html
         
        <iframe src=https://create.arduino.cc/editor/sunfounder01/b9331c9d-e9ea-4970-87ce-bf2ca8c231b2/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Pour √©viter les conflits de UUID, il est recommand√© de g√©n√©rer al√©atoirement trois nouveaux UUID en utilisant le |link_uuid| fourni par le Bluetooth SIG, et de les remplir dans les lignes de code suivantes.

    .. note::
        Si vous avez d√©j√† g√©n√©r√© trois nouveaux UUID dans le projet :ref:`ar_bluetooth`, alors vous pouvez continuer √† les utiliser.


    .. code-block:: arduino

        #define SERVICE_UUID           "your_service_uuid_here" 
        #define CHARACTERISTIC_UUID_RX "your_rx_characteristic_uuid_here"
        #define CHARACTERISTIC_UUID_TX "your_tx_characteristic_uuid_here"

    .. image:: img/uuid_generate.png

#. S√©lectionnez la carte et le port corrects, puis cliquez sur le bouton **Upload**.

#. Apr√®s avoir t√©l√©charg√© le code avec succ√®s, activez le **Bluetooth** sur votre appareil mobile et ouvrez l'application **LightBlue**.

    .. image:: img/bluetooth_open.png

#. Sur la page **Scan**, trouvez **ESP32-Bluetooth** et cliquez sur **CONNECT**. Si vous ne le voyez pas, essayez de rafra√Æchir la page plusieurs fois. Lorsque **"Connected to device!"** appara√Æt, la connexion Bluetooth est r√©ussie. Faites d√©filer vers le bas pour voir les trois UUID d√©finis dans le code.

    .. image:: img/bluetooth_connect.png
        :width: 800

#. Appuyez sur l'UUID d'envoi, puis d√©finissez le format des donn√©es sur "UTF-8 String". Vous pouvez maintenant √©crire ces commandes : "led_off", "red", "green", "blue", "yellow" et "purple" pour voir si la LED RGB r√©pond √† ces instructions.

    .. image:: img/bluetooth_send_rgb.png
    

**Comment √ßa marche ?**

Ce code est une extension d'un projet pr√©c√©dent (:ref:`ar_bluetooth`), ajoutant des configurations de LED RGB et des commandes personnalis√©es telles que "led_off", "red", "green", etc. Ces commandes permettent de contr√¥ler la LED RGB en envoyant des commandes depuis un appareil mobile utilisant LightBlue.

Analysons le code √©tape par √©tape :

* Ajoutez de nouvelles variables globales pour les broches LED RGB, les canaux PWM, la fr√©quence et la r√©solution.

    .. code-block:: arduino

        ...

        // D√©finir les broches de la LED RGB
        const int redPin = 27;
        const int greenPin = 26;
        const int bluePin = 25;

        ...

* Dans la fonction ``setup()``, les canaux PWM sont initialis√©s avec la fr√©quence et la r√©solution pr√©d√©finies. Les broches LED RGB sont ensuite attach√©es √† leurs canaux PWM respectifs.

    .. code-block:: arduino
        
        void setup() {
            ...

            ledcAttach(redPin, freq, resolution);
            ledcAttach(greenPin, freq, resolution);
            ledcAttach(bluePin, freq, resolution);
        }

* Modifiez la m√©thode ``onWrite`` dans la classe ``MyCharacteristicCallbacks``. Cette fonction √©coute les donn√©es provenant de la connexion Bluetooth. En fonction de la cha√Æne re√ßue (comme ``"led_off"``, ``"red"``, ``"green"``, etc.), elle contr√¥le la LED RGB.

    .. code-block:: arduino

        // D√©finir les callbacks de la caract√©ristique BLE
        class MyCharacteristicCallbacks : public BLECharacteristicCallbacks {
            void onWrite(BLECharacteristic *pCharacteristic) {
                std::string value = std::string(pCharacteristic->getValue().c_str());
                if (value == "led_off") {
                    setColor(0, 0, 0); // √©teindre la LED RGB
                    Serial.println("RGB LED turned off");
                } else if (value == "red") {
                    setColor(255, 0, 0); // Rouge
                    Serial.println("red");
                }
                else if (value == "green") {
                    setColor(0, 255, 0); // Vert
                    Serial.println("green");
                }
                else if (value == "blue") {
                    setColor(0, 0, 255); // Bleu
                    Serial.println("blue");
                }
                else if (value == "yellow") {
                    setColor(255, 150, 0); // Jaune
                    Serial.println("yellow");
                }
                else if (value == "purple") {
                    setColor(80, 0, 80); // Violet
                    Serial.println("purple");
                }
            }
        };

* Enfin, une fonction est ajout√©e pour d√©finir la couleur de la LED RGB.

    .. code-block:: arduino

        void setColor(int red, int green, int blue) {
            // Pour les LEDs RGB √† anode commune, utilisez 255 moins la valeur de la couleur
            ledcWrite(redPin, red);
            ledcWrite(greenPin, green);
            ledcWrite(bluePin, blue);
        }


En r√©sum√©, ce script permet un mod√®le d'interaction de contr√¥le √† distance, o√π l'ESP32 fonctionne comme un serveur Bluetooth Low Energy (BLE).


Le client BLE connect√© (comme un smartphone) peut envoyer des commandes sous forme de cha√Ænes pour changer la couleur d'une LED RGB. L'ESP32 renvoie √©galement la cha√Æne re√ßue au client, permettant √† ce dernier de savoir quelle op√©ration a √©t√© effectu√©e.

