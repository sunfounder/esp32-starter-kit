.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_blink:

2.1 Bonjour, LED ! 
============================

Tout comme imprimer "Hello, world!" est la premi√®re √©tape pour apprendre √† programmer, utiliser un programme pour contr√¥ler une LED est l'introduction traditionnelle √† l'apprentissage de la programmation physique.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|


**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

**Sch√©ma**

.. image:: ../../img/circuit/circuit_2.1_led.png

Ce circuit fonctionne sur un principe simple, et la direction du courant est montr√©e dans la figure. La LED s'allumera apr√®s la r√©sistance de limitation de courant de 220 ohms lorsque la broche 26 sort un niveau haut. La LED s'√©teindra lorsque la broche 26 sort un niveau bas.

**C√¢blage**

.. image:: ../../img/wiring/2.1_hello_led_bb.png



**T√©l√©verser le Code**

#. Vous pouvez ouvrir le fichier ``2.1_hello_led.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\2.1_hello_led``. Ou copiez ce code directement dans l'IDE Arduino.
    
    .. raw:: html

        <iframe src=https://create.arduino.cc/editor/sunfounder01/1bff2463-40ad-43c1-8815-9f448bab3735/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    
#. Ensuite, connectez l'ESP32 WROOM 32E √† votre ordinateur en utilisant un c√¢ble Micro USB. 

    * :ref:`unknown_com_port`

    .. image:: ../../img/plugin_esp32.png
        :width: 600
        :align: center

#. S√©lectionnez la carte (ESP32 Dev Module) et le port appropri√©.

    .. image:: img/choose_board.png

#. Maintenant, cliquez sur le bouton **T√©l√©verser** pour t√©l√©verser le code sur la carte ESP32.
    
    .. image:: img/click_upload.png

#. Apr√®s que le code a √©t√© t√©l√©vers√© avec succ√®s, vous verrez la LED clignoter.

**Comment √ßa marche ?**

#. D√©clarez une constante enti√®re nomm√©e ``ledPin`` et attribuez-lui la valeur 26. 

    .. code-block:: arduino

        const int ledPin = 26;  // La broche GPIO pour la LED

#. Maintenant, initialisez la broche dans la fonction ``setup()``, o√π vous devez initialiser la broche en mode ``OUTPUT``.

    .. code-block:: arduino

        void setup() {
            pinMode(ledPin, OUTPUT);
        }

    * ``void pinMode(uint8_t pin, uint8_t mode);``: Cette fonction est utilis√©e pour d√©finir le mode de fonctionnement GPIO pour une broche sp√©cifique.

        * ``pin`` d√©finit le num√©ro de la broche GPIO.
        * ``mode`` d√©finit le mode de fonctionnement.

        Les modes suivants sont pris en charge pour l'entr√©e et la sortie de base :

        * ``INPUT`` d√©finit le GPIO comme entr√©e sans pullup ni pulldown (haute imp√©dance).
        * ``OUTPUT`` d√©finit le GPIO comme mode sortie/lecture.
        * ``INPUT_PULLDOWN`` d√©finit le GPIO comme entr√©e avec le pulldown interne.
        * ``INPUT_PULLUP`` d√©finit le GPIO comme entr√©e avec le pullup interne.

#. La fonction ``loop()`` contient la logique principale du programme et s'ex√©cute en continu. Elle alterne entre le r√©glage de la broche haut et bas, avec des intervalles d'une seconde entre les changements.

    .. code-block:: arduino

        void loop() {
            digitalWrite(ledPin, HIGH);   // allume la LED (HIGH est le niveau de tension)
            delay(1000);                       // attend une seconde
            digitalWrite(ledPin, LOW);    // √©teint la LED en mettant la tension √† LOW
            delay(1000);                       // attend une seconde
        }

    * ``void digitalWrite(uint8_t pin, uint8_t val);``: Cette fonction d√©finit l'√©tat du GPIO s√©lectionn√© √† ``HIGH`` ou ``LOW``. Cette fonction est uniquement utilis√©e si le ``pinMode`` a √©t√© configur√© en ``OUTPUT``.
    
        * ``pin`` d√©finit le num√©ro de la broche GPIO.
        * ``val`` d√©finit l'√©tat de sortie num√©rique √† ``HIGH`` ou ``LOW``.
