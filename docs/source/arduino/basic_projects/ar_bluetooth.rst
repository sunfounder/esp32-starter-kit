.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Explorez plus en profondeur Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux aper√ßus.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et giveaways** : Participez √† des giveaways et √† des promotions de f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_bluetooth:

7.1 Bluetooth
===================

Ce projet fournit un guide pour d√©velopper une application simple de communication s√©rie Bluetooth Low Energy (BLE) 
en utilisant le microcontr√¥leur ESP32. L'ESP32 est un microcontr√¥leur puissant qui int√®gre une connectivit√© Wi-Fi et Bluetooth, 
ce qui en fait un candidat id√©al pour d√©velopper des applications sans fil. Le BLE est 
un protocole de communication sans fil √† faible consommation con√ßu pour les communications √† courte port√©e. 
Ce document couvrira les √©tapes de configuration de l'ESP32 pour agir en tant que serveur BLE et communiquer avec un client BLE via une connexion s√©rie.


**√Ä propos de la fonction Bluetooth**

L'ESP32 WROOM 32E est un module qui int√®gre la connectivit√© Wi-Fi et Bluetooth dans une seule puce. 
Il prend en charge les protocoles Bluetooth Low Energy (BLE) et Bluetooth classique.

Le module peut √™tre utilis√© comme client ou serveur Bluetooth. En tant que client Bluetooth, le module peut se connecter √† 
d'autres appareils Bluetooth et √©changer des donn√©es avec eux. En tant que serveur Bluetooth, le module peut fournir 
des services √† d'autres appareils Bluetooth.

L'ESP32 WROOM 32E prend en charge divers profils Bluetooth, y compris le profil d'acc√®s g√©n√©rique (GAP), le profil d'attribut g√©n√©rique (GATT), 
et le profil de port s√©rie (SPP). Le profil SPP permet au module d'√©muler un port s√©rie via Bluetooth, 
permettant une communication s√©rie avec d'autres appareils Bluetooth.

Pour utiliser la fonction Bluetooth de l'ESP32 WROOM 32E, vous devez le programmer en utilisant un kit de d√©veloppement logiciel appropri√© (SDK) ou en utilisant l'IDE Arduino avec la biblioth√®que ESP32 BLE. 
La biblioth√®que ESP32 BLE fournit une interface de haut niveau pour travailler avec le BLE. Elle comprend des exemples qui d√©montrent 
comment utiliser le module en tant que client et serveur BLE.

Dans l'ensemble, la fonction Bluetooth de l'ESP32 WROOM 32E offre un moyen pratique et √† faible consommation pour permettre la communication sans fil dans vos projets.

**√âtapes de fonctionnement**

Voici les instructions √©tape par √©tape pour configurer la communication Bluetooth entre votre ESP32 et un appareil mobile utilisant l'application LightBlue :

#. T√©l√©chargez l'application LightBlue depuis l'**App Store** (pour iOS) ou **Google Play** (pour Android).

    .. image:: img/bluetooth_lightblue.png

#. Ouvrez le fichier ``7.1_bluetooth.ino`` situ√© dans le r√©pertoire ``esp32-starter-kit-main\c\codes\7.1_bluetooth``, ou copiez le code dans l'IDE Arduino.

    .. raw:: html
        
        <iframe src=https://create.arduino.cc/editor/sunfounder01/388f6d9d-65bf-4eaa-b29a-7cebf0b92f74/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

#. Pour √©viter les conflits d'UUID, il est recommand√© de g√©n√©rer trois nouveaux UUID al√©atoires en utilisant le |link_uuid|, et de les remplir dans les lignes de code suivantes.

    .. code-block:: arduino

        #define SERVICE_UUID           "your_service_uuid_here" 
        #define CHARACTERISTIC_UUID_RX "your_rx_characteristic_uuid_here"
        #define CHARACTERISTIC_UUID_TX "your_tx_characteristic_uuid_here"

    .. image:: img/uuid_generate.png


#. S√©lectionnez la carte et le port corrects, puis cliquez sur le bouton **Upload**.

    .. image:: img/bluetooth_upload.png

#. Apr√®s avoir t√©l√©charg√© le code avec succ√®s, activez le **Bluetooth** sur votre appareil mobile et ouvrez l'application **LightBlue**.

    .. image:: img/bluetooth_open.png

#. Sur la page **Scan**, trouvez **ESP32-Bluetooth** et cliquez sur **CONNECT**. Si vous ne le voyez pas, essayez de rafra√Æchir la page plusieurs fois. Lorsque **"Connected to device!"** appara√Æt, la connexion Bluetooth est r√©ussie. Faites d√©filer vers le bas pour voir les trois UUID d√©finis dans le code.

    .. image:: img/bluetooth_connect.png
        :width: 800

#. Cliquez sur l'UUID **Receive**. S√©lectionnez le format de donn√©es appropri√© dans la bo√Æte √† droite de **Data Format**, comme "HEX" pour hexad√©cimal, "UTF-8 String" pour caract√®re, ou "Binary" pour binaire, etc. Puis cliquez sur **SUBSCRIBE**.

    .. image:: img/bluetooth_read.png
        :width: 300

#. Retournez √† l'IDE Arduino, ouvrez le Moniteur S√©rie, r√©glez le d√©bit en bauds √† 115200, puis tapez "welcome" et appuyez sur Entr√©e.

    .. image:: img/bluetooth_serial.png

#. Vous devriez maintenant voir le message "welcome" dans l'application LightBlue.

    .. image:: img/bluetooth_welcome.png
        :width: 400

#. Pour envoyer des informations de l'appareil mobile au Moniteur S√©rie, cliquez sur l'UUID Send, r√©glez le format des donn√©es sur "UTF-8 String", et √©crivez un message.

    .. image:: img/bluetooth_send.png


#. Vous devriez voir le message dans le Moniteur S√©rie.

    .. image:: img/bluetooth_receive.png

**Comment √ßa marche ?**

Ce code Arduino est √©crit pour le microcontr√¥leur ESP32 et le configure pour communiquer avec un appareil Bluetooth Low Energy (BLE).

Voici un r√©sum√© du code :

* **Inclure les biblioth√®ques n√©cessaires** : Le code commence par inclure les biblioth√®ques n√©cessaires pour travailler avec le Bluetooth Low Energy (BLE) sur l'ESP32.

    .. code-block:: arduino

        #include "BLEDevice.h"
        #include "BLEServer.h"
        #include "BLEUtils.h"
        #include "BLE2902.h"

* **Variables globales** : Le code d√©finit un ensemble de variables globales, y compris le nom du p√©riph√©rique Bluetooth (``bleName``), des variables pour suivre le texte re√ßu et l'heure du dernier message, les UUID pour le service et les caract√©ristiques, et un objet ``BLECharacteristic`` (``pCharacteristic``).

    .. code-block:: arduino

        // D√©finir le nom du p√©riph√©rique Bluetooth
        const char *bleName = "ESP32_Bluetooth";

        // D√©finir le texte re√ßu et l'heure du dernier message
        String receivedText = "";
        unsigned long lastMessageTime = 0;

        // D√©finir les UUID du service et des caract√©ristiques
        #define SERVICE_UUID           "your_service_uuid_here"
        #define CHARACTERISTIC_UUID_RX "your_rx_characteristic_uuid_here"
        #define CHARACTERISTIC_UUID_TX "your_tx_characteristic_uuid_here"

        // D√©finir la caract√©ristique Bluetooth
        BLECharacteristic *pCharacteristic;

* **Configuration** : Dans la fonction ``setup()``, le port s√©rie est initialis√© avec un d√©bit en bauds de 115200 et la fonction ``setupBLE()`` est appel√©e pour configurer le Bluetooth BLE.

    .. code-block:: arduino
    
        void setup() {
            Serial.begin(115200);  // Initialiser le port s√©rie
            setupBLE();            // Initialiser le Bluetooth BLE
        }

* **Boucle principale** : Dans la fonction ``loop()``, si une cha√Æne a √©t√© re√ßue via BLE (c'est-√†-dire que ``receivedText`` n'est pas vide) et qu'au moins 1 seconde s'est √©coul√©e depuis le dernier message, le code imprime la cha√Æne re√ßue sur le moniteur s√©rie, d√©finit la valeur de la caract√©ristique sur la cha√Æne re√ßue, envoie une notification, puis efface la cha√Æne re√ßue. Si des donn√©es sont disponibles sur le port s√©rie, il lit la cha√Æne jusqu'√† ce qu'un caract√®re de nouvelle ligne soit rencontr√©, d√©finit la valeur de la caract√©ristique sur cette cha√Æne et envoie une notification.

    .. code-block:: arduino

        void loop() {
            // Lorsque le texte re√ßu n'est pas vide et que le temps √©coul√© depuis le dernier message est sup√©rieur √† 1 seconde
            // Envoyer une notification et imprimer le texte re√ßu
            if (receivedText.length() > 0 && millis() - lastMessageTime > 1000) {
                Serial.print("Received message: ");
                Serial.println(receivedText);
                pCharacteristic->setValue(receivedText.c_str());
                pCharacteristic->notify();
                receivedText = "";
            }

            // Lire les donn√©es du port s√©rie et les envoyer √† la caract√©ristique BLE
            if (Serial.available() > 0) {
                String str = Serial.readStringUntil('\n');
                const char *newValue = str.c_str();
                pCharacteristic->setValue(newValue);
                pCharacteristic->notify();
            }
        }

* **Callbacks** : Deux classes de rappel (``MyServerCallbacks`` et ``MyCharacteristicCallbacks``) sont d√©finies pour g√©rer les √©v√©nements li√©s √† la communication Bluetooth. ``MyServerCallbacks`` est utilis√©e pour g√©rer les √©v√©nements li√©s √† l'√©tat de connexion (connect√© ou d√©connect√©) du serveur BLE. ``MyCharacteristicCallbacks`` est utilis√©e pour g√©rer les √©v√©nements d'√©criture sur la caract√©ristique BLE, c'est-√†-dire lorsque qu'un appareil connect√© envoie une cha√Æne √† l'ESP32 via BLE, elle est captur√©e et stock√©e dans ``receivedText``, et l'heure actuelle est enregistr√©e dans ``lastMessageTime``.

    .. code-block:: arduino

        // D√©finir les callbacks du serveur BLE
        class MyServerCallbacks : public BLEServerCallbacks {
            // Imprimer le message de connexion lorsqu'un client est connect√©
            void onConnect(BLEServer *pServer) {
                Serial.println("Connected");
            }
            // Imprimer le message de d√©connexion lorsqu'un client est d√©connect√©
            void onDisconnect(BLEServer *pServer) {
                Serial.println("Disconnected");
            }
        };

        // D√©finir les callbacks de la caract√©ristique BLE
        class MyCharacteristicCallbacks : public BLECharacteristicCallbacks {
            void onWrite(BLECharacteristic *pCharacteristic) {
                // Lors de la r√©ception de donn√©es, obtenir les donn√©es et les enregistrer dans receivedText, et enregistrer l'heure
                std::string value = std::string(pCharacteristic->getValue().c_str());
                receivedText = String(value.c_str());
                lastMessageTime = millis();
                Serial.print("Received: ");
                Serial.println(receivedText);
            }
        };

* **Configuration du BLE** : Dans la fonction ``setupBLE()``, le p√©riph√©rique et le serveur BLE sont initialis√©s, les callbacks du serveur sont d√©finis, le service BLE est cr√©√© en utilisant l'UUID d√©fini, les caract√©ristiques pour l'envoi de notifications et la r√©ception de donn√©es sont cr√©√©es et ajout√©es au service, et les callbacks des caract√©ristiques sont d√©finis. Enfin, le service est d√©marr√© et le serveur commence √† faire de la publicit√©.

    .. code-block:: arduino

        // Initialiser le Bluetooth BLE
        void setupBLE() {
            BLEDevice::init(bleName);                        // Initialiser le p√©riph√©rique BLE
            BLEServer *pServer = BLEDevice::createServer();  // Cr√©er le serveur BLE
            // Imprimer le message d'erreur si la cr√©ation du serveur BLE √©choue
            if (pServer == nullptr) {
                Serial.println("Error creating BLE server");
                return;
            }
            pServer->setCallbacks(new MyServerCallbacks());  // D√©finir les callbacks du serveur BLE

            // Cr√©er le service BLE
            BLEService *pService = pServer->createService(SERVICE_UUID);
            // Imprimer le message d'erreur si la cr√©ation du service BLE √©choue
            if (pService == nullptr) {
                Serial.println("Error creating BLE service");
                return;
            }
            // Cr√©er la caract√©ristique BLE pour l'envoi de notifications
            pCharacteristic = pService->createCharacteristic(CHARACTERISTIC_UUID_TX, BLECharacteristic::PROPERTY_NOTIFY);
            pCharacteristic->addDescriptor(new BLE2902());  // Ajouter le descripteur
            // Cr√©er la caract√©ristique BLE pour la r√©ception de donn√©es
            BLECharacteristic *pCharacteristicRX = pService->createCharacteristic(CHARACTERISTIC_UUID_RX, BLECharacteristic::PROPERTY_WRITE);
            pCharacteristicRX->setCallbacks(new MyCharacteristicCallbacks());  // D√©finir les callbacks de la caract√©ristique BLE
            pService->start();                                                 // D√©marrer le service BLE
            pServer->getAdvertising()->start();                                // Commencer √† faire de la publicit√©
            Serial.println("Waiting for a client connection...");              // Attendre une connexion client
        }


Notez que ce code permet une communication bidirectionnelle - il peut envoyer et recevoir des donn√©es via BLE. 
Cependant, pour interagir avec des mat√©riels sp√©cifiques, comme allumer/√©teindre une LED, un code suppl√©mentaire doit √™tre ajout√© pour traiter 
les cha√Ænes re√ßues et agir en cons√©quence.
