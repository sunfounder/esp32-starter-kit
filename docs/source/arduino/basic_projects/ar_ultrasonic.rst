.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_ultrasonic:

5.12 Mesure de distance
======================================
Le module ultrasonique est utilis√© pour la mesure de distance ou la d√©tection d'objets. Dans ce projet, nous allons programmer le module pour obtenir les distances des obstacles. En envoyant des impulsions ultrasoniques et en mesurant le temps qu'il faut pour qu'elles rebondissent, nous pouvons calculer les distances. Cela nous permet de mettre en ≈ìuvre des actions bas√©es sur la distance ou des comportements d'√©vitement d'obstacles.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ultrasonic`
        - |link_ultrasonic_buy|

**Pins disponibles**

* **Pins disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 20

        *   - Pour l'entr√©e
            - IO13, IO14, IO27, IO26, IO25, IO33, IO32, I35, I34, I39, I36, IO4, IO18, IO19, IO21, IO22, IO23
        *   - Pour la sortie
            - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.12_ultrasonic.png

L'ESP32 envoie un ensemble de signaux carr√©s √† la broche Trig du capteur ultrasonique toutes les 10 secondes. Cela incite le capteur ultrasonique √† √©mettre un signal ultrasonore de 40kHz. S'il y a un obstacle devant, les ondes ultrasonores seront r√©fl√©chies.

En enregistrant le temps √©coul√© entre l'envoi et la r√©ception du signal, en le divisant par 2 et en le multipliant par la vitesse du son, vous pouvez d√©terminer la distance jusqu'√† l'obstacle.

**C√¢blage**

.. image:: ../../img/wiring/5.12_ultrasonic_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``5.12_ultrasonic.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\5.12_ultrasonic``.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **T√©l√©verser**.
    * :ref:`unknown_com_port`
    
.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/28ded128-62a8-4b2b-b21a-450f03323cd8/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>


N'oubliez pas de d√©finir le taux de communication s√©rie √† 115200 baud.

Apr√®s le t√©l√©versement r√©ussi du code, le moniteur s√©rie affichera la distance entre le capteur ultrasonique et l'obstacle devant.

**Comment √ßa marche ?**

Concernant l'application du capteur ultrasonique, nous pouvons v√©rifier directement la sous-fonction.

.. code-block:: arduino

    float readSensorData(){// ...}

* La broche ``trigPin`` du module ultrasonique transmet un signal carr√© de 10¬µs toutes les 2¬µs.

    .. code-block:: arduino

        // D√©clencher un signal bas avant d'envoyer un signal haut
        digitalWrite(trigPin, LOW); 
        delayMicroseconds(2);
        // Envoyer un signal haut de 10 microsecondes √† la broche trigPin
        digitalWrite(trigPin, HIGH); 
        delayMicroseconds(10);
        // Retourner au signal bas
        digitalWrite(trigPin, LOW);

* La broche ``echoPin`` re√ßoit un signal de niveau haut s'il y a un obstacle dans la port√©e et utilise la fonction ``pulseIn()`` pour enregistrer le temps √©coul√© entre l'envoi et la r√©ception.

    .. code-block:: arduino

        unsigned long microsecond = pulseIn(echoPin, HIGH);

* La vitesse du son est de 340 m√®tres par seconde, ce qui √©quivaut √† 29 microsecondes par centim√®tre. En mesurant le temps qu'il faut pour qu'une onde carr√©e atteigne un obstacle et revienne, nous pouvons calculer la distance parcourue en divisant le temps total par 2. Cela nous donne la distance de l'obstacle √† la source de l'onde sonore.

    .. code-block:: arduino

        float distance = microsecond / 29.00 / 2;  

Notez que le capteur ultrasonique mettra en pause le programme lorsqu'il est en fonctionnement, ce qui peut causer des retards lors de l'√©criture de projets complexes.

