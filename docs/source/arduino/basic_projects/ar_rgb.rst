.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et promotions de vacances.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_rgb:

2.3 Lumi√®re Color√©e
==============================================

Dans ce projet, nous allons plonger dans le monde fascinant du m√©lange de couleurs additives en utilisant une LED RGB.

La LED RGB combine trois couleurs primaires, √† savoir le rouge, le vert et le bleu, dans un seul bo√Ætier. Ces trois LED partagent une broche cathode commune, tandis que chaque broche anode contr√¥le l'intensit√© de la couleur correspondante.

En variant l'intensit√© du signal √©lectrique appliqu√© √† chaque anode, nous pouvons cr√©er une large gamme de couleurs. Par exemple, en m√©langeant une lumi√®re rouge et verte √† haute intensit√©, nous obtiendrons une lumi√®re jaune, tandis qu'en combinant la lumi√®re bleue et verte, nous produirons du cyan.

√Ä travers ce projet, nous allons explorer les principes du m√©lange de couleurs additives et lib√©rer notre cr√©ativit√© en manipulant la LED RGB pour afficher des couleurs captivantes et vibrantes.

**Composants requis**

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_rgb`
        - |link_rgb_led_buy|


**Pins disponibles**

Voici une liste des pins disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Pins disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Sch√©ma**

.. image:: ../../img/circuit/circuit_2.3_rgb.png

Les pins PWM pin27, pin26 et pin25 contr√¥lent respectivement les broches Rouge, Vert et Bleu de la LED RGB et connectent la broche cathode commune √† la masse. Cela permet √† la LED RGB d'afficher une couleur sp√©cifique en superposant la lumi√®re sur ces broches avec diff√©rentes valeurs PWM.


**C√¢blage**

.. image:: ../../components/img/rgb_pin.jpg
    :width: 200
    :align: center

La LED RGB a 4 broches : la broche la plus longue est la broche cathode commune, qui est g√©n√©ralement connect√©e √† la masse ; la broche gauche √† c√¥t√© de la plus longue est rouge ; et les deux broches √† droite sont vert et bleu.

.. image:: ../../img/wiring/2.3_color_light_bb.png


**Code**

Ici, nous pouvons choisir notre couleur pr√©f√©r√©e dans un logiciel de dessin (tel que paint) et l'afficher avec la LED RGB.

.. note::

    * Vous pouvez ouvrir le fichier ``2.3_rgb_led.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\2.3_rgb_led``. 
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **T√©l√©verser**.
    * :ref:`unknown_com_port`

.. raw:: html
    
    <iframe src=https://create.arduino.cc/editor/sunfounder01/49a579a1-ae9b-4e23-b6cd-c20e5695191b/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
    

.. image:: img/edit_colors.png

√âcrivez la valeur RGB dans ``color_set()``, vous pourrez voir la LED RGB afficher les couleurs que vous souhaitez.


**Comment √ßa marche ?**

#. D√©finir les broches GPIO, les canaux PWM et la fr√©quence (en Hz) et la r√©solution (en bits).

    .. code-block:: arduino

        // D√©finir les broches de la LED RGB
        const int redPin = 27;
        const int greenPin = 26;
        const int bluePin = 25;

        // D√©finir la fr√©quence PWM et la r√©solution
        const int freq = 5000;
        const int resolution = 8;


#. La fonction ``setup()`` initialise les canaux PWM avec la fr√©quence et la r√©solution sp√©cifi√©es, puis attache les broches LED √† leurs canaux PWM correspondants.

    .. code-block:: arduino

        void setup() {
          // Configurer les broches PWM
          ledcAttach(redPin, freq, resolution);
          ledcAttach(greenPin, freq, resolution);
          ledcAttach(bluePin, freq, resolution);
        }
    
    Ici, nous utilisons le |link_ledc| (contr√¥le LED) p√©riph√©rique qui est principalement con√ßu pour contr√¥ler l'intensit√© des LED, bien qu'il puisse √©galement √™tre utilis√© pour g√©n√©rer des signaux PWM √† d'autres fins.

    * ``bool ledcAttach(uint8_t pin, uint32_t freq, uint8_t resolution);``: Cette fonction est utilis√©e pour configurer la broche LEDC avec la fr√©quence et la r√©solution donn√©es. Le canal LEDC sera s√©lectionn√© automatiquement.

        * ``pin`` s√©lectionner la broche GPIO.
        * ``freq`` s√©lectionner la fr√©quence du pwm.
        * ``resolution_bits`` s√©lectionner la r√©solution pour le canal ledc. La plage est de 1 √† 14 bits (1 √† 20 bits pour ESP32).


#. La fonction ``loop()`` parcourt diverses couleurs (rouge, vert, bleu, jaune, violet et cyan) avec des intervalles d'une seconde entre chaque changement de couleur.

    .. code-block:: arduino

        void loop() {
            setColor(255, 0, 0); // Rouge
            delay(1000);
            setColor(0, 255, 0); // Vert
            delay(1000);
            setColor(0, 0, 255); // Bleu
            delay(1000);
            setColor(255, 255, 0); // Jaune
            delay(1000);
            setColor(80, 0, 80); // Violet
            delay(1000);
            setColor(0, 255, 255); // Cyan
            delay(1000);
        }


#. La fonction ``setColor()`` d√©finit la couleur d√©sir√©e en √©crivant les valeurs de cycle de service appropri√©es √† chaque canal PWM. La fonction prend trois arguments entiers pour les valeurs des couleurs rouge, verte et bleue.

    .. code-block:: arduino

        void setColor(int red, int green, int blue) {
          ledcWrite(redPin, red);
          ledcWrite(greenPin, green);
          ledcWrite(bluePin, blue);
        }
    
    * ``bool ledcWrite(uint8_t pin, uint32_t duty);``: Cette fonction est utilis√©e pour d√©finir le cycle de service pour la broche LEDC.
        
        * ``pin`` s√©lectionner la broche LEDC.
        * ``duty`` s√©lectionner le cycle de service √† d√©finir pour le canal s√©lectionn√©.
