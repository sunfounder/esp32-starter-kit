.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 de SunFounder sur Facebook ! Plongez dans l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des concours et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_mp3_player_sd:

7.5 Lecteur MP3 avec carte SD
==============================================

Bienvenue dans le monde passionnant de la musique avec votre ESP32 ! Ce projet vous permet de transformer votre ESP32 en un lecteur de musique personnalis√©, en plus de ses capacit√©s de microcontr√¥leur. Imaginez entrer dans votre pi√®ce et entendre votre morceau pr√©f√©r√© jou√© directement depuis ce petit appareil. C'est la puissance que nous vous apportons aujourd'hui.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_audio_speaker`
        - \-

**√âtapes de fonctionnement**

#. Ins√©rez votre carte SD dans l'ordinateur √† l'aide d'un lecteur de cartes, puis formatez-la. Vous pouvez vous r√©f√©rer au tutoriel √† :ref:`format_sd_card`.

#. Copiez votre fichier MP3 pr√©f√©r√© sur votre carte SD.

    .. image:: img/mp3_music.png

#. Ins√©rez la carte SD dans le slot SD de la carte d'extension.

    .. image:: ../../img/insert_sd.png

#. Construisez le circuit.

    Comme il s'agit d'un amplificateur mono, vous pouvez connecter IO25 √† la broche L ou R du module amplificateur audio.

    La r√©sistance de 10K est utilis√©e pour r√©duire le bruit haute fr√©quence et diminuer le volume audio. Elle forme un filtre passe-bas RC avec la capacit√© parasite du DAC et de l'amplificateur audio. Ce filtre diminue l'amplitude des signaux haute fr√©quence, r√©duisant ainsi efficacement le bruit haute fr√©quence. Ainsi, ajouter la r√©sistance de 10K rend la musique plus douce et √©limine les bruits haute fr√©quence ind√©sirables.

    Si la musique de votre carte SD est d√©j√† douce, vous pouvez retirer ou remplacer la r√©sistance par une valeur plus petite.

    .. image:: ../../img/wiring/7.3_bluetooth_audio_player_bb.png

#. Connectez l'ESP32-WROOM-32E √† l'ordinateur √† l'aide du c√¢ble USB.

    .. image:: ../../img/plugin_esp32.png

#. Modifiez le code.

    Modifiez la ligne de code ``file = new AudioFileSourceSD_MMC("/To Alice.mp3")``; pour refl√©ter le nom et le chemin de votre fichier.

    .. note::

        * Ouvrez le fichier ``7.5_mp3_player_sd.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\7.5_mp3_player_sd``. Ou copiez ce code dans l'**Arduino IDE**.
        * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **Upload**.
        * :ref:`unknown_com_port`
        * La biblioth√®que ``ESP8266Audio`` est utilis√©e ici, r√©f√©rez-vous √† :ref:`install_lib_man` pour un tutoriel d'installation.
        
    .. warning::

        Si vous utilisez une carte de d√©veloppement ESP32 version 3.0.0 ou sup√©rieure, vous pouvez rencontrer des erreurs lors du processus de compilation.
        Ce probl√®me est g√©n√©ralement d√ª au fait que les versions plus r√©centes de la carte ne prennent plus en charge la biblioth√®que ``ESP8266Audio``.
        Pour ex√©cuter correctement cet exemple, il est recommand√© de r√©trograder la version du firmware de votre carte ESP32 √† 2.0.17. 
        Apr√®s avoir termin√© cet exemple, mettez √† jour vers la derni√®re version.

        .. image:: ../../faq/img/version_2.0.17.png


    .. raw:: html

        <iframe src=https://create.arduino.cc/editor/sunfounder01/13f5c757-9622-4735-aa1a-fdbe6fc46273/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>
        
#. S√©lectionnez le port et la carte appropri√©s dans l'Arduino IDE et t√©l√©chargez le code sur votre ESP32.

#. Apr√®s avoir t√©l√©charg√© le code avec succ√®s, vous entendrez votre musique pr√©f√©r√©e.


**Comment √ßa marche ?**

* Le code utilise plusieurs classes de la biblioth√®que ``ESP8266Audio`` pour lire un fichier MP3 depuis une carte SD via I2S :

    .. code-block:: arduino

        #include "AudioFileSourceSD_MMC.h"
        #include "AudioOutputI2S.h"
        #include "AudioGeneratorMP3.h"
        #include "SD_MMC.h"
        #include "FS.h"

    * ``AudioGeneratorMP3`` est une classe qui d√©code l'audio MP3.
    * ``AudioFileSourceSD_MMC`` est une classe qui lit les donn√©es audio depuis une carte SD.
    * ``AudioOutputI2S`` est une classe qui envoie les donn√©es audio √† l'interface I2S.

* Dans la fonction ``setup()``, nous initialisons la carte SD, ouvrons le fichier MP3 depuis la carte SD, configurons la sortie I2S sur le DAC interne de l'ESP32, r√©glons la sortie en mono et d√©marrons le g√©n√©rateur MP3.

    .. code-block:: arduino

        void setup() {
            // Commencez la communication s√©rie.
            Serial.begin(115200);
            delay(1000);

            // Initialisez la carte SD. En cas d'√©chec, imprimez un message d'erreur.
            if (!SD_MMC.begin()) {
                Serial.println("√âchec du montage de la carte SD !");
            }

            // Ouvrez le fichier MP3 depuis la carte SD. Remplacez "/To Alice.mp3" par le nom de votre fichier MP3.
            file = new AudioFileSourceSD_MMC("/To Alice.mp3");
            
            // Configurez la sortie I2S sur le DAC interne de l'ESP32.
            out = new AudioOutputI2S(0, 1);
            
            // R√©glez la sortie en mono.
            out->SetOutputModeMono(true);

            // Initialisez le g√©n√©rateur MP3 avec le fichier et la sortie.
            mp3 = new AudioGeneratorMP3();
            mp3->begin(file, out);
        }


* Dans la fonction ``loop()``, nous v√©rifions si le g√©n√©rateur MP3 est en cours d'ex√©cution. Si c'est le cas, nous continuons √† le boucler ; sinon, nous l'arr√™tons et imprimons "MP3 termin√©" dans le moniteur s√©rie.

    .. code-block:: arduino

        void loop() {
            // Si le MP3 est en cours d'ex√©cution, bouclez-le. Sinon, arr√™tez-le.
            if (mp3->isRunning()) {
                if (!mp3->loop()) mp3->stop();
            } 
            // Si le MP3 n'est pas en cours d'ex√©cution, imprimez un message et attendez 1 seconde.
            else {
                Serial.println("MP3 done");
                delay(1000);
            }
        }


