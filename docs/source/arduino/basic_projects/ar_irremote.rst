.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des conseils et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_receiver:

5.14 R√©cepteur IR
=========================
Un r√©cepteur infrarouge est un composant qui re√ßoit des signaux infrarouges et peut d√©tecter et sortir ind√©pendamment des signaux compatibles avec le niveau TTL. Il est de taille similaire √† un transistor en plastique standard et est couramment utilis√© dans diverses applications telles que les t√©l√©commandes infrarouges et la transmission infrarouge.

Dans ce projet, nous allons utiliser un r√©cepteur infrarouge pour d√©tecter les signaux d'une t√©l√©commande. Lorsqu'un bouton de la t√©l√©commande est press√© et que le r√©cepteur infrarouge re√ßoit le signal correspondant, il peut d√©coder le signal pour d√©terminer quel bouton a √©t√© press√©. En d√©codant le signal re√ßu, nous pouvons identifier la touche ou la commande sp√©cifique associ√©e.

Le r√©cepteur infrarouge nous permet d'incorporer des fonctionnalit√©s de t√©l√©commande dans notre projet, nous permettant ainsi d'interagir avec et de contr√¥ler des dispositifs √† l'aide de signaux infrarouges.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants.

Il est tr√®s pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_receiver`
        - |link_receiver_buy|


**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20

    *   - Broches disponibles
        - IO13, IO12, IO14, IO27, IO26, IO25, IO15, IO0, IO5, IO18, IO19, IO21, IO22, IO23

**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.14_receiver.png

Lorsque vous appuyez sur un bouton de la t√©l√©commande, le r√©cepteur infrarouge d√©tecte le signal, et vous pouvez utiliser une biblioth√®que infrarouge pour le d√©coder. Ce processus de d√©codage vous permet d'obtenir la valeur de la touche associ√©e √† l'appui sur le bouton.

**C√¢blage**

.. image:: ../../img/wiring/5.14_ir_receiver_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``5.14_ir_receiver.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\5.14_ir_receiver``.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **Upload**.
    * :ref:`unknown_com_port`
    * La biblioth√®que ``IRremoteESP8266`` est utilis√©e ici, vous pouvez l'installer √† partir du **Gestionnaire de Biblioth√®ques**.

        .. image:: img/receiver_lib.png


.. warning::

    Si vous utilisez une carte de d√©veloppement ESP32 version 3.0.0 ou sup√©rieure, vous pouvez rencontrer des erreurs lors du processus de compilation.
    Ce probl√®me est g√©n√©ralement d√ª au fait que les versions plus r√©centes de la carte ne prennent plus en charge la biblioth√®que ``IRremoteESP8266``.
    Pour ex√©cuter correctement cet exemple, il est recommand√© de r√©trograder la version du firmware de votre carte ESP32 √† 2.0.17. 
    Apr√®s avoir termin√© cet exemple, mettez √† jour √† la derni√®re version.

    .. image:: ../../faq/img/version_2.0.17.png


.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/463c8894-00bd-4035-a81c-cad99a7f3731/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

N'oubliez pas de r√©gler le taux de communication s√©rie √† 115200 bauds.

Apr√®s le t√©l√©chargement r√©ussi du code, appuyez sur les diff√©rentes touches de la t√©l√©commande et vous verrez les noms de ces touches appara√Ætre dans le moniteur s√©rie.

.. note::
    * La biblioth√®que ``IRremoteESP8266`` comprend des impl√©mentations pour de nombreux protocoles et appareils infrarouges diff√©rents, donc la taille de la biblioth√®que est relativement grande. Lorsque le compilateur doit traiter plus de code, le temps de compilation augmentera √©galement en cons√©quence. Veuillez √™tre patient et attendre la fin de la compilation.
    * La nouvelle t√©l√©commande comporte une languette en plastique √† l'extr√©mit√© pour isoler la batterie √† l'int√©rieur. Pour alimenter la t√©l√©commande lors de son utilisation, retirez simplement cette pi√®ce en plastique.


**Comment √ßa marche ?**

#. Ce code utilise la biblioth√®que ``IRremoteESP8266`` pour recevoir des signaux infrarouges (IR) √† l'aide d'un module r√©cepteur IR.

    .. code-block:: arduino

        #include <IRremoteESP8266.h>
        #include <IRrecv.h>

        // D√©finir la broche du r√©cepteur IR
        const uint16_t IR_RECEIVE_PIN = 14;

        // Cr√©er un objet IRrecv
        IRrecv irrecv(IR_RECEIVE_PIN);

        // Cr√©er un objet decode_results
        decode_results results;
    
#. Dans la fonction ``setup()``, la communication s√©rie est d√©marr√©e √† un d√©bit de 115200 bauds, et le r√©cepteur IR est activ√© √† l'aide de ``irrecv.enableIRIn()``.

    .. code-block:: arduino

        void setup() {
            // D√©marrer la communication s√©rie
            Serial.begin(115200);
            
            // D√©marrer le r√©cepteur IR
            irrecv.enableIRIn();
        }

#. Lorsque vous appuyez sur une touche de la t√©l√©commande, le moniteur s√©rie affichera le nom de la touche si elle est re√ßue par le r√©cepteur IR.

    .. code-block:: arduino

        void loop() {
            // Si un signal IR est re√ßu
            if (irrecv.decode(&results)) {
                String key = decodeKeyValue(results.value);
                if (key != "ERROR") {
                    // Afficher la valeur du signal dans le moniteur s√©rie
                    Serial.println(key);
                }
                irrecv.resume(); // Continuer √† recevoir le prochain signal
            }
        }

    * Tout d'abord, v√©rifiez si un signal IR est re√ßu √† l'aide de la fonction ``irrecv.decode()``.
    * Si un signal est re√ßu, appelez ensuite la fonction ``decodeKeyValue()`` pour d√©coder la valeur du signal.
    * Si le signal est d√©cod√© avec succ√®s, la valeur d√©cod√©e est affich√©e dans le moniteur s√©rie √† l'aide de ``Serial.println()``.
    * Enfin, ``irrecv.resume()`` est appel√© pour continuer √† recevoir le prochain signal.

#. La fonction ``decodeKeyValue()`` prend la valeur d√©cod√©e du signal IR en argument et renvoie une cha√Æne repr√©sentant la touche press√©e sur la t√©l√©commande. 

    .. code-block:: arduino

        String decodeKeyValue(long result)
        {
            switch(result){
                case 0xFF6897:
                return "0";
                case 0xFF30CF:
                return "1"; 
                case 0xFF18E7:
                return "2"; 
                case 0xFF7A85:
                ...

    * La fonction utilise une instruction switch pour faire correspondre la valeur d√©cod√©e √† la touche correspondante et renvoie la repr√©sentation en cha√Æne de la touche.
    * Si la valeur d√©cod√©e ne correspond √† aucune touche connue, la fonction renvoie la cha√Æne "ERROR".
