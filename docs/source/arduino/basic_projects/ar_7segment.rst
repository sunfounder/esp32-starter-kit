.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et des promotions de f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _ar_7_segment:

2.5 Afficheur 7 Segments
===================================

Bienvenue dans ce projet fascinant ! Dans ce projet, nous explorerons le monde enchanteur de l'affichage des chiffres de 0 √† 9 sur un afficheur √† sept segments.

Imaginez d√©clencher ce projet et voir un petit √©cran compact briller de mille feux avec chaque chiffre de 0 √† 9. C'est comme avoir un √©cran miniature qui affiche les chiffres de mani√®re captivante. En contr√¥lant les broches de signal, vous pouvez changer facilement le chiffre affich√© et cr√©er divers effets engageants.

Gr√¢ce √† des connexions de circuit simples et √† la programmation, vous apprendrez √† interagir avec l'afficheur √† sept segments et √† donner vie aux chiffres souhait√©s. Que ce soit un compteur, une horloge ou toute autre application intrigante, l'afficheur √† sept segments sera votre compagnon fiable, ajoutant une touche de brillance √† vos projets.

**Composants n√©cessaires**

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - √âL√âMENTS DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment aux liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_7_segment`
        - |link_7segment_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Sch√©ma**

.. image:: ../../img/circuit/circuit_2.5_74hc595_7_segment.png

Le principe de c√¢blage est essentiellement le m√™me que celui de :ref:`ar_74hc595`, la seule diff√©rence est que Q0-Q7 sont connect√©s aux broches a ~ g de l'afficheur 7 segments.

.. list-table:: C√¢blage
    :widths: 15 25
    :header-rows: 1

    *   - 74HC595
        - Afficheur √† segments LED
    *   - Q0
        - a
    *   - Q1
        - b
    *   - Q2
        - c
    *   - Q3
        - d
    *   - Q4
        - e
    *   - Q5
        - f
    *   - Q6
        - g
    *   - Q7
        - dp

**C√¢blage**

.. image:: ../../img/wiring/2.5_segment_bb.png
    :width: 800

**Code**

.. note::

    * Ouvrez le fichier ``2.5_7segment.ino`` sous le chemin ``esp32-starter-kit-main\c\codes\2.5_7segment``.
    * Apr√®s avoir s√©lectionn√© la carte (ESP32 Dev Module) et le port appropri√©, cliquez sur le bouton **T√©l√©verser**.
    * :ref:`unknown_com_port`
    
.. raw:: html

    <iframe src=https://create.arduino.cc/editor/sunfounder01/937f5e3f-2d9e-4c75-8331-ace3c0876182/preview?embed style="height:510px;width:100%;margin:10px 0" frameborder=0></iframe>

Apr√®s avoir t√©l√©vers√© le code avec succ√®s, vous verrez l'afficheur √† segments LED afficher 0~9 en s√©quence.

**Comment √ßa marche ?**

Dans ce projet, nous utilisons la fonction ``shiftOut()`` pour √©crire le nombre binaire dans le registre √† d√©calage. 

Supposons que l'afficheur 7 segments affiche le chiffre "2". Ce mod√®le binaire correspond aux segments **f**, **c** et **dp** √©tant √©teints (bas), tandis que les segments **a**, **b**, **d**, **e** et **g** sont allum√©s (haut). Cela correspond √† "01011011" en binaire et "0x5b" en notation hexad√©cimale. 

Par cons√©quent, vous devez appeler ``shiftOut(DS, SHcp, MSBFIRST, 0x5b)
```` pour afficher le chiffre "2" sur l'afficheur 7 segments.

.. image:: img/7_segment2.png

* `Hexadecimal <https://en.wikipedia.org/wiki/Hexadecimal>`_

* `BinaryHex Converter <https://www.binaryhexconverter.com/binary-to-hex-converter>`_

Le tableau suivant montre les mod√®les hexad√©cimaux √† √©crire dans le registre √† d√©calage pour afficher les chiffres de 0 √† 9 sur un afficheur 7 segments.


.. list-table:: Glyph Code
    :widths: 20 20 20
    :header-rows: 1

    *   - Chiffres	
        - Code binaire
        - Code hexad√©cimal  
    *   - 0	
        - 00111111	
        - 0x3f
    *   - 1	
        - 00000110	
        - 0x06
    *   - 2	
        - 01011011	
        - 0x5b
    *   - 3	
        - 01001111	
        - 0x4f
    *   - 4	
        - 01100110	
        - 0x66
    *   - 5	
        - 01101101	
        - 0x6d
    *   - 6	
        - 01111101	
        - 0x7d
    *   - 7	
        - 00000111	
        - 0x07
    *   - 8	
        - 01111111	
        - 0x7f
    *   - 9	
        - 01101111	
        - 0x6f

√âcrivez ces codes dans ``shiftOut()`` pour que l'afficheur √† segments LED affiche les chiffres correspondants.
