.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _sh_breathing_led:

2.2 LED Respirante
========================

Nous allons maintenant utiliser une autre m√©thode pour contr√¥ler la luminosit√© de la LED. Contrairement au projet pr√©c√©dent, ici, la luminosit√© de la LED diminue lentement jusqu'√† dispara√Ætre.

Lorsque le sprite sur la sc√®ne est cliqu√©, la luminosit√© de la LED augmente lentement puis s'√©teint instantan√©ment.

.. image:: img/3_ap.png

Composants n√©cessaires
---------------------------

Pour ce projet, nous avons besoin des composants suivants. 

Il est certainement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment √† partir des liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION AUX COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

Vous apprendrez
---------------------

- D√©finir la valeur de sortie de la broche PWM
- Cr√©er des variables
- Changer la luminosit√© du sprite

Construisez le circuit
-----------------------

Ce projet utilise le m√™me circuit que le projet pr√©c√©dent :ref:`sh_table_lamp`, mais au lieu d'utiliser HIGH/LOW pour allumer ou √©teindre les LED, ce projet utilise le signal `PWM - Wikipedia <https://en.wikipedia.org/wiki/Pulse-width_modulation>`_ pour allumer lentement ou diminuer la luminosit√© de la LED.

La plage du signal PWM est de 0 √† 255. Sur la carte ESP32, les broches 2, 5, 12~15, 18, 19, 21, 22, 25, 26 et 27 peuvent √©mettre un signal PWM.

.. image:: img/circuit/1_hello_led_bb.png

Programmation
--------------------

**1. S√©lectionner un sprite**

Supprimez le sprite par d√©faut, cliquez sur le bouton **Choisir un sprite** dans le coin inf√©rieur droit de la zone des sprites, entrez **button3** dans la zone de recherche, puis cliquez pour l'ajouter.

.. image:: img/3_sprite.png

**2. Cr√©er une variable**

Cr√©ez une variable appel√©e **pwm** pour stocker la valeur de la variation du pwm.

Cliquez sur la palette **Variables** et s√©lectionnez **Cr√©er une variable**.

.. image:: img/3_ap_va.png

Entrez le nom de la variable, il peut √™tre n'importe quel nom, mais il est recommand√© de d√©crire sa fonction. Le type de donn√©es est un nombre et pour tous les sprites.

.. image:: img/3_ap_pwm.png

Une fois cr√©√©e, vous verrez **pwm** dans la palette **Variables** et dans l'√©tat coch√©, ce qui signifie que cette variable appara√Ætra sur la sc√®ne. Vous pouvez essayer de d√©cocher pour voir si pwm est toujours pr√©sent sur la sc√®ne.

.. image:: img/3_ap_0.png

**3. D√©finir l'√©tat initial**

Lorsque le sprite **button3** est cliqu√©, changez le costume en **button-b** (√©tat cliqu√©), et d√©finissez la valeur initiale de la variable **pwm** √† 0.

* [d√©finir pwm √† 0] : de la palette **Variables**, utilis√© pour d√©finir la valeur de la variable.

.. image:: img/3_ap_brightness.png

**4. Faire augmenter progressivement la luminosit√© de la LED**

Puisque la plage de pwm est de 255, utilisez le bloc [r√©p√©ter], la variable **pwm** est accumul√©e jusqu'√† 255 par 5, puis mise dans le bloc [d√©finir la broche PWM], de sorte que vous pouvez voir la LED s'allumer lentement.

* [changer pwm de 5] : de la palette **Variables**, laissez la variable changer d'un nombre sp√©cifique √† chaque fois. Il peut s'agir d'un nombre positif ou n√©gatif, positif augmente √† chaque fois, n√©gatif diminue √† chaque fois, par exemple, ici la variable pwm augmente de 5 √† chaque fois.
* [d√©finir la broche PWM] : de la palette **ESP32**, utilis√© pour d√©finir la valeur de sortie de la broche pwm.

.. image:: img/3_ap_1.png

Enfin, changez le costume de button3 √† **button-a** et d√©finissez la valeur de la broche PWM √† 0, afin que la LED s'allume lentement puis s'√©teigne √† nouveau.

.. image:: img/3_ap_2.png
