
    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et √† des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _sh_protect_heart:

2.19 JEU - Prot√©gez Votre C≈ìur
=====================================

Dans ce projet, nous allons cr√©er un jeu qui teste la vitesse de r√©action.

Sur la sc√®ne, il y a un c≈ìur prot√©g√© dans une bo√Æte rectangulaire, et des fl√®ches volent vers ce c≈ìur depuis n'importe quelle position sur la sc√®ne. La couleur de la fl√®che alterne entre le noir et le blanc de mani√®re al√©atoire et la fl√®che vole de plus en plus vite.

Si la couleur de la bo√Æte rectangulaire et celle de la fl√®che sont identiques, la fl√®che est bloqu√©e √† l'ext√©rieur et le niveau augmente de 1 ; si les couleurs sont diff√©rentes, la fl√®che traverse le c≈ìur et le jeu est termin√©.

Ici, la couleur de la bo√Æte rectangulaire est contr√¥l√©e par le module de suivi de ligne. Lorsque le module est plac√© sur une surface noire (une surface r√©fl√©chissante), la couleur de la bo√Æte rectangulaire est noire, sinon elle est blanche.

Vous devez donc d√©cider de placer le module de suivi de ligne sur une surface blanche ou une surface noire en fonction de la couleur de la fl√®che.

.. image:: img/22_heart.png

Composants n√©cessaires
---------------------------

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_line_track`
        - |link_line_track_buy|

Construire le circuit
------------------------

Il s'agit d'un module de suivi de ligne num√©rique. Lorsqu'une ligne noire est d√©tect√©e, il √©met une valeur de 1 ; lorsqu'une ligne blanche est d√©tect√©e, il √©met une valeur de 0. De plus, vous pouvez ajuster sa distance de d√©tection √† l'aide du potentiom√®tre sur le module.

Construisez maintenant le circuit selon le sch√©ma ci-dessous.

.. image:: img/circuit/20_protect_heart_bb.png

.. note::

    Avant de commencer le projet, vous devez ajuster la sensibilit√© du module.

    Branchez le c√¢blage selon le sch√©ma ci-dessus, puis alimentez la carte R3 (soit directement via le c√¢ble USB, soit via le c√¢ble du bouton de la batterie 9V), sans t√©l√©charger le code.

    Collez maintenant un ruban adh√©sif noir sur le bureau, placez le module de suivi de ligne √† une hauteur de 2 cm du bureau.

    Avec le capteur orient√© vers le bas, observez la LED de signal sur le module pour vous assurer qu'elle s'allume sur la table blanche et s'√©teint sur le ruban adh√©sif noir.

    Si ce n'est pas le cas, vous devez ajuster le potentiom√®tre sur le module pour obtenir l'effet d√©crit ci-dessus.

Programmation
------------------

Nous devons cr√©er 3 sprites : **Heart**, **Square Box** et **Arrow1**.

* **Heart** : reste au centre de la sc√®ne, si touch√© par le sprite **Arrow1**, le jeu est termin√©.
* **Square Box** : a deux types de costumes, noir et blanc, et changera de costume selon la valeur du module de suivi de ligne.
* **Arrow** : vole vers le centre de la sc√®ne depuis n'importe quelle position en noir/blanc ; si sa couleur correspond √† celle du sprite **Square Box**, il est bloqu√© et retourne vers le centre de la sc√®ne depuis une position al√©atoire ; si sa couleur ne correspond pas, il traverse le sprite **Heart** et le jeu est termin√©.

**1. Ajouter le sprite Square Box**

Puisque les sprites Arrow1 et Square Box ont tous deux des costumes blancs, afin qu'ils soient affich√©s sur la sc√®ne, remplissez maintenant l'arri√®re-plan avec une couleur qui peut √™tre n'importe quelle couleur sauf noir, blanc et rouge.

* Cliquez sur **Backdrop1** pour aller √† sa page **Backdrops**.
* S√©lectionnez la couleur que vous souhaitez remplir.
* Utilisez l'outil **Rectangle** pour dessiner un rectangle de la m√™me taille que la planche √† dessin.

.. image:: img/22_heart0.png

Supprimez le sprite par d√©faut, utilisez le bouton **Choisir un Sprite** pour ajouter le sprite **Square Box**, et d√©finissez ses coordonn√©es x et y √† (0, 0).

.. image:: img/22_heart1.png

Allez √† la page **Costumes** du sprite **Square Box** et d√©finissez les costumes noir et blanc.

* Cliquez sur l'outil de s√©lection
* S√©lectionnez le rectangle sur la toile
* S√©lectionnez la couleur de remplissage en noir
* et nommez le costume **Black**

.. image:: img/22_heart2.png

S√©lectionnez le deuxi√®me costume, d√©finissez la couleur de remplissage en blanc, nommez-le White et supprimez le reste des costumes.

.. image:: img/22_heart3.png

**2. Ajouter le sprite Heart**

Ajoutez √©galement un sprite **Heart**, d√©finissez sa position √† (0, 0) et r√©duisez sa taille pour qu'il apparaisse situ√© √† l'int√©rieur de la Square Box.

.. image:: img/22_heart5.png

Sur la page **Costumes**, ajustez le costume violet du c≈ìur pour qu'il semble √™tre cass√©.

.. image:: img/22_heart6.png

**3. Ajouter le sprite Arrow1**

Ajoutez un sprite **Arrow1**.

.. image:: img/22_heart7.png

Sur la page **Costumes**, gardez et copiez le costume tourn√© vers la droite et d√©finissez sa couleur en noir et blanc.

.. image:: img/22_heart8.png

**4. Script pour le sprite Square Box**

Retournez √† la page **Blocs** et script le sprite **Square Box**.

* Ainsi, lorsque la valeur de la broche num√©rique 2 (module de suivi de ligne) est 1 (ligne noire d√©tect√©e), changez le costume en **Black**.
* Sinon, changez le costume en **White**.

.. image:: img/22_heart4.png


**5. Script pour le sprite Heart**

Le sprite **Heart** est prot√©g√© √† l'int√©rieur du **Square Box**, et par d√©faut a un costume rouge. Lorsque le sprite Arrow1 est touch√©, le jeu se termine.

.. image:: img/22_heart9.png

**6. Script pour le sprite Arrow1**

Faites en sorte que le sprite **Arrow1** se cache et cr√©e un clone lorsque le drapeau vert est cliqu√©.

.. image:: img/22_heart10.png

Cr√©ez un bloc [init] pour initialiser la position, l'orientation et la couleur du sprite **Arrow1**.

Il appara√Æt √† un endroit al√©atoire, et si la distance entre lui et le sprite **Heart** est inf√©rieure √† 200, il se d√©place vers l'ext√©rieur jusqu'√† ce que la distance soit sup√©rieure √† 200.

.. image:: img/22_heart11.png

D√©finissez sa direction pour faire face au sprite **Heart**.

.. image:: img/22_heart12.png

Faites en sorte que sa couleur alterne de mani√®re al√©atoire entre le noir et le blanc.

* La variable color est 0, le costume devient **White**.
* La variable color est 1, le costume devient **Black**.

.. image:: img/22_heart14.png

Maintenant, laissez-le commencer √† bouger, il ira de plus en plus vite au fur et √† mesure que la valeur de la variable **level** augmente.

.. image:: img/22_heart13.png

D√©finissez maintenant son effet de collision avec le sprite **Square Box**.

* Si le sprite **Arrow1** et le sprite **Square Box** ont la m√™me couleur (qui sera modifi√©e en fonction de la valeur du module de suivi de ligne), soit noir soit blanc, un nouveau clone est cr√©√© et le jeu continue.
* Si leurs couleurs ne correspondent pas, le sprite **Arrow1** continue de bouger et le jeu se termine lorsqu'il touche le sprite **Heart**.

.. image:: img/22_heart15.png

.. note::
    Les deux blocs [touch color()] doivent absorber s√©par√©ment les costumes noirs/blancs de Square Box.

    .. image:: img/22_heart16.png
