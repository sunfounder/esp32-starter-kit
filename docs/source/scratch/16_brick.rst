
    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre & Partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits.
    - **R√©ductions exclusives** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des cadeaux et √† des promotions festives.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _sh_breakout_clone:

2.16 JEU - Breakout Clone
============================

Ici, nous utilisons le potentiom√®tre pour jouer √† un jeu Breakout Clone.

Apr√®s avoir cliqu√© sur le drapeau vert, vous devez utiliser le potentiom√®tre pour contr√¥ler la raquette sur la sc√®ne afin d'attraper la balle pour qu'elle monte et frappe les briques. Si toutes les briques disparaissent, le jeu est gagn√© ; si vous ne parvenez pas √† attraper la balle, le jeu est perdu.

.. image:: img/17_brick.png

Composants n√©cessaires
---------------------------

Pour ce projet, nous avons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_pot`
        - |link_potentiometer_buy|

Construire le circuit
-----------------------

Le potentiom√®tre est un √©l√©ment r√©sistif √† 3 bornes, les 2 broches lat√©rales sont connect√©es √† 5V et GND, et la broche centrale est connect√©e √† la broche 35. Apr√®s conversion par le convertisseur ADC de la carte esp32, la plage de valeurs est de 0 √† 4095.

.. image:: img/circuit/5_moving_mouse_bb.png

Programmation
-----------------

Il y a 3 sprites sur la sc√®ne.

**1. Sprite de la raquette**

L'effet √† obtenir pour la **Raquette** est que sa position initiale soit au milieu du bas de la sc√®ne, et qu'elle soit contr√¥l√©e par un potentiom√®tre pour se d√©placer vers la gauche ou vers la droite.

* Supprimez le sprite par d√©faut, utilisez le bouton **Choisir un Sprite** pour ajouter le sprite **Raquette**, et d√©finissez ses coordonn√©es x et y √† (0, -140).

    .. image:: img/17_padd1.png

* Allez √† la page **Costumes**, retirez le contour et changez sa couleur en gris fonc√©.

    .. image:: img/17_padd3.png

* Maintenant, script le sprite **Raquette** pour d√©finir sa position initiale √† (0, -140) lorsque le drapeau vert est cliqu√©, et lisez la valeur de la broche 35 (potentiom√®tre) dans la variable **a0**. √âtant donn√© que le sprite **Raquette** se d√©place de gauche √† droite sur la sc√®ne avec des coordonn√©es x de -195 √† 195, vous devez utiliser le bloc [map] pour mapper la plage de la variable **a0** de 0 √† 4095 √† -195 √† 195.

    .. image:: img/17_padd2.png

* Maintenant, vous pouvez tourner le potentiom√®tre pour voir si la **Raquette** peut se d√©placer √† gauche et √† droite sur la sc√®ne.

**2. Sprite de la balle**

L'effet du sprite de la balle est qu'il se d√©place autour de la sc√®ne et rebondit lorsqu'il touche le bord ; il rebondit vers le bas s'il touche le bloc au-dessus de la sc√®ne ; il rebondit vers le haut s'il touche le sprite Raquette pendant sa chute ; sinon, le script cesse de fonctionner et le jeu se termine.

* Ajoutez le sprite **Balle**.

    .. image:: img/17_ball1.png

* Lorsque le drapeau vert est cliqu√©, d√©finissez l'angle du sprite **Balle** √† 45¬∞ et d√©finissez la position initiale √† (0, -120).

    .. image:: img/17_ball2.png

* Maintenant, laissez le sprite **Balle** se d√©placer autour de la sc√®ne et rebondir lorsqu'il touche le bord, et vous pouvez cliquer sur le drapeau vert pour voir l'effet.

    .. image:: img/17_ball3.png

* Lorsque le sprite **Balle** touche le sprite **Raquette**, faites une r√©flexion. La fa√ßon simple de le faire est de laisser l'angle √™tre directement invers√©, mais vous constaterez alors que le chemin de la balle est compl√®tement fixe, ce qui est trop ennuyeux. Par cons√©quent, nous utilisons le centre des deux sprites pour calculer et faire rebondir la balle dans la direction oppos√©e au centre de la raquette.

    .. image:: img/17_ball4.png

    .. image:: img/17_ball6.png

* Lorsque le sprite **Balle** tombe sur le bord de la sc√®ne, le script cesse de fonctionner et le jeu se termine.

    .. image:: img/17_ball5.png
        

**3. Sprite Block1**

Le sprite **Block1** doit appara√Ætre avec l'effet de clonage de 4x8 d'elle-m√™me au-dessus de la sc√®ne dans une couleur al√©atoire, et supprimer un clone s'il est touch√© par le sprite **Balle**.

Le sprite **Block1** n'est pas disponible dans la biblioth√®que **PictoBlox**, vous devez le dessiner vous-m√™me ou le modifier avec un sprite existant. Ici, nous allons le modifier avec le sprite **Button3**.

* Apr√®s avoir ajout√© le sprite **Button3**, allez √† la page **Costumes**. Supprimez d'abord **button-a**, puis r√©duisez √† la fois la largeur et la hauteur de **button-b**, et changez le nom du sprite en **Block1**, comme montr√© dans l'image suivante.

    .. note::

        * Pour la largeur de **Block1**, vous pouvez probablement la simuler √† l'√©cran pour voir si vous pouvez en mettre 8 dans une rang√©e. Sinon, r√©duisez la largeur de mani√®re appropri√©e.
        * Pendant le processus de r√©duction du sprite **Block1**, vous devez maintenir le point central au milieu du sprite.

    .. image:: img/17_bri2.png

* Cr√©ez maintenant d'abord 2 variables, **block** pour stocker le nombre de blocs et **roll** pour stocker le nombre de rang√©es.

    .. image:: img/17_bri3.png

* Nous devons cr√©er un clone du sprite **Block1**, de sorte qu'il s'affiche de gauche √† droite, de haut en bas, un par un, 4x8 au total, avec des couleurs al√©atoires.

    .. image:: img/17_bri4.png

* Une fois le script √©crit, cliquez sur le drapeau vert et regardez l'affichage sur la sc√®ne. Si c'est trop compact ou trop petit, vous pouvez changer la taille.

    .. image:: img/17_bri5.png

* Maintenant, √©crivez l'√©v√©nement d√©clencheur. Si le sprite clon√© **Block1** touche le sprite **Balle**, supprimez le clone et diffusez le message **crush**.

    .. image:: img/17_bri6.png

* Retournez au sprite **Balle**, lorsque le message **crush** est re√ßu (le sprite **Balle** touche le clone du sprite **Block1**), la **Balle** est renvoy√©e dans la direction oppos√©e.

    .. image:: img/17_ball7.png
