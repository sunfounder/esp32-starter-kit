.. note::

    ¬°Hola, bienvenido a la Comunidad de Aficionados a Raspberry Pi, Arduino y ESP32 de SunFounder en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte de expertos**: Resuelve problemas posventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y avances.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de fiestas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy!

.. _sh_breakout_clone:

2.16 JUEGO - Clon de Breakout
===============================

Aqu√≠ utilizamos el potenci√≥metro para jugar a un clon del juego Breakout.

Despu√©s de hacer clic en la bandera verde, necesitar√°s usar el potenci√≥metro para controlar la paleta en el escenario y atrapar la bola para que pueda subir y golpear los ladrillos. Si desaparecen todos los ladrillos, ganas el juego; si no atrapas la bola, pierdes.

.. image:: img/17_brick.png

Componentes Necesarios
--------------------------

Para este proyecto, necesitaremos los siguientes componentes.

Es definitivamente conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit de Inicio ESP32
        - 320+
        - |link_esp32_starter_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN AL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_pot`
        - |link_potentiometer_buy|

Construir el Circuito
-----------------------

El potenci√≥metro es un elemento resistivo con 3 terminales, los 2 pines laterales est√°n conectados a 5V y GND, y el pin central est√° conectado al pin35. Despu√©s de la conversi√≥n por el convertidor ADC de la placa esp32, el rango de valores es de 0-4095.

.. image:: img/circuit/5_moving_mouse_bb.png

Programaci√≥n
------------------

Hay 3 sprites en el escenario.

**1. Sprite de la Paleta**

El efecto que se busca con la **Paleta** es que la posici√≥n inicial est√© en el medio de la parte inferior del escenario, y sea controlada por un potenci√≥metro para moverla hacia la izquierda o hacia la derecha.

* Elimina el sprite predeterminado, usa el bot√≥n **Elegir un Sprite** para a√±adir el sprite **Paleta**, y ajusta sus coordenadas x e y a (0, -140).

    .. image:: img/17_padd1.png

* Ve a la p√°gina de **Disfraces**, elimina el contorno y cambia su color a gris oscuro.

    .. image:: img/17_padd3.png

* Ahora programa el sprite **Paleta** para establecer su posici√≥n inicial a (0, -140) cuando se haga clic en la bandera verde, y lee el valor del pin35 (potenci√≥metro) en la variable **a0**. Dado que el sprite **Paleta** se mueve de izquierda a derecha en el escenario en las coordenadas x de -195 a 195, necesitas usar el bloque [map] para mapear el rango de la variable **a0** de 0~4095 a -195~195.

    .. image:: img/17_padd2.png

* Ahora puedes girar el potenci√≥metro para ver si la **Paleta** puede moverse hacia la izquierda y hacia la derecha en el escenario.

**2. Sprite de la Bola**

El efecto del sprite de la bola es que se mueva por el escenario y rebote cuando toque el borde; rebota hacia abajo si toca el bloque sobre el escenario; rebota hacia arriba si toca el sprite de la **Paleta** durante su ca√≠da; si no, el script deja de ejecutarse y el juego termina.

* A√±ade el sprite **Bola**.

    .. image:: img/17_ball1.png

* Cuando se haga clic en la bandera verde, establece el √°ngulo del sprite **Bola** a 45¬∞ y la posici√≥n inicial a (0, -120).

    .. image:: img/17_ball2.png

* Ahora deja que el sprite **Bola** se mueva por el escenario y rebote cuando toque el borde, y puedes hacer clic en la bandera verde para ver el efecto.

    .. image:: img/17_ball3.png

* Cuando el sprite **Bola** toca el sprite **Paleta**, realiza un reflejo. La forma f√°cil de hacer esto es dejar que el √°ngulo se invierta directamente, pero entonces encontrar√°s que la trayectoria de la bola es completamente fija, lo cual es demasiado aburrido. Por lo tanto, usamos el centro de los dos sprites para calcular y hacer que la bola rebote en la direcci√≥n opuesta al centro del baffle.

    .. image:: img/17_ball4.png

    .. image:: img/17_ball6.png

* Cuando el sprite **Bola** cae al borde del escenario, el script deja de ejecutarse y el juego termina.

    .. image:: img/17_ball5.png

**3. Sprite del Bloque1**

El sprite **Bloque1** aparece con el efecto de clonarse a s√≠ mismo 4x8 veces sobre el escenario en un color aleatorio, y eliminar un clon si es tocado por el sprite **Bola**.

El sprite **Bloque1** no est√° disponible en la biblioteca **PictoBlox**, necesitas dibujarlo t√∫ mismo o modificarlo con un sprite existente. Aqu√≠ vamos a modificarlo con el sprite **Bot√≥n3**.

* Despu√©s de a√±adir el sprite **Bot√≥n3**, ve a la p√°gina de **Disfraces**. Ahora elimina primero **bot√≥n-a**, luego reduce tanto el ancho como el alto de **bot√≥n-b**, y cambia el nombre del sprite a **Bloque1**, como se muestra en la siguiente imagen.

    .. note::

        * Para el ancho de **Bloque1**, puedes simularlo en la pantalla para ver si puedes colocar 8 en fila, si no, entonces reduce el ancho apropiadamente.
        * En el proceso de reducir el sprite **Bloque1**, necesitas mantener el punto central en el medio del sprite.

    .. image:: img/17_bri2.png

* Ahora crea primero 2 variables, **bloque** para almacenar el n√∫mero de bloques y **fila** para almacenar el n√∫mero de filas.

    .. image:: img/17_bri3.png

* Necesitamos hacer un clon del sprite **Bloque1** para que se muestre de izquierda a derecha, de arriba abajo, uno por uno, en total 4x8, con colores aleatorios.

    .. image:: img/17_bri4.png

* Despu√©s de escribir el script, haz clic en la bandera verde y observa la presentaci√≥n en el escenario, si es demasiado compacta o peque√±a, puedes cambiar el tama√±o.

    .. image:: img/17_bri5.png

* Ahora escribe el evento desencadenante. Si el clon del sprite **Bloque1** toca el sprite **Bola**, elimina el clon y emite el mensaje **crush**.

    .. image:: img/17_bri6.png

* Vuelve al sprite **Bola**, cuando se recibe la emisi√≥n **crush** (el sprite **Bola** toca el clon del sprite **Bloque1**), la **Bola** es expulsada en la direcci√≥n opuesta.

    .. image:: img/17_ball7.png
