.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_thermistor:

5.10 D√©tection de la temp√©rature
======================================

Un thermistor est un capteur de temp√©rature qui pr√©sente une forte d√©pendance √† la temp√©rature. Il peut √™tre class√© en deux types : Coefficient de Temp√©rature N√©gatif (NTC) et Coefficient de Temp√©rature Positif (PTC). La r√©sistance d'un thermistor NTC diminue avec l'augmentation de la temp√©rature, tandis que celle d'un thermistor PTC augmente avec l'augmentation de la temp√©rature.

Dans ce projet, nous utiliserons un thermistor NTC. En connectant le thermistor NTC √† une broche d'entr√©e analogique du microcontr√¥leur ESP32, nous pouvons mesurer sa r√©sistance, qui est directement proportionnelle √† la temp√©rature.

En int√©grant le thermistor NTC et en effectuant les calculs n√©cessaires, nous pouvons mesurer avec pr√©cision la temp√©rature et l'afficher sur le module I2C LCD1602. Ce projet permet une surveillance en temps r√©el de la temp√©rature et offre une interface visuelle pour l'affichage de la temp√©rature.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_thermistor`
        - |link_thermistor_buy|

**Broches disponibles**

* **Broches disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 15

        *   - Broches disponibles
            - IO14, IO25, I35, I34, I39, I36


* **Broches de strap**

    Les broches de strap suivantes affectent le processus de d√©marrage de l'ESP32 lors de la mise sous tension ou de la r√©initialisation. Cependant, une fois l'ESP32 d√©marr√©e avec succ√®s, elles peuvent √™tre utilis√©es comme broches normales.

    .. list-table::
        :widths: 5 15

        *   - Broches de strap
            - IO0, IO12


**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.10_thermistor.png

Lorsque la temp√©rature augmente, la r√©sistance du thermistor diminue, ce qui provoque une diminution de la valeur lue sur I35. De plus, en utilisant une formule, vous pouvez convertir la valeur analogique en temp√©rature puis l'afficher.

**C√¢blage**

.. image:: ../../img/wiring/5.10_thermistor_bb.png


.. note::
    * Le thermistor est noir et marqu√© 103.
    * La couleur de l'anneau de la r√©sistance de 10K ohms est rouge, noir, noir, rouge et marron.

**Code**

.. note::

    * Ouvrez le fichier ``5.10_thermistor.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 




.. code-block:: python

    # Importer les biblioth√®ques n√©cessaires
    from machine import ADC, Pin
    import time
    import math

    # D√©finir la valeur b√™ta du thermistor, g√©n√©ralement fournie dans la fiche technique
    beta = 3950

    # Cr√©er un objet ADC (thermistor)
    thermistor = ADC(Pin(35, Pin.IN))

    # R√©gler l'att√©nuation
    thermistor.atten(thermistor.ATTN_11DB)

    # D√©marrer une boucle infinie pour surveiller continuellement la temp√©rature
    while True:
        # Lire la tension en microvolts et la convertir en volts
        Vr = thermistor.read_uv() / 1000000

        # Calculer la r√©sistance du thermistor en fonction de la tension mesur√©e
        Rt = 10000 * Vr / (3.3 - Vr)

        # Utiliser la valeur b√™ta et la valeur de r√©sistance pour calculer la temp√©rature en Kelvin
        temp = 1 / (((math.log(Rt / 10000)) / beta) + (1 / (273.15 + 25)))

        # Convertir en Celsius
        Cel = temp - 273.15

        # Convertir en Fahrenheit
        Fah = Cel * 1.8 + 32

        # Afficher les valeurs de temp√©rature en Celsius et en Fahrenheit
        print('Celsius: %.2f C  Fahrenheit: %.2f F' % (Cel, Fah))
        time.sleep(0.5)

Lorsque le code est ex√©cut√©, le Shell affiche les temp√©ratures en Celsius et en Fahrenheit.

**Comment √ßa marche ?**

Chaque thermistor a une r√©sistance normale. Ici, elle est de 10k ohms, mesur√©e √† 25 degr√©s Celsius.

Lorsque la temp√©rature augmente, la r√©sistance du thermistor diminue. Ensuite, les donn√©es de tension sont converties en quantit√©s num√©riques par l'adaptateur A/D.

La temp√©rature en Celsius ou en Fahrenheit est sortie via la programmation.

Voici la relation entre la r√©sistance et la temp√©rature :

    **RT =RN expB(1/TK - 1/TN)** 

    * **RT** est la r√©sistance du thermistor NTC lorsque la temp√©rature est **TK**. 
    * **RN** est la r√©sistance du thermistor NTC √† la temp√©rature nominale TN. Ici, la valeur num√©rique de RN est 10k. 
    * **TK** est une temp√©rature en Kelvin et l'unit√© est K. Ici, la valeur num√©rique de **TK** est ``373.15 + degr√© Celsius``. 
    * **TN** est une temp√©rature nominale en Kelvin; l'unit√© est aussi K. Ici, la valeur num√©rique de TN est ``373.15+25``.
    * Et **B(b√™ta)**, la constante mat√©rielle du thermistor NTC, est √©galement appel√©e indice de sensibilit√© thermique avec une valeur num√©rique ``4950``. 
    * **exp** est l'abr√©viation de exponentielle, et la base ``e`` est un nombre naturel et vaut environ 2,7. 

    Convertissez cette formule ``TK=1/(ln(RT/RN)/B+1/TN)`` pour obtenir la temp√©rature en Kelvin qui moins 273,15 √©gale le degr√© Celsius.

    Cette relation est une formule empirique. Elle est pr√©cise uniquement lorsque la temp√©rature et la r√©sistance sont dans la plage effective.


**En savoir plus**

Vous pouvez √©galement afficher les temp√©ratures calcul√©es en Celsius et en Fahrenheit sur l'√©cran I2C LCD1602.

.. image:: ../../img/wiring/5.10_thermistor_lcd_bb.png

.. note::

    * Ouvrez le fichier ``5.10_thermistor_lcd.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 
    * Ici, vous devez utiliser la biblioth√®que appel√©e ``lcd1602.py``, veuillez v√©rifier si elle a √©t√© t√©l√©charg√©e sur ESP32, pour un tutoriel d√©taill√©, reportez-vous √† :ref:`add_libraries_py`.


.. code-block:: python

    # Importer les biblioth√®ques n√©cessaires
    from machine import ADC, Pin
    from lcd1602 import LCD
    import time
    import math

    # D√©finir la valeur b√™ta du thermistor, g√©n√©ralement fournie dans la fiche technique
    beta = 3950

    # Cr√©er un objet ADC (thermistor)
    thermistor = ADC(Pin(35, Pin.IN))

    # R√©gler l'att√©nuation
    thermistor.atten(thermistor.ATTN_11DB)

    lcd = LCD()

    # D√©marrer une boucle infinie pour surveiller continuellement la temp√©rature
    while True:
        # Lire la tension en microvolts et la convertir en volts
        Vr = thermistor.read_uv() / 1000000

        # Calculer la r√©sistance du thermistor en fonction de la tension mesur√©e
        Rt = 10000 * Vr / (3.3 - Vr)

        # Utiliser la valeur b√™ta et la valeur de r√©sistance pour calculer la temp√©rature en Kelvin
        temp = 1 / (((math.log(Rt / 10000)) / beta) + (1 / (273.15 + 25)))

        # Convertir en Celsius
        Cel = temp - 273.15

        # Convertir en Fahrenheit
        Fah = Cel * 1.8 + 32

        # Afficher les valeurs de temp√©rature en Celsius et en Fahrenheit
        print('Celsius: %.2f C  Fahrenheit: %.2f F' % (Cel, Fah))

        # Effacer l'√©cran LCD
        lcd.clear()
        
        # Afficher les valeurs de temp√©rature en Celsius et en Fahrenheit
        lcd.message('Cel: %.2f \xDFC \n' % Cel)
        lcd.message('Fah: %.2f \xDFF' % Fah)
        time.sleep(1)

