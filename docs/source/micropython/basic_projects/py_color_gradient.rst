.. note::

    Bonjour, bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_color_gradient:

6.5 D√©grad√© de Couleur
=============================

√ätes-vous pr√™t √† d√©couvrir un monde de couleurs ? Ce projet vous emm√®nera 
dans un voyage magique o√π vous pourrez contr√¥ler une bande LED et obtenir 
des transitions de couleur en douceur. Que vous cherchiez √† ajouter de la 
couleur √† votre d√©coration int√©rieure ou √† vous lancer dans un projet de 
programmation amusant, ce projet est fait pour vous. Plongeons ensemble dans 
ce monde color√© !

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_pot`
        - |link_potentiometer_buy|
    *   - :ref:`cpn_ws2812`
        - |link_ws2812_buy|

**Sch√©ma**

.. image:: ../../img/circuit/circuit_6.5_color_gradient.png

Ce projet utilise une bande LED et un potentiom√®tre pour cr√©er un effet de m√©lange de couleurs. Le potentiom√®tre est utilis√© pour ajuster la valeur de la teinte de la LED, qui est ensuite convertie en valeurs RVB √† l'aide d'une fonction de conversion de couleur. Les valeurs RVB sont ensuite utilis√©es pour mettre √† jour la couleur de la LED.

**C√¢blage**

.. image:: ../../img/wiring/6.5_color_strip_bb.png
    :width: 800

**Code**

.. note::

    * Ouvrez le fichier ``6.5_color_gradient.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 

.. code-block:: python

    from machine import Pin, ADC, PWM
    import neopixel
    import time

    NUM_LEDS = 8  # Nombre de LEDs dans la bande
    PIN_NUM = 26  # Bande LED
    POT_PIN = 14  # Potentiom√®tre

    # Initialiser le potentiom√®tre
    potentiometer = ADC(Pin(POT_PIN))
    potentiometer.atten(ADC.ATTN_11DB)

    # Initialiser la bande LED NeoPixel
    np = neopixel.NeoPixel(Pin(PIN_NUM), NUM_LEDS)

    # Fonction pour convertir l'espace colorim√©trique HSL en espace RVB
    def hsl_to_rgb(h, s, l):
        # Fonction auxiliaire pour convertir la teinte en RVB
        def hue_to_rgb(p, q, t):
            if t < 0:
                t += 1
            if t > 1:
                t -= 1
            if t < 1/6:
                return p + (q - p) * 6 * t
            if t < 1/2:
                return q
            if t < 2/3:
                return p + (q - p) * (2/3 - t) * 6
            return p

        if s == 0:
            r = g = b = l
        else:
            q = l * (1 + s) if l < 0.5 else l + s - l * s
            p = 2 * l - q
            r = hue_to_rgb(p, q, h + 1/3)
            g = hue_to_rgb(p, q, h)
            b = hue_to_rgb(p, q, h - 1/3)

        return (int(r * 255), int(g * 255), int(b * 255))

    # Fonction pour d√©finir la couleur de toutes les LEDs dans la bande
    def set_color(np, color):
        for i in range(NUM_LEDS):
            np[i] = color
        np.write()

    # Boucle principale
    while True:
        # Lire la valeur du potentiom√®tre et la normaliser dans la plage [0, 1]
        pot_value = potentiometer.read() / 4095.0
        hue = pot_value  # D√©finir la valeur de la teinte en fonction de la position du potentiom√®tre
        saturation = 1  # D√©finir la saturation √† 1 (compl√®tement satur√©e)
        lightness = 0.5  # D√©finir la luminosit√© √† 0.5 (√† mi-chemin entre le noir et le blanc)

        # Convertir la couleur HSL en RVB
        current_color = hsl_to_rgb(hue, saturation, lightness)

        # D√©finir la couleur de la bande LED en fonction de la valeur RVB convertie
        set_color(np, current_color)

        # Pause pour permettre des transitions en douceur
        time.sleep(0.1)


Lorsque le code s'ex√©cute, tournez lentement le potentiom√®tre et vous verrez la couleur de la bande LED RGB passer du rouge au violet.

