.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_rgb_strip:

2.7 Bande LED RGB
======================

Dans ce projet, nous explorerons le monde fascinant des bandes LED WS2812 et donnerons vie √† un affichage vibrant de couleurs. Avec la capacit√© de contr√¥ler individuellement chaque LED de la bande, nous pouvons cr√©er des effets lumineux captivants qui √©blouiront les sens.

De plus, nous avons inclus une extension excitante √† ce projet, o√π nous explorerons le domaine de l'al√©atoire. En introduisant des couleurs al√©atoires et en impl√©mentant un effet de lumi√®re fluide, nous pouvons cr√©er une exp√©rience visuelle envo√ªtante et captivante.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ws2812`
        - |link_ws2812_buy|

**Sch√©ma**

.. image:: ../../img/circuit/circuit_2.7_ws2812.png
    :width: 500
    :align: center


**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


.. note::

    IO33 n'est pas disponible pour ce projet.

    La bande LED WS2812 est un type de bande LED qui n√©cessite un signal de modulation de largeur d'impulsion (PWM) pr√©cis. Le signal PWM a des exigences pr√©cises en termes de temps et de tension. Par exemple, un bit "0" pour le WS2812 correspond √† une impulsion de niveau haut d'environ 0,4 microsecondes, tandis qu'un bit "1" correspond √† une impulsion de niveau haut d'environ 0,8 microsecondes. Cela signifie que la bande doit recevoir des changements de tension √† haute fr√©quence.

    Cependant, avec une r√©sistance pull-up de 4,7K et un condensateur pull-down de 100nf sur IO33, un simple filtre passe-bas est cr√©√©. Ce type de circuit "lisse" les signaux haute fr√©quence, car le condensateur a besoin de temps pour se charger et se d√©charger lorsqu'il re√ßoit des changements de tension. Par cons√©quent, si le signal change trop rapidement (c'est-√†-dire √† haute fr√©quence), le condensateur ne pourra pas suivre. Cela entra√Æne un signal de sortie flou et m√©connaissable pour la bande.

**C√¢blage**

.. image:: ../../img/wiring/2.7_rgb_strip_bb.png
    :width: 800

**Code**

.. note::

    * Ouvrez le fichier ``2.7_rgb_strip.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 

    
.. code-block:: python

    from machine import Pin
    from neopixel import NeoPixel

    pin = Pin(14, Pin.OUT)   # d√©finir une broche en sortie pour piloter les NeoPixels
    pixels = NeoPixel(pin, 8)   # cr√©er un pilote NeoPixel sur la broche pour 8 pixels

    pixels[0] = [64,154,227]    # d√©finir la couleur du pixel
    pixels[1] = [128,0,128]
    pixels[2] = [50,150,50]
    pixels[3] = [255,30,30]
    pixels[4] = [0,128,255]
    pixels[5] = [99,199,0]
    pixels[6] = [128,128,128]
    pixels[7] = [255,100,0]

    pixels.write()              # envoyer les donn√©es √† tous les pixels


S√©lectionnons quelques couleurs pr√©f√©r√©es et affichons-les sur la bande LED RGB !

**Comment √ßa marche ?**

#. Dans le module ``neopixel``, nous avons int√©gr√© des fonctions li√©es dans la classe ``NeoPixel``.

    .. code-block:: python

        from neopixel import NeoPixel

#. Utilisez la classe ``NeoPixel`` du module ``neopixel`` pour initialiser l'objet ``pixels``, en sp√©cifiant la broche de donn√©es et le nombre de LEDs.

    .. code-block:: python

        pixels = NeoPixel(pin, 8)   # cr√©er un pilote NeoPixel sur la broche pour 8 pixels

#. D√©finissez la couleur de chaque LED et utilisez la m√©thode ``write()`` pour envoyer les donn√©es √† la LED WS2812 afin de mettre √† jour son affichage.

    .. code-block:: python

        pixels[0] = [64,154,227]    # d√©finir la couleur du pixel
        pixels[1] = [128,0,128]
        pixels[2] = [50,150,50]
        pixels[3] = [255,30,30]
        pixels[4] = [0,128,255]
        pixels[5] = [99,199,0]
        pixels[6] = [128,128,128]
        pixels[7] = [255,100,0]

        pixels.write()              # envoyer les donn√©es √† tous les pixels

**En savoir plus**

Nous pouvons g√©n√©rer des couleurs al√©atoires et cr√©er une lumi√®re fluide color√©e.

.. note::

    * Ouvrez le fichier ``2.7_rgb_strip_random.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 


.. code-block:: python

    from machine import Pin
    import neopixel
    import time
    import random

    # D√©finir le nombre de pixels pour la lumi√®re courante
    num_pixels = 8

    # D√©finir la broche de donn√©es pour la bande LED RGB
    data_pin = Pin(14, Pin.OUT)

    # Initialiser l'objet bande LED RGB
    pixels = neopixel.NeoPixel(data_pin, num_pixels)

    # Boucle continue de la lumi√®re courante
    while True:
        for i in range(num_pixels):
            # G√©n√©rer une couleur al√©atoire pour le pixel actuel
            color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
            
            # Allumer le pixel actuel avec la couleur al√©atoire
            pixels[i] = color
            
            # Mettre √† jour l'affichage de la bande LED RGB
            pixels.write()
            
            # √âteindre le pixel actuel
            pixels[i] = (0, 0, 0)
            
            # Attendre une p√©riode de temps pour contr√¥ler la vitesse de la lumi√®re courante
            time.sleep_ms(100)


* Dans la boucle ``while``, nous utilisons une boucle ``for`` pour allumer chaque pixel de la bande LED RGB un par un.
* Utilisez d'abord la fonction ``random.randint()`` pour g√©n√©rer une couleur al√©atoire pour le pixel actuel.
* Ensuite, allumez le pixel actuel avec la couleur al√©atoire, utilisez la m√©thode ``write()`` de l'objet ``NeoPixel`` pour envoyer les donn√©es de couleur √† la bande LED RGB afin de mettre √† jour son affichage.
* Enfin, √©teignez le pixel actuel en r√©glant sa couleur sur (0, 0, 0), et attendez une p√©riode de temps pour contr√¥ler la vitesse de la lumi√®re courante.

