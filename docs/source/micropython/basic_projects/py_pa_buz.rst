.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pa_buz:

3.2 Tonalit√© Personnalis√©e
==========================================

Nous avons utilis√© un buzzer actif dans le projet pr√©c√©dent, cette fois nous utiliserons un buzzer passif.

Comme le buzzer actif, le buzzer passif utilise √©galement le ph√©nom√®ne d'induction √©lectromagn√©tique pour fonctionner. La diff√©rence est qu'un buzzer passif n'a pas de source oscillante, il ne bipera donc pas si des signaux CC sont utilis√©s. Mais cela permet au buzzer passif d'ajuster sa propre fr√©quence d'oscillation et de produire diff√©rentes notes comme "do, r√©, mi, fa, sol, la, si".

Faisons √©mettre une m√©lodie au buzzer passif !

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

**Sch√©ma**

.. image:: ../../img/circuit/circuit_3.1_buzzer.png
    :width: 500
    :align: center

Lorsque la sortie IO14 est √©lev√©e, apr√®s la r√©sistance de limitation de courant de 1K (pour prot√©ger le transistor), le S8050 (transistor NPN) conduira, faisant ainsi retentir le buzzer.

Le r√¥le du S8050 (transistor NPN) est d'amplifier le courant et de rendre le son du buzzer plus fort. En fait, vous pouvez √©galement connecter directement le buzzer √† IO14, mais vous constaterez que le son du buzzer est plus faible.

**C√¢blage**

Deux types de buzzers sont inclus dans le kit. 
Nous devons utiliser le buzzer passif. Retournez-les, le dos scell√© (et non le PCB expos√©) est celui que nous voulons.

.. image:: ../../components/img/buzzer.png
    :width: 500
    :align: center

Le buzzer n√©cessite l'utilisation d'un transistor pour fonctionner, ici nous utilisons le S8050 (transistor NPN).

.. image:: ../../img/wiring/3.1_buzzer_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``3.2_custom_tone.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 


.. code-block:: python

    import machine
    import time

    # D√©finir les fr√©quences de plusieurs notes de musique en Hz
    C4 = 262
    D4 = 294
    E4 = 330
    F4 = 349
    G4 = 392
    A4 = 440
    B4 = 494

    # Cr√©er un objet PWM repr√©sentant la broche 14 et l'assigner √† la variable buzzer
    buzzer = machine.PWM(machine.Pin(14))

    # D√©finir une fonction tone qui prend en entr√©e un objet Pin repr√©sentant le buzzer, une fr√©quence en Hz et une dur√©e en millisecondes
    def tone(pin, frequency, duration):
        pin.freq(frequency) # D√©finir la fr√©quence
        pin.duty(512) # D√©finir le cycle de service
        time.sleep_ms(duration) # Pause pour la dur√©e en millisecondes
        pin.duty(0) # D√©finir le cycle de service √† 0 pour arr√™ter le son

    # Jouer une s√©quence de notes avec des fr√©quences et des dur√©es diff√©rentes
    tone(buzzer, C4, 250)
    time.sleep_ms(500)
    tone(buzzer, D4, 250)
    time.sleep_ms(500)
    tone(buzzer, E4, 250)
    time.sleep_ms(500)
    tone(buzzer, F4, 250)
    time.sleep_ms(500)
    tone(buzzer, G4, 250)
    time.sleep_ms(500)
    tone(buzzer, A4, 250)
    time.sleep_ms(500)
    tone(buzzer, B4, 250)


**Comment √ßa marche ?**

Si le buzzer passif re√ßoit un signal num√©rique, il ne fait que pousser le diaphragme sans produire de son.

Par cons√©quent, nous utilisons la fonction ``tone()`` pour g√©n√©rer le signal PWM et faire sonner le buzzer passif.

Cette fonction a trois param√®tres :

* ``pin`` : La broche qui contr√¥le le buzzer.
* ``frequency`` : La hauteur du son du buzzer est d√©termin√©e par la fr√©quence, plus la fr√©quence est √©lev√©e, plus la hauteur du son est √©lev√©e.
* ``duration`` : La dur√©e de la tonalit√©.

Nous utilisons la fonction ``duty()`` pour r√©gler le cycle de service √† 512 (environ 50%). Il peut √™tre d'autres nombres, et il suffit de g√©n√©rer un signal √©lectrique discontinu pour osciller.


**En savoir plus**

Nous pouvons simuler des hauteurs sp√©cifiques et ainsi jouer un morceau de musique complet.


.. note::

    * Ouvrez le fichier ``3.2_custom_tone_music.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 



.. code-block:: python

    import machine
    import time

    # D√©finir la broche GPIO qui est connect√©e au buzzer
    buzzer = machine.PWM(machine.Pin(14))

    # D√©finir les fr√©quences des notes en Hz
    C5 = 523
    D5 = 587
    E5 = 659
    F5 = 698
    G5 = 784
    A5 = 880
    B5 = 988

    # D√©finir les dur√©es des notes en millisecondes
    quarter_note = 250
    half_note = 300
    whole_note = 1000

    # D√©finir la m√©lodie comme une liste de tuples (note, dur√©e)
    melody = [
        (E5, quarter_note),
        (E5, quarter_note),
        (F5, quarter_note),
        (G5, half_note),
        (G5, quarter_note),
        (F5, quarter_note),
        (E5, quarter_note),
        (D5, half_note),
        (C5, quarter_note),
        (C5, quarter_note),
        (D5, quarter_note),
        (E5, half_note),
        (E5, quarter_note),
        (D5, quarter_note),
        (D5, half_note),
        (E5, quarter_note),
        (E5, quarter_note),
        (F5, quarter_note),
        (G5, half_note),
        (G5, quarter_note),
        (F5, quarter_note),
        (E5, quarter_note),
        (D5, half_note),
        (C5, quarter_note),
        (C5, quarter_note),
        (D5, quarter_note),
        (E5, half_note),
        (D5, quarter_note),
        (C5, quarter_note),
        (C5, half_note),

    ]

    # D√©finir une fonction pour jouer une note avec la fr√©quence et la dur√©e donn√©es
    def tone(pin,frequency,duration):
        pin.freq(frequency)
        pin.duty(512)
        time.sleep_ms(duration)
        pin.duty(0)

    # Jouer la m√©lodie
    for note in melody:
        tone(buzzer, note[0], note[1])
        time.sleep_ms(50)


* La fonction ``tone`` d√©finit la fr√©quence de la broche √† la valeur de ``frequency`` en utilisant la m√©thode ``freq`` de l'objet ``pin``. 
* Elle d√©finit ensuite le cycle de service de la broche √† 512 en utilisant la m√©thode ``duty`` de l'objet ``pin``. 
* Cela am√®nera la broche √† produire une tonalit√© avec la fr√©quence et le volume sp√©cifi√©s pendant la dur√©e de ``duration`` en millisecondes en utilisant la m√©thode ``sleep_ms`` du module time.
* Le code joue ensuite une m√©lodie en parcourant une s√©quence appel√©e ``melody`` et en appelant la fonction ``tone`` pour chaque note de la m√©lodie avec la fr√©quence et la dur√©e de la note. 
* Il ins√®re √©galement une courte pause de 50 millisecondes entre chaque note en utilisant la m√©thode ``sleep_ms`` du module time.

