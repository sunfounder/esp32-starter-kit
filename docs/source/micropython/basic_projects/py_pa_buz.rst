.. note::

    ¬°Hola, bienvenido a la Comunidad de Aficionados a Raspberry Pi, Arduino y ESP32 de SunFounder en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte de expertos**: Resuelve problemas posventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y avances.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de fiestas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy!

.. _py_pa_buz:

3.2 Tono Personalizado
==========================================

Hemos utilizado un zumbador activo en el proyecto anterior, esta vez usaremos un zumbador pasivo.

Al igual que el zumbador activo, el zumbador pasivo tambi√©n utiliza el fen√≥meno de inducci√≥n electromagn√©tica para funcionar. La diferencia es que un zumbador pasivo no tiene fuente oscilante, por lo que no emitir√° un pitido si se utilizan se√±ales de CC.
Pero esto permite que el zumbador pasivo ajuste su propia frecuencia de oscilaci√≥n y pueda emitir diferentes notas como "do, re, mi, fa, sol, la, si".

¬°Hagamos que el zumbador pasivo emita una melod√≠a!

**Componentes Requeridos**

Para este proyecto, necesitamos los siguientes componentes.

Definitivamente es conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit de Inicio ESP32
        - 320+
        - |link_esp32_starter_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - \-
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

**Pines Disponibles**

Aqu√≠ hay una lista de pines disponibles en la placa ESP32 para este proyecto.

.. list-table::
    :widths: 5 20 

    * - Pines Disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

**Esquem√°tico**

.. image:: ../../img/circuit/circuit_3.1_buzzer.png
    :width: 500
    :align: center

Cuando la salida IO14 es alta, despu√©s de la resistencia limitadora de corriente de 1K (para proteger el transistor), el S8050 (transistor NPN) conducir√°, haciendo que el zumbador suene.

El papel de S8050 (transistor NPN) es amplificar la corriente y hacer que el zumbador suene m√°s fuerte. De hecho, tambi√©n puedes conectar el zumbador directamente a IO14, pero encontrar√°s que el sonido del zumbador es m√°s bajo.

**Conexi√≥n**

El kit incluye dos tipos de zumbadores.
Necesitamos usar el zumbador activo. Volt√©alos, el lado sellado (no el PCB expuesto) es el que queremos.

.. image:: ../../components/img/buzzer.png
    :width: 500
    :align: center

El zumbador necesita usar un transistor cuando funciona, aqu√≠ usamos S8050 (Transistor NPN).

.. image:: ../../img/wiring/3.1_buzzer_bb.png

**C√≥digo**

.. note::

    * Abre el archivo ``3.2_custom_tone.py`` ubicado en la ruta ``esp32-starter-kit-main\micropython\codes`` o copia y pega el c√≥digo en Thonny. Luego, haz clic en "Ejecutar script actual" o presiona F5 para ejecutarlo.
    * Aseg√∫rate de seleccionar el int√©rprete "MicroPython (ESP32).COMxx" en la esquina inferior derecha. 

.. code-block:: python

    import machine
    import time

    # Define the frequencies of several musical notes in Hz
    C4 = 262
    D4 = 294
    E4 = 330
    F4 = 349
    G4 = 392
    A4 = 440
    B4 = 494

    # Create a PWM object representing pin 14 and assign it to the buzzer variable
    buzzer = machine.PWM(machine.Pin(14))

    # Define a tone function that takes as input a Pin object representing the buzzer, a frequency in Hz, and a duration in milliseconds
    def tone(pin, frequency, duration):
        pin.freq(frequency) # Set the frequency
        pin.duty(512) # Set the duty cycle
        time.sleep_ms(duration) # Pause for the duration in milliseconds
        pin.duty(0) # Set the duty cycle to 0 to stop the tone

    # Play a sequence of notes with different frequency inputs and durations
    tone(buzzer, C4, 250)
    time.sleep_ms(500)
    tone(buzzer, D4, 250)
    time.sleep_ms(500)
    tone(buzzer, E4, 250)
    time.sleep_ms(500)
    tone(buzzer, F4, 250)
    time.sleep_ms(500)
    tone(buzzer, G4, 250)
    time.sleep_ms(500)
    tone(buzzer, A4, 250)
    time.sleep_ms(500)
    tone(buzzer, B4, 250)


**¬øC√≥mo funciona?**

Si al zumbador pasivo se le da una se√±al digital, solo puede continuar empujando el diafragma sin producir sonido.

Por lo tanto, utilizamos la funci√≥n ``tone()`` para generar la se√±al PWM y hacer que el zumbador pasivo emita sonido.

Esta funci√≥n tiene tres par√°metros:

* ``pin``: El pin que controla el zumbador.
* ``frecuencia``: El tono del zumbador est√° determinado por la frecuencia; cuanto mayor sea la frecuencia, m√°s alto ser√° el tono.
* ``Duraci√≥n``: La duraci√≥n del tono.

Usamos la funci√≥n ``duty()`` para establecer el ciclo de trabajo en 512 (alrededor del 50%). Puede ser otros n√∫meros, y solo necesita generar una se√±al el√©ctrica discontinua para oscilar.



**Aprender M√°s**



Podemos simular tonos espec√≠ficos y as√≠ reproducir una pieza musical completa.


.. note::

    * Abre el archivo ``3.2_custom_tone_music.py`` ubicado en el camino ``esp32-starter-kit-main\micropython\codes``, o copia y pega el c√≥digo en Thonny. Luego, haz clic en "Ejecutar script actual" o presiona F5 para ejecutarlo.
    * Aseg√∫rate de seleccionar el int√©rprete "MicroPython (ESP32).COMxx" en la esquina inferior derecha.



.. code-block:: python

    import machine
    import time

    # Define the GPIO pin that is connected to the buzzer
    buzzer = machine.PWM(machine.Pin(14))

    # Define the frequencies of the notes in Hz
    C5 = 523
    D5 = 587
    E5 = 659
    F5 = 698
    G5 = 784
    A5 = 880
    B5 = 988

    # Define the durations of the notes in milliseconds
    quarter_note = 250
    half_note = 300
    whole_note = 1000

    # Define the melody as a list of tuples (note, duration)
    melody = [
        (E5, quarter_note),
        (E5, quarter_note),
        (F5, quarter_note),
        (G5, half_note),
        (G5, quarter_note),
        (F5, quarter_note),
        (E5, quarter_note),
        (D5, half_note),
        (C5, quarter_note),
        (C5, quarter_note),
        (D5, quarter_note),
        (E5, half_note),
        (E5, quarter_note),
        (D5, quarter_note),
        (D5, half_note),
        (E5, quarter_note),
        (E5, quarter_note),
        (F5, quarter_note),
        (G5, half_note),
        (G5, quarter_note),
        (F5, quarter_note),
        (E5, quarter_note),
        (D5, half_note),
        (C5, quarter_note),
        (C5, quarter_note),
        (D5, quarter_note),
        (E5, half_note),
        (D5, quarter_note),
        (C5, quarter_note),
        (C5, half_note),

    ]

    # Define a function to play a note with the given frequency and duration
    def tone(pin,frequency,duration):
        pin.freq(frequency)
        pin.duty(512)
        time.sleep_ms(duration)
        pin.duty(0)

    # Play the melody
    for note in melody:
        tone(buzzer, note[0], note[1])
        time.sleep_ms(50)


* La funci√≥n ``tone`` establece la frecuencia del pin al valor de ``frecuencia`` usando el m√©todo ``freq`` del objeto ``pin``.
* Luego establece el ciclo de trabajo del pin en 512 usando el m√©todo ``duty`` del objeto ``pin``.
* Esto har√° que el pin produzca un tono con la frecuencia y volumen especificados durante la duraci√≥n de ``duraci√≥n`` en milisegundos usando el m√©todo ``sleep_ms`` del m√≥dulo de tiempo.
* El c√≥digo luego reproduce una melod√≠a iterando a trav√©s de una secuencia llamada ``melody`` y llamando a la funci√≥n ``tone`` para cada nota en la melod√≠a con la frecuencia y duraci√≥n de la nota.
* Tambi√©n inserta una breve pausa de 50 milisegundos entre cada nota usando el m√©todo ``sleep_ms`` del m√≥dulo de tiempo.
