.. note::

    Bonjour, bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez & Partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos nouveaux produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_74hc595:

2.4 Microchip - 74HC595
===========================

Bienvenue dans ce projet passionnant ! Dans ce projet, nous allons utiliser la puce 74HC595 pour contr√¥ler un affichage d√©roulant de 8 LED.

Imaginez d√©clencher ce projet et assister √† un flux de lumi√®re fascinant, comme un arc-en-ciel scintillant sautant entre les 8 LED. Chaque LED s'allumera une par une puis s'√©teindra rapidement, tandis que la LED suivante continuera de briller, cr√©ant un effet magnifique et dynamique.

En utilisant habilement la puce 74HC595, nous pouvons contr√¥ler l'√©tat de marche et d'arr√™t de plusieurs LED pour obtenir cet effet de flux. Cette puce poss√®de plusieurs broches de sortie qui peuvent √™tre connect√©es en s√©rie pour contr√¥ler la s√©quence d'illumination des LED. De plus, gr√¢ce √† l'extensibilit√© de la puce, nous pouvons facilement ajouter plus de LED √† l'affichage d√©roulant, cr√©ant ainsi des effets encore plus spectaculaires.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|

**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Sch√©ma**

.. image:: ../../img/circuit/circuit_2.4_74hc595_led.png
    :width: 600

* Lorsque MR (broche 10) est au niveau haut et CE (broche 13) est au niveau bas, les donn√©es sont entr√©es sur le front montant de SHcp et vont au registre de m√©moire via le front montant de SHcp. 
* Si les deux horloges sont connect√©es ensemble, le registre √† d√©calage est toujours une impulsion en avance sur le registre de m√©moire. 
* Il y a une broche d'entr√©e de d√©calage s√©rie (DS), une broche de sortie s√©rie (Q7') et un bouton de r√©initialisation asynchrone (niveau bas) dans le registre de m√©moire. 
* Le registre de m√©moire sort un bus avec un parall√®le 8 bits et en trois √©tats. 
* Lorsque OE est activ√© (niveau bas), les donn√©es dans le registre de m√©moire sont sorties vers le bus (Q0 ~ Q7).

**C√¢blage**

.. image:: ../../img/wiring/2.4_74hc595_bb.png
    :width: 800

**Code**

.. note::

    * Ouvrez le fichier ``2.4_microchip_74hc595.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 



.. code-block:: python

    import machine
    import time

    # Initialiser les broches pour le registre √† d√©calage 74HC595
    sdi = machine.Pin(25, machine.Pin.OUT)  # DS
    rclk = machine.Pin(27, machine.Pin.OUT)  # STcp
    srclk = machine.Pin(26, machine.Pin.OUT)  # SHcp

    # D√©finir la fonction hc595_shift pour d√©caler les donn√©es dans le registre √† d√©calage 74HC595
    def hc595_shift(dat):
        # Mettre la broche RCLK √† bas
        rclk.off()
        
        # It√©rer √† travers chaque bit (de 7 √† 0)
        for bit in range(7, -1, -1):
            # Extraire le bit actuel des donn√©es d'entr√©e
            value = 1 & (dat >> bit)
            
            # Mettre la broche SRCLK √† bas
            srclk.off()
            
            # D√©finir la valeur de la broche SDI
            sdi.value(value)
            
            # Synchroniser le bit actuel dans le registre √† d√©calage en mettant la broche SRCLK √† haut
            srclk.on()
            
        # Verrouiller les donn√©es dans le registre de stockage en mettant la broche RCLK √† haut
        rclk.on()

    num = 0

    # D√©caler les donn√©es dans le 74HC595 pour cr√©er un motif de LED en mouvement
    for i in range(16):
        if i < 8:
            num = (num << 1) + 1  # D√©calage vers la gauche et d√©finir le bit de poids faible √† 1
        elif i >= 8:
            num = (num & 0b01111111) << 1  # Masquer le bit de poids fort et d√©caler vers la gauche
        hc595_shift(num)  # D√©caler la valeur actuelle dans le 74HC595
        print("{:0>8b}".format(num))  # Afficher la valeur actuelle au format binaire
        time.sleep_ms(200)  # Attendre 200 millisecondes avant de d√©caler la valeur suivante




Pendant l'ex√©cution du script, vous verrez les LED s'allumer une par une, puis s'√©teindre dans l'ordre initial.

**Comment √ßa marche ?**

Ce code est utilis√© pour contr√¥ler un registre √† d√©calage 8 bits (74595) et sortir diff√©rentes valeurs binaires vers le registre √† d√©calage, chaque valeur √©tant affich√©e sur une LED pendant une certaine p√©riode de temps.

#. Le code importe les modules ``machine`` et ``time``, o√π le module ``machine`` est utilis√© pour contr√¥ler les E/S mat√©rielles et le module ``time`` est utilis√© pour impl√©menter des d√©lais et d'autres fonctions.

    .. code-block:: python

        import machine
        import time

#. Trois ports de sortie sont initialis√©s √† l'aide de la fonction ``machine.Pin()``, correspondant au port de donn√©es (SDI), au port d'horloge de stockage (RCLK) et au port d'horloge du registre √† d√©calage (SRCLK) du registre √† d√©calage.

    .. code-block:: python

        # Initialiser les broches pour le registre √† d√©calage 74HC595
        sdi = machine.Pin(25, machine.Pin.OUT)  # DS
        rclk = machine.Pin(27, machine.Pin.OUT)  # STcp
        srclk = machine.Pin(26, machine.Pin.OUT)  # SHcp

#. Une fonction appel√©e ``hc595_shift()`` est d√©finie pour √©crire des donn√©es de 8 bits dans le registre √† d√©calage.

    .. code-block:: python

        def hc595_shift(dat):
            # Mettre la broche RCLK √† bas
            rclk.off()
            
            # It√©rer √† travers chaque bit (de 7 √† 0)
            for bit in range(7, -1, -1):
                # Extraire le bit actuel des donn√©es d'entr√©e
                value = 1 & (dat >> bit)
                
                # Mettre la broche SRCLK √† bas
                srclk.off()
                
                # D√©finir la valeur de la broche SDI
                sdi.value(value)
                
                # Synchroniser le bit actuel dans le registre √† d√©calage en mettant la broche SRCLK √† haut
                srclk.on()
                
            # Verrouiller les donn√©es dans le registre de stockage en mettant la broche RCLK √† haut
            rclk.on()

#. √Ä propos de la boucle ``for``.

    .. code-block:: python

        for i in range(16):
                if i < 8:
                    num = (num << 1) + 1  # D√©calage vers la gauche et d√©finir le bit de poids faible √† 1
                elif i >= 8:
                    num = (num & 0b01111111) << 1  # Masquer le bit de poids fort et d√©caler vers la gauche
                hc595_shift(num)  # D√©caler la valeur actuelle dans le 74HC595
                print("{:0>8b}".format(num))  # Afficher la valeur actuelle au format binaire
                time.sleep_ms(200)  # Attendre 200 millisecondes avant de d√©caler la valeur suivante

    * La variable ``i`` est utilis√©e pour contr√¥ler la valeur binaire de sortie. Lors des 8 premi√®res it√©rations, la valeur de num sera successivement 00000001, 00000011, 00000111, ..., 11111111, qui est d√©cal√©e d'un bit vers la gauche puis ajout√©e de 1.
    * Lors des 9e √† 16e it√©rations, le bit de poids fort de 1 est d'abord chang√© en 0, puis d√©cal√© d'un bit vers la gauche, ce qui donne les valeurs de sortie 00000010, 00000100, 00001000, ..., 10000000.
    * √Ä chaque it√©ration, la valeur de ``num`` est pass√©e √† la fonction ``hc595_shift()`` pour contr√¥ler le registre √† d√©calage afin de sortir la valeur binaire correspondante.
    * En m√™me temps que la sortie de la valeur binaire, la fonction ``print()`` sort la valeur binaire sous forme de cha√Æne dans le terminal.
    * Apr√®s avoir sorti la valeur binaire, le programme fait une pause de 200 millisecondes en utilisant la fonction ``time.sleep_ms()``, afin que la valeur sur la LED reste affich√©e pendant une certaine p√©riode de temps.
