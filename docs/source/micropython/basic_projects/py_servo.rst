.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_servo:

4.3 Servomoteur oscillant
==============================

Un servomoteur est un dispositif de positionnement connu pour sa capacit√© √† maintenir des angles sp√©cifiques et √† offrir une rotation pr√©cise. Cela le rend tr√®s recherch√© pour les syst√®mes de contr√¥le n√©cessitant des ajustements d'angle constants. Il n'est donc pas surprenant que les servomoteurs soient largement utilis√©s dans les jouets t√©l√©command√©s haut de gamme, des mod√®les d'avion aux r√©pliques de sous-marins en passant par les robots t√©l√©command√©s sophistiqu√©s.

Dans cette aventure captivante, nous nous lancerons le d√©fi de manipuler le servomoteur d'une mani√®re unique - en le faisant osciller ! Ce projet offre une excellente occasion d'explorer la dynamique des servomoteurs, d'affiner vos comp√©tences en syst√®mes de contr√¥le pr√©cis et de mieux comprendre leur fonctionnement.

√ätes-vous pr√™t √† faire danser le servomoteur √† votre rythme ? Embarquons pour ce voyage excitant !

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_servo`
        - |link_servo_buy|

**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Sch√©ma**

.. image:: ../../img/circuit/circuit_4.3_servo.png

**C√¢blage**

* Le fil orange est le signal et est connect√© √† IO25.
* Le fil rouge est le VCC et est connect√© √† 5V.
* Le fil marron est la masse (GND) et est connect√© √† GND.

.. image:: ../../img/wiring/4.3_swinging_servo_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``4.3_swinging_servo.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 




.. code-block:: python

    import machine
    import time

    # Cr√©er un objet PWM (Pulse Width Modulation) sur la broche 25
    servo = machine.PWM(machine.Pin(25))

    # D√©finir la fr√©quence du signal PWM √† 50 Hz, commun pour les servomoteurs
    servo.freq(50)

    # D√©finir une fonction de mappage d'intervalle
    def interval_mapping(x, in_min, in_max, out_min, out_max):
        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

    # D√©finir une fonction pour √©crire un angle sur le servomoteur
    def servo_write(pin, angle):
        pulse_width = interval_mapping(angle, 0, 180, 0.5, 2.5) # Calculer la largeur d'impulsion
        duty = int(interval_mapping(pulse_width, 0, 20, 0, 1023)) # Calculer le cycle de service
        pin.duty(duty) # D√©finir le cycle de service du signal PWM

    # Cr√©er une boucle infinie
    while True:
        # Boucler √† travers les angles de 0 √† 180 degr√©s
        for angle in range(180):
            servo_write(servo, angle)
            time.sleep_ms(20)

        # Boucler √† travers les angles de 180 √† 0 degr√©s en sens inverse
        for angle in range(180, -1, -1):
            servo_write(servo, angle)
            time.sleep_ms(20)

Lorsque ce code est ex√©cut√©, le servomoteur balayera continuellement d'avant en arri√®re entre 0 et 180 degr√©s.

**Comment √ßa marche ?**

#. Importer les biblioth√®ques n√©cessaires : ``machine`` pour contr√¥ler le mat√©riel du microcontr√¥leur et ``time`` pour ajouter des d√©lais.

    .. code-block:: python

        import machine
        import time

#. Cr√©er un objet PWM (Pulse Width Modulation) sur la broche 25 et d√©finir sa fr√©quence √† 50 Hz, courante pour les servomoteurs.

    .. code-block:: python

        # Cr√©er un objet PWM (Pulse Width Modulation) sur la broche 25
        servo = machine.PWM(machine.Pin(25))

        # D√©finir la fr√©quence du signal PWM √† 50 Hz, commun pour les servomoteurs
        servo.freq(50)

#. D√©finir une fonction ``interval_mapping`` pour mapper les valeurs d'une plage √† une autre. Cela sera utilis√© pour convertir l'angle en largeur d'impulsion et en cycle de service appropri√©s.

    .. code-block:: python

        def interval_mapping(x, in_min, in_max, out_min, out_max):
            return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

#. D√©finir une fonction ``servo_write`` qui prend un objet PWM et un angle comme entr√©es. Elle calcule la largeur d'impulsion et le cycle de service en fonction de l'angle donn√©, puis r√®gle la sortie PWM en cons√©quence.

    .. code-block:: python
        
        def servo_write(pin, angle):
            pulse_width = interval_mapping(angle, 0, 180, 0.5, 2.5) # Calculer la largeur d'impulsion
            duty = int(interval_mapping(pulse_width, 0, 20, 0, 1023)) # Calculer le cycle de service
            pin.duty(duty) # D√©finir le cycle de service du signal PWM

    * Dans cette fonction, ``interval_mapping()`` est appel√© pour mapper la plage d'angle de 0 √† 180 √† la plage de largeur d'impulsion de 0,5 √† 2,5 ms.
    * Pourquoi 0,5~2,5 ms ? Cela est d√©termin√© par le mode de fonctionnement du :ref:`Servo`.
    * Ensuite, convertir la largeur d'impulsion de la p√©riode en cycle de service.
    * Comme ``duty()`` ne peut pas avoir de d√©cimales lors de son utilisation (la valeur ne peut pas √™tre de type float), nous avons utilis√© ``int()`` pour forcer la conversion de la largeur d'impulsion en type int.

#. Cr√©er une boucle infinie avec deux boucles imbriqu√©es.

    .. code-block:: python

        while True:
            # Boucler √† travers les angles de 0 √† 180 degr√©s
            for angle in range(180):
                servo_write(servo, angle)
                time.sleep_ms(20)

            # Boucler √† travers les angles de 180 √† 0 degr√©s en sens inverse
            for angle in range(180, -1, -1):
                servo_write(servo, angle)
                time.sleep_ms(20)

    * La premi√®re boucle imbriqu√©e parcourt les angles de 0 √† 180 degr√©s, et la seconde boucle imbriqu√©e parcourt les angles de 180 √† 0 degr√©s en sens inverse.
    * √Ä chaque it√©ration, la fonction ``servo_write`` est appel√©e avec l'angle actuel, et un d√©lai de 20 millisecondes est ajout√©.
