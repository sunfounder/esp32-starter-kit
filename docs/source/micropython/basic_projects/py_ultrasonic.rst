.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_ultrasonic:

5.12 Mesure de distance
======================================

Le module ultrasonique est utilis√© pour la mesure de distance ou la d√©tection d'objets. Dans ce projet, nous allons programmer le module pour obtenir les distances des obstacles. En envoyant des impulsions ultrasoniques et en mesurant le temps qu'elles mettent pour rebondir, nous pouvons calculer les distances. Cela nous permet de mettre en ≈ìuvre des actions bas√©es sur la distance ou des comportements d'√©vitement d'obstacles.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_ultrasonic`
        - |link_ultrasonic_buy|

**Broches disponibles**

* **Broches disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 20

        *   - Pour entr√©e
            - IO13, IO14, IO27, IO26, IO25, IO33, IO32, I35, I34, I39, I36, IO4, IO18, IO19, IO21, IO22, IO23
        *   - Pour sortie
            - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.12_ultrasonic.png

L'ESP32 envoie une s√©rie de signaux carr√©s √† la broche Trig du capteur ultrasonique toutes les 10 secondes. Cela incite le capteur ultrasonique √† √©mettre un signal ultrasonique de 40 kHz. S'il y a un obstacle devant, les ondes ultrasoniques seront r√©fl√©chies.

En enregistrant le temps √©coul√© entre l'envoi et la r√©ception du signal, en le divisant par 2 et en le multipliant par la vitesse du son, vous pouvez d√©terminer la distance de l'obstacle.

**C√¢blage**

.. image:: ../../img/wiring/5.12_ultrasonic_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``5.12_ultrasonic.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit.

.. code-block:: python

    import machine
    import time

    # D√©finir les broches de d√©clenchement et d'√©cho pour le capteur de distance
    TRIG = machine.Pin(26, machine.Pin.OUT)
    ECHO = machine.Pin(25, machine.Pin.IN)

    # Calculer la distance √† l'aide du capteur ultrasonique
    def distance():
        # Assurez-vous que le d√©clencheur est initialement √©teint
        TRIG.off()
        time.sleep_us(2)  # Attendre 2 microsecondes

        # Envoyer une impulsion de 10 microsecondes √† la broche de d√©clenchement
        TRIG.on()
        time.sleep_us(10)
        TRIG.off()

        # Attendre que la broche d'√©cho passe √† l'√©tat haut
        while not ECHO.value():
            pass

        # Enregistrer le temps lorsque la broche d'√©cho passe √† l'√©tat haut
        time1 = time.ticks_us()

        # Attendre que la broche d'√©cho passe √† l'√©tat bas
        while ECHO.value():
            pass

        # Enregistrer le temps lorsque la broche d'√©cho passe √† l'√©tat bas
        time2 = time.ticks_us()

        # Calculer la diff√©rence de temps entre les deux temps enregistr√©s
        during = time.ticks_diff(time2, time1)

        # Calculer et retourner la distance (en cm) en utilisant la vitesse du son (340 m/s)
        return during * 340 / 2 / 10000

    # Mesurer et afficher continuellement la distance
    while True:
        dis = distance()
        print('Distance: %.2f' % dis)
        time.sleep_ms(300)  # Attendre 300 millisecondes avant de r√©p√©ter

Une fois le programme en cours d'ex√©cution, le Shell affichera la distance entre le capteur ultrasonique et l'obstacle devant lui.
