.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_guess_number:

6.7 Devine le Nombre
==============================

Vous vous sentez chanceux ? Voulez-vous tester votre intuition et voir si vous pouvez deviner le bon num√©ro ? Alors, ne cherchez pas plus loin que le jeu Devine le Nombre ! 

Avec ce projet, vous pouvez jouer √† un jeu de hasard amusant et excitant.

En utilisant une t√©l√©commande IR, les joueurs saisissent des chiffres entre 0 et 99 pour essayer de deviner le num√©ro chanceux g√©n√©r√© al√©atoirement. 
Le syst√®me affiche le num√©ro saisi par le joueur sur un √©cran LCD, avec des indications de limites sup√©rieures et inf√©rieures pour guider le joueur vers la bonne r√©ponse. √Ä chaque tentative, les joueurs se rapprochent du num√©ro chanceux, 
jusqu'√† ce que finalement, quelqu'un touche le jackpot et gagne la partie !

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_receiver`
        - |link_receiver_buy|
    *   - :ref:`cpn_lcd`
        - |link_i2clcd1602_buy|


**Sch√©ma**

.. image:: ../../img/circuit/circuit_6.7_guess_number.png

**C√¢blage**

.. image:: ../../img/wiring/6.7_guess_receiver_bb.png
    :width: 800

**Code**

.. note::

    * Ouvrez le fichier ``6.7_game_guess_number.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 
    * Les biblioth√®ques ``lcd1602.py`` et ``ir_rx`` sont utilis√©es ici et v√©rifiez si elles sont t√©l√©charg√©es sur l'ESP32. Reportez-vous √† :ref:`add_libraries_py` pour un tutoriel.

.. code-block:: python

    from lcd1602 import LCD
    import machine
    import time
    import urandom
    from machine import Pin
    from ir_rx.print_error import print_error
    from ir_rx.nec import NEC_8

    # Configuration du r√©cepteur IR
    pin_ir = Pin(14, Pin.IN)

    # Initialisation des variables du jeu de devinettes
    lower = 0
    upper = 99
    pointValue = int(urandom.uniform(lower, upper))
    count = 0

    # Initialisation de l'affichage LCD1602
    lcd = LCD()

    # Initialiser une nouvelle valeur al√©atoire pour le jeu
    def init_new_value():
        global pointValue, upper, lower, count
        pointValue = int(urandom.uniform(lower, upper))
        print(pointValue)
        upper = 99
        lower = 0
        count = 0
        return False

    # Afficher les messages sur le LCD en fonction de l'√©tat du jeu
    def lcd_show(result):
        global count
        lcd.clear()
        if result == True: 
            string = "GAME OVER!\n"
            string += "Point is " + str(pointValue)
        else: 
            string = "Enter number: " + str(count) + "\n"
            string += str(lower) + " < Point < " + str(upper)
        lcd.message(string)
        return

    # Traiter le num√©ro saisi et mettre √† jour l'√©tat du jeu
    def number_processing():
        global upper, count, lower
        if count > pointValue:
            if count < upper:
                upper = count
        elif count < pointValue:
            if count > lower:
                lower = count
        elif count == pointValue:
            return True
        count = 0
        return False

    # Traiter les entr√©es de touches de la t√©l√©commande IR
    def process_key(key):
        global count, lower, upper, pointValue, result
        if key == "Power":
            init_new_value()
            lcd_show(False)
        elif key == "+":
            result = number_processing()
            lcd_show(result)
            if result:
                time.sleep(5)
                init_new_value()
                lcd_show(False)
            else:
                lcd_show(False)
        elif key.isdigit():
            count = count * 10 + int(key) if count * 10 + int(key) <= 99 else count
            lcd_show(False)

    # D√©coder les donn√©es re√ßues et retourner le nom de la touche correspondante
    def decodeKeyValue(data):       
        if data == 0x16:
            return "0"
        if data == 0x0C:
            return "1"
        if data == 0x18:
            return "2"
        if data == 0x5E:
            return "3"
        if data == 0x08:
            return "4"
        if data == 0x1C:
            return "5"
        if data == 0x5A:
            return "6"
        if data == 0x42:
            return "7"
        if data == 0x52:
            return "8"
        if data == 0x4A:
            return "9"
        if data == 0x09:
            return "+"
        if data == 0x15:
            return "-"
        if data == 0x7:
            return "EQ"
        if data == 0x0D:
            return "U/SD"
        if data == 0x19:
            return "CYCLE"
        if data == 0x44:
            return "PLAY/PAUSE"
        if data == 0x43:
            return "FORWARD"
        if data == 0x40:
            return "BACKWARD"
        if data == 0x45:
            return "POWER"
        if data == 0x47:
            return "MUTE"
        if data == 0x46:
            return "MODE"
        return "ERROR"

    def callback(data, addr, ctrl):
        if data < 0:
            pass
        else:
            key = decodeKeyValue(data)
            if key != "ERROR":
                process_key(key)

    # Initialiser l'objet r√©cepteur IR avec la fonction de rappel
    ir = NEC_8(pin_ir, callback)

    # ir.error_function(print_error)

    # Initialiser le jeu avec une nouvelle valeur al√©atoire
    init_new_value()

    # Afficher l'√©tat initial du jeu sur le LCD
    lcd_show(False)

    try:
        while True:
            pass
    except KeyboardInterrupt:
        ir.close()



* Lorsque le code s'ex√©cute, un num√©ro secret est produit mais non affich√© sur le LCD, et ce que vous devez faire est de le deviner. 
* Appuyez sur le num√©ro que vous avez devin√© sur la t√©l√©commande, puis appuyez sur la touche ``+`` pour confirmer.
* Simultan√©ment, la plage affich√©e sur le LCD I2C1602 diminuera, et vous devrez appuyer sur le num√©ro appropri√© en fonction de cette nouvelle plage.
* Si vous avez trouv√© le num√©ro chanceux, ``GAME OVER!`` appara√Ætra.

.. note:: 

    Si le code et le c√¢blage sont corrects, mais que le LCD n'affiche toujours aucun contenu, vous pouvez ajuster le potentiom√®tre √† l'arri√®re pour augmenter le contraste.

**Comment √ßa marche ?**

Voici une analyse d√©taill√©e d'une partie du code.

#. Initialiser les variables du jeu de devinettes.

    .. code-block:: python
    
        lower = 0
        upper = 99
        pointValue = int(urandom.uniform(lower, upper))
        count = 0


    * Limites ``lower`` et ``upper`` pour le num√©ro secret.
    * Le num√©ro secret (``pointValue``) g√©n√©r√© al√©atoirement entre les limites ``lower`` et ``upper``.
    * La devinette actuelle de l'utilisateur (``count``).

#. Cette fonction r√©initialise les valeurs du jeu de devinettes et g√©n√®re un nouveau num√©ro secret.

    .. code-block:: python
    
        def init_new_value():
            global pointValue, upper, lower, count
            pointValue = int(urandom.uniform(lower, upper))
            print(pointValue)
            upper = 99
            lower = 0
            count = 0
            return False

#. Cette fonction affiche l'√©tat actuel du jeu sur l'√©cran LCD.

    .. code-block:: python

        def lcd_show(result):
            global count
            lcd.clear()
            if result == True: 
                string = "GAME OVER!\n"
                string += "Point is " + str(pointValue)
            else: 
                string = "Enter number: " + str(count) + "\n"
                string += str(lower) + " < Point < " + str(upper)
            lcd.message(string)
            return

    * Si le jeu est termin√© (``result=True``), il affiche ``GAME OVER!`` et le num√©ro secret.
    * Sinon, il affiche la devinette actuelle (``count``) et la plage de devinettes actuelle (``lower`` √† ``upper``)

#. Cette fonction traite la devinette actuelle de l'utilisateur (``count``) et met √† jour la plage de devinettes.

    .. code-block:: python

        def number_processing():
            global upper, count, lower
            if count > pointValue:
                if count < upper:
                    upper = count
            elif count < pointValue:
                if count > lower:
                    lower = count
            elif count == pointValue:
                return True
            count = 0
            return False
    
    * Si la devinette actuelle (``count``) est sup√©rieure au num√©ro secret, la limite sup√©rieure est mise √† jour.
    * Si la devinette actuelle (``count``) est inf√©rieure au num√©ro secret, la limite inf√©rieure est mise √† jour.
    * Si la devinette actuelle (``count``) est √©gale au num√©ro secret, la fonction retourne ``True`` (jeu termin√©).

#. Cette fonction traite les √©v√©nements de touche re√ßus de la t√©l√©commande IR.

    .. code-block:: python

        def process_key(key):
            global count, lower, upper, pointValue, result
            if key == "Power":
                init_new_value()
                lcd_show(False)
            elif key == "+":
                result = number_processing()
                lcd_show(result)
                if result:
                    time.sleep(5)
                    init_new_value()
                    lcd_show(False)
                else:
                    lcd_show(False)
            elif key.isdigit():
                count = count * 10 + int(key) if count * 10 + int(key) <= 99 else count
                lcd_show(False)

    * Si la touche ``Power`` est press√©e, le jeu est r√©initialis√©.
    * Si la touche ``+`` est press√©e, la devinette actuelle (``count``) est trait√©e et l'√©tat du jeu est mis √† jour.
    * Si une touche num√©rique est press√©e, la devinette actuelle (``count``) est mise √† jour avec le nouveau chiffre.

#. Cette fonction de rappel est d√©clench√©e lorsque le r√©cepteur IR re√ßoit des donn√©es.

    .. code-block:: python

        def callback(data, addr, ctrl):
            if data < 0:
                pass
            else:
                key = decodeKeyValue(data)
                if key != "ERROR":
                    process_key(key)
