.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_joystick:

5.11 Manipuler le Joystick
================================

Si vous jouez beaucoup aux jeux vid√©o, alors vous devriez √™tre tr√®s familier avec le Joystick.
Il est g√©n√©ralement utilis√© pour d√©placer le personnage, faire tourner l'√©cran, etc.

Le principe qui permet au Joystick de transmettre nos actions √† l'ordinateur est tr√®s simple.
On peut le consid√©rer comme √©tant compos√© de deux potentiom√®tres perpendiculaires l'un √† l'autre.
Ces deux potentiom√®tres mesurent la valeur analogique du joystick verticalement et horizontalement, r√©sultant en une valeur (x,y) dans un syst√®me de coordonn√©es planes.

Le joystick de ce kit poss√®de √©galement une entr√©e num√©rique, qui est activ√©e lorsque le joystick est press√©.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_joystick`
        - |link_joystick_buy|

* **Broches disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 15

        *   - Pour entr√©e analogique
            - IO14, IO25, I35, I34, I39, I36
        *   - Pour entr√©e num√©rique
            - IO13, IO14, IO27, IO26, IO25, IO33, IO4, IO18, IO19, IO21, IO22, IO23

* **Broches de strap (entr√©e)**

    Les broches de strap sont un ensemble sp√©cial de broches utilis√©es pour d√©terminer des modes de d√©marrage sp√©cifiques lors du d√©marrage de l'appareil (c'est-√†-dire la r√©initialisation √† la mise sous tension).

    .. list-table::
        :widths: 5 15

        *   - Broches de strap
            - IO5, IO0, IO2, IO12, IO15 
    
    En g√©n√©ral, il n'est **pas recommand√© de les utiliser comme broches d'entr√©e**. Si vous souhaitez utiliser ces broches, tenez compte de l'impact potentiel sur le processus de d√©marrage. Pour plus de d√©tails, veuillez vous r√©f√©rer √† la section :ref:`esp32_strapping`.

**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.11_joystick.png

La broche SW (axe Z) est connect√©e √† IO33, qui a une r√©sistance de pull-up int√©gr√©e de 4,7K. Par cons√©quent, lorsque le bouton SW n'est pas press√©, il √©met un niveau haut. Lorsque le bouton est press√©, il √©met un niveau bas.

Les broches I34 et I35 changeront leurs valeurs en fonction de la manipulation du joystick. La plage de valeurs est de 0 √† 4095.

**C√¢blage**

.. image:: ../../img/wiring/5.11_joystick_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``5.11_joystick.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 

.. code-block:: python

    from machine import ADC, Pin
    import time

    xAxis = ADC(Pin(34, Pin.IN)) # cr√©er un objet ADC agissant sur une broche      
    xAxis.atten(xAxis.ATTN_11DB)
    yAxis = ADC(Pin(35, Pin.IN)) # cr√©er un objet ADC agissant sur une broche      
    yAxis.atten(yAxis.ATTN_11DB)
    button = Pin(33, Pin.IN, Pin.PULL_UP)

    while True:
        xValue = xAxis.read()  # lire une valeur analogique brute dans la plage 0-4095
        yValue = yAxis.read()  # lire une valeur analogique brute dans la plage 0-4095
        btnValue = button.value()
        print(f"X:{xValue}, Y:{yValue}, Button:{btnValue}")
        time.sleep(0.1)

Lorsque le programme s'ex√©cute, la Shell affiche les valeurs x, y et du bouton du joystick.

.. code-block:: 

    X:1921, Y:1775, Button:0
    X:1921, Y:1775, Button:0
    X:1923, Y:1775, Button:0
    X:1924, Y:1776, Button:0
    X:1926, Y:1777, Button:0
    X:1925, Y:1776, Button:0
    X:1924, Y:1776, Button:0


* Les valeurs des axes x et y sont des valeurs analogiques variant de 0 √† 4095.
* Le bouton est une valeur num√©rique avec un √©tat de 1 (rel√¢ch√©) ou 0 (press√©).

    .. image:: img/joystick_direction.png
