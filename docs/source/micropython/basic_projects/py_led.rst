.. note::

    Bonjour, bienvenue dans la communaut√© SunFounder Raspberry Pi & Arduino & ESP32 Enthusiasts sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_blink:

2.1 Bonjour, LED ! 
=======================================

Tout comme imprimer "Hello, world!" est la premi√®re √©tape pour apprendre √† programmer, utiliser un programme pour contr√¥ler une LED est l'introduction traditionnelle √† la programmation physique.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

**Sch√©ma**

.. image:: ../../img/circuit/circuit_2.1_led.png

Ce circuit fonctionne sur un principe simple, et la direction du courant est montr√©e sur la figure. La LED s'allumera apr√®s la r√©sistance de limitation de courant de 220 ohms lorsque la broche 26 sort un niveau haut. La LED s'√©teindra lorsque la broche 26 sort un niveau bas.

**C√¢blage**

.. image:: ../../img/wiring/2.1_hello_led_bb.png

**Ex√©cuter le code**

#. Ouvrez le fichier ``2.1_hello_led.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. 

    .. code-block:: python

        # Importer les biblioth√®ques n√©cessaires
        import machine
        import time

        # Configurer la LED sur la broche 26 comme broche de sortie
        led = machine.Pin(26, machine.Pin.OUT)

        # D√©marrer une boucle infinie
        while True:
            # Allumer la LED en r√©glant sa valeur √† 1 (HAUT)
            led.value(1)
            # Attendre 1 seconde (1000 millisecondes) pendant que la LED est allum√©e
            time.sleep(1)

            # √âteindre la LED en r√©glant sa valeur √† 0 (BAS)
            led.value(0)
            # Attendre 0,5 seconde (500 millisecondes) pendant que la LED est √©teinte
            time.sleep(0.5)

#. Connectez l'ESP32 WROOM 32E √† votre ordinateur √† l'aide d'un c√¢ble Micro USB. 

    .. image:: ../../img/plugin_esp32.png
        :width: 600
        :align: center

#. Ensuite, cliquez sur l'interpr√©teur "MicroPython (ESP32).COMXX" dans le coin inf√©rieur droit.

    .. image:: ../python_start/img/sec_inter.png

#. Enfin, cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.

    .. image:: ../python_start/img/quick_guide2.png

#. Apr√®s l'ex√©cution du code, vous verrez la LED clignoter.


**Comment √ßa fonctionne ?**

#. Il importe deux modules, ``machine`` et ``time``. Le module ``machine`` fournit un acc√®s de bas niveau au mat√©riel du microcontr√¥leur, tandis que le module ``time`` fournit des fonctions pour les op√©rations li√©es au temps.

    .. code-block:: python

        import machine
        import time

#. Ensuite, configurez la broche 26 comme broche de sortie en utilisant la fonction ``machine.Pin()`` avec l'argument ``machine.Pin.OUT``. 

    .. code-block:: python

        led = machine.Pin(26, machine.Pin.OUT)

#. Dans la boucle ``While True``, la LED est allum√©e pendant une seconde en r√©glant la valeur de la broche 26 √† 1 en utilisant ``led.value(1)`` et ensuite r√©gl√©e √† 0 (``led.value(0)``) pour l'√©teindre pendant une seconde, et ainsi de suite dans une boucle infinie.

    .. code-block:: python
        
        while True:
            # Allumer la LED en r√©glant sa valeur √† 1 (HAUT)
            led.value(1)
            # Attendre 1 seconde (1000 millisecondes) pendant que la LED est allum√©e
            time.sleep(1)

            # √âteindre la LED en r√©glant sa valeur √† 0 (BAS)
            led.value(0)
            # Attendre 0,5 seconde (500 millisecondes) pendant que la LED est √©teinte
            time.sleep(0.5)




**En savoir plus**

Dans ce projet, nous avons utilis√© les modules ``machine`` et ``time`` de MicroPython, vous pouvez trouver plus de fa√ßons de les utiliser ici.

* `machine.Pin <https://docs.micropython.org/en/latest/library/machine.Pin.html>`_

* `time <https://docs.micropython.org/en/latest/library/time.html>`_
