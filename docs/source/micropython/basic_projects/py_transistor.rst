.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_transistor:

5.6 Deux types de transistors
==========================================

Ce kit est √©quip√© de deux types de transistors, le S8550 et le S8050, le premier √©tant un PNP et le second un NPN. Ils se ressemblent beaucoup, et il faut les examiner attentivement pour voir leurs √©tiquettes.
Lorsqu'un signal de niveau haut traverse un transistor NPN, il est activ√©. Mais un transistor PNP n√©cessite un signal de niveau bas pour √™tre activ√©. Les deux types de transistors sont fr√©quemment utilis√©s pour des interrupteurs sans contact, comme dans cette exp√©rience.

Utilisons une LED et un bouton pour comprendre comment utiliser un transistor !

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants.

Il est certainement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

**Broches disponibles**

* **Broches disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 20

        *   - Pour entr√©e
            - IO14, IO25, I35, I34, I39, I36, IO18, IO19, IO21, IO22, IO23
        *   - Pour sortie
            - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

* **Broches d'utilisation conditionnelle (entr√©e)**

    Les broches suivantes ont des r√©sistances de pull-up ou pull-down int√©gr√©es, donc des r√©sistances externes ne sont pas n√©cessaires lorsque **vous les utilisez comme broches d'entr√©e** :

    .. list-table::
        :widths: 5 15
        :header-rows: 1

        *   - Broches d'utilisation conditionnelle
            - Description
        *   - IO13, IO15, IO2, IO4
            - Tirer vers le haut avec une r√©sistance de 47K par d√©faut.
        *   - IO27, IO26, IO33
            - Tirer vers le haut avec une r√©sistance de 4.7K par d√©faut.
        *   - IO32
            - Tirer vers le bas avec une r√©sistance de 1K par d√©faut.

* **Broches de strap (entr√©e)**

    Les broches de strap sont un ensemble sp√©cial de broches utilis√©es pour d√©terminer des modes de d√©marrage sp√©cifiques lors de la mise sous tension de l'appareil 
    (c'est-√†-dire r√©initialisation par mise sous tension).

    .. list-table::
        :widths: 5 15

        *   - Broches de strap
            - IO5, IO0, IO2, IO12, IO15 

    En g√©n√©ral, il est **non recommand√© de les utiliser comme broches d'entr√©e**. Si vous souhaitez utiliser ces broches, prenez en compte l'impact potentiel sur le processus de d√©marrage. Pour plus de d√©tails, veuillez vous r√©f√©rer √† la section :ref:`esp32_strapping`.


**Connexion du transistor NPN (S8050)**

.. image:: ../../img/circuit/circuit_5.6_S8050.png

Dans ce circuit, lorsque le bouton est press√©, IO14 est haut.

En programmant IO26 pour qu'il sorte un niveau **haut**, apr√®s une r√©sistance de limitation de courant de 1k (pour prot√©ger le transistor), le S8050 (transistor NPN) est autoris√© √† conduire, permettant ainsi √† la LED de s'allumer.

.. image:: ../../img/wiring/5.6_s8050_bb.png

**Connexion du transistor PNP (S8550)**

.. image:: ../../img/circuit/circuit_5.6_S8550.png

Dans ce circuit, IO14 est bas par d√©faut et passera √† haut lorsque le bouton est press√©.

En programmant IO26 pour qu'il sorte un niveau **bas**, apr√®s une r√©sistance de limitation de courant de 1k (pour prot√©ger le transistor), le S8550 (transistor PNP) est autoris√© √† conduire, permettant ainsi √† la LED de s'allumer.

La seule diff√©rence que vous remarquerez entre ce circuit et le pr√©c√©dent est que dans le circuit pr√©c√©dent, la cathode de la LED est connect√©e au **collecteur** du **S8050 (transistor NPN)**, tandis que dans celui-ci, elle est connect√©e √† l'**√©metteur** du **S8550 (transistor PNP)**.

.. image:: ../../img/wiring/5.6_s8550_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``5.6_transistor.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit.

.. code-block:: python

    import machine 

    button = machine.Pin(14, machine.Pin.IN)   # Bouton
    led = machine.Pin(26, machine.Pin.OUT)  # LED

    # D√©marrer une boucle infinie
    while True:  
        # Lire la valeur actuelle de l'objet 'button' (0 ou 1) et la stocker dans la variable 'button_status'
        button_status = button.value() 
        # Si le bouton est press√© (valeur est 1)
        if button_status == 1: 
            led.value(1) # Allumer la LED
        # Si le bouton n'est pas press√© (valeur est 0)
        else:       
            led.value(0) # √âteindre la LED

Les deux types de transistors peuvent √™tre contr√¥l√©s en utilisant le m√™me code.
Lorsque nous pressons le bouton, l'ESP32 enverra un signal de niveau haut au transistor ;
lorsque nous le rel√¢chons, il enverra un signal de niveau bas.

* Le circuit utilisant le S8050 (transistor NPN) s'allumera lorsque le bouton est press√©, indiquant qu'il est en √©tat de conduction de niveau haut ;
* Le circuit utilisant le S8550 (transistor PNP) s'allumera lorsque le bouton est rel√¢ch√©, indiquant qu'il est en √©tat de conduction de niveau bas.
