.. note::

    Bonjour, bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_dht11:

5.13 Temp√©rature - Humidit√©
=======================================
Le DHT11 est un capteur de temp√©rature et d'humidit√© couramment utilis√© pour les mesures environnementales. Il s'agit d'un capteur num√©rique qui communique avec un microcontr√¥leur pour fournir des relev√©s de temp√©rature et d'humidit√©.

Dans ce projet, nous allons lire les donn√©es du capteur DHT11 et afficher les valeurs de temp√©rature et d'humidit√© qu'il d√©tecte.

En lisant les donn√©es fournies par le capteur, nous pouvons obtenir les valeurs actuelles de la temp√©rature et de l'humidit√© dans l'environnement. Ces valeurs peuvent √™tre utilis√©es pour la surveillance en temps r√©el des conditions environnementales, les observations m√©t√©orologiques, le contr√¥le du climat int√©rieur, les rapports d'humidit√©, etc.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_dht11`
        - |link_dht11_buy|

* **Broches disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 20

        *   - Broches disponibles
            - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.13_dht11.png


**C√¢blage**

.. image:: ../../img/wiring/5.13_dht11_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``5.13_dht11.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 

.. code-block:: python

    import dht
    import machine
    import time

    # Initialiser le capteur DHT11 et le connecter √† la broche 14
    sensor = dht.DHT11(machine.Pin(14))

    # Boucle infinie pour mesurer continuellement la temp√©rature et l'humidit√©
    while True:
        try:
            # Mesurer la temp√©rature et l'humidit√©
            sensor.measure()

            # Obtenir les valeurs de temp√©rature et d'humidit√©
            temp = sensor.temperature()
            humi = sensor.humidity()

            # Afficher la temp√©rature et l'humidit√©
            print("Temperature: {}, Humidity: {}".format(temp, humi))

            # Attendre 1 seconde entre les mesures
            time.sleep(1)
        except Exception as e:
            print("Error: ", e)
            time.sleep(1)


Lorsque le code s'ex√©cute, vous verrez la console afficher continuellement la temp√©rature et l'humidit√©. Au fur et √† mesure que le programme tourne, ces deux valeurs deviendront de plus en plus pr√©cises.


**En savoir plus**

Vous pouvez √©galement afficher la temp√©rature et l'humidit√© sur l'√©cran LCD1602 I2C.

.. image:: ../../img/wiring/5.13_dht11_lcd_bb.png

.. note::

    * Ouvrez le fichier ``5.13_dht11_lcd.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 
    * Ici, vous devez utiliser la biblioth√®que appel√©e ``lcd1602.py``, veuillez v√©rifier si elle a √©t√© t√©l√©charg√©e sur l'ESP32. Pour un tutoriel d√©taill√©, consultez la section :ref:`add_libraries_py`.

.. code-block:: python

    import dht
    import machine
    import time
    from lcd1602 import LCD

    # Initialiser le capteur DHT11 et le connecter √† la broche 14
    sensor = dht.DHT11(machine.Pin(14))

    # Initialiser l'√©cran LCD1602
    lcd = LCD()

    # Boucle pour mesurer la temp√©rature et l'humidit√©
    while True:
        try:
            # Mesurer la temp√©rature et l'humidit√©
            sensor.measure()

            # Obtenir les valeurs de temp√©rature et d'humidit√©
            temp = sensor.temperature()
            humi = sensor.humidity()

            # Afficher la temp√©rature et l'humidit√©
            print("Temperature: {}, Humidity: {}".format(temp, humi))

            # Effacer l'affichage LCD
            lcd.clear()

            # Afficher la temp√©rature et l'humidit√© sur l'√©cran LCD1602
            lcd.write(0, 0, "Temp: {}\xDFC".format(temp))
            lcd.write(0, 1, "Humi: {}%".format(humi))

            # Attendre 2 secondes avant de mesurer √† nouveau
            time.sleep(2)

        except Exception as e:
            print("Error: ", e)
            time.sleep(2)

