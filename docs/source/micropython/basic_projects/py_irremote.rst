.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_receiver:

5.14 T√©l√©commande infrarouge
================================

Un r√©cepteur infrarouge est un composant qui re√ßoit des signaux infrarouges et peut d√©tecter et sortir ind√©pendamment des signaux compatibles avec le niveau TTL. Il est de taille similaire √† un transistor encapsul√© dans du plastique et est couramment utilis√© dans diverses applications telles que la t√©l√©commande infrarouge et la transmission infrarouge.

Dans ce projet, nous allons utiliser un r√©cepteur infrarouge pour d√©tecter les signaux d'une t√©l√©commande. Lorsque vous appuyez sur un bouton de la t√©l√©commande et que le r√©cepteur infrarouge re√ßoit le signal correspondant, il peut d√©coder ce signal pour d√©terminer quel bouton a √©t√© press√©. En d√©codant le signal re√ßu, nous pouvons identifier la touche ou la commande sp√©cifique associ√©e.

Le r√©cepteur infrarouge nous permet d'int√©grer la fonctionnalit√© de t√©l√©commande dans notre projet, nous permettant d'interagir et de contr√¥ler des appareils en utilisant des signaux infrarouges.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_receiver`
        - |link_receiver_buy|

**Broches disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 20

        *   - Broches disponibles
            - IO13, IO12, IO14, IO27, IO26, IO25, IO15, IO0, IO5, IO18, IO19, IO21, IO22, IO23

**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.14_receiver.png

Lorsque vous appuyez sur un bouton de la t√©l√©commande, le r√©cepteur infrarouge d√©tecte le signal, et vous pouvez utiliser une biblioth√®que infrarouge pour le d√©coder. Ce processus de d√©codage vous permet d'obtenir la valeur de la touche associ√©e √† la pression du bouton.

**C√¢blage**

.. image:: ../../img/wiring/5.14_ir_receiver_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``5.14_ir_receiver.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 

    * Ici, vous devez utiliser les biblioth√®ques trouv√©es dans le dossier ``ir_rx``. Veuillez vous assurer qu'elles ont √©t√© t√©l√©charg√©es sur l'ESP32. Pour un tutoriel complet, reportez-vous √† :ref:`add_libraries_py`.

.. code-block:: python

    import time
    from machine import Pin, freq
    from ir_rx.print_error import print_error
    from ir_rx.nec import NEC_8

    pin_ir = Pin(14, Pin.IN) # R√©cepteur IR

    # D√©coder les donn√©es re√ßues et retourner le nom de la touche correspondante
    def decodeKeyValue(data):       
        if data == 0x16:
            return "0"
        if data == 0x0C:
            return "1"
        if data == 0x18:
            return "2"
        if data == 0x5E:
            return "3"
        if data == 0x08:
            return "4"
        if data == 0x1C:
            return "5"
        if data == 0x5A:
            return "6"
        if data == 0x42:
            return "7"
        if data == 0x52:
            return "8"
        if data == 0x4A:
            return "9"
        if data == 0x09:
            return "+"
        if data == 0x15:
            return "-"
        if data == 0x7:
            return "EQ"
        if data == 0x0D:
            return "U/SD"
        if data == 0x19:
            return "CYCLE"
        if data == 0x44:
            return "PLAY/PAUSE"
        if data == 0x43:
            return "FORWARD"
        if data == 0x40:
            return "BACKWARD"
        if data == 0x45:
            return "POWER"
        if data == 0x47:
            return "MUTE"
        if data == 0x46:
            return "MODE"
        return "ERROR"

    # Fonction de rappel utilisateur
    def callback(data, addr, ctrl):
        if data < 0:  # Le protocole NEC envoie des codes r√©p√©t√©s.
            pass
        else:
            print(decodeKeyValue(data))
            

    ir = NEC_8(pin_ir, callback) # Instancier le r√©cepteur NEC_8

    # Afficher les informations de d√©bogage
    ir.error_function(print_error)  

    # Garder le script en cours d'ex√©cution jusqu'√† interruption par Ctrl+C
    try:
        while True:
            pass
    except KeyboardInterrupt:
        ir.close()  # Fermer le r√©cepteur

Lorsque le programme s'ex√©cute, appuyez sur la touche de la t√©l√©commande, la valeur et le nom de la touche appara√Ætront dans le Shell.

.. note::
    La nouvelle t√©l√©commande est dot√©e d'une languette en plastique √† l'extr√©mit√© pour isoler la batterie √† l'int√©rieur. Pour alimenter la t√©l√©commande lors de son utilisation, retirez simplement cette languette en plastique.

**Comment √ßa marche ?**

#. Bien que ce programme puisse para√Ætre un peu complexe √† premi√®re vue, il accomplit en r√©alit√© les fonctions fondamentales du r√©cepteur IR en seulement quelques lignes de code.


    .. code-block:: python

        import time
        from machine import Pin, freq
        from ir_rx.nec import NEC_8

        pin_ir = Pin(14, Pin.IN) # R√©cepteur IR

        # Fonction de rappel utilisateur
        def callback(data, addr, ctrl):
            if data < 0:  # Le protocole NEC envoie des codes r√©p√©t√©s.
                pass
            else:
                print(decodeKeyValue(data))

        ir = NEC_8(pin_ir, callback)  # Instancier le r√©cepteur

    * Dans ce code, un objet ``ir`` est instanci√©, lui permettant de lire les signaux captur√©s par le r√©cepteur IR √† tout moment.
    * Les informations r√©sultantes sont ensuite stock√©es dans la variable ``data`` dans la fonction de rappel.

        * `Callback Function - Wikipedia <https://en.wikipedia.org/wiki/Callback_(computer_programming)>`_

    * Si le r√©cepteur IR re√ßoit des valeurs dupliqu√©es (par exemple, lorsqu'un bouton est maintenu enfonc√©), les ``data`` seront inf√©rieures √† 0, et ces donn√©es doivent √™tre filtr√©es.

    * Sinon, les ``data`` seraient une valeur utilisable, bien qu'en code non lisible. La fonction ``decodeKeyValue(data)`` est ensuite utilis√©e pour le d√©coder en un format plus compr√©hensible.

        .. code-block:: python

            def decodeKeyValue(data):
                if data == 0x16:
                    return "0"
                if data == 0x0C:
                    return "1"
                if data == 0x18:
                    return "2"
                if data == 0x5E:
                ...


#. Ensuite, nous incorporons plusieurs fonctions de d√©bogage dans le programme. Bien que ces fonctions soient essentielles, elles ne sont pas directement li√©es au r√©sultat souhait√©.

    .. code-block:: python

        from ir_rx.print_error import print_error

        ir.error_function(print_error) # Afficher les informations de d√©bogage

#. Enfin, nous utilisons une boucle vide pour le programme principal et impl√©mentons une structure try-except pour garantir que le programme se termine correctement avec l'objet ``ir`` ferm√©.

    .. code-block:: python

        try:
            while True:
                pass
        except KeyboardInterrupt:
            ir.close()

    * `Try Statement - Python Docs <https://docs.python.org/3/reference/compound_stmts.html?#the-try-statement>`_