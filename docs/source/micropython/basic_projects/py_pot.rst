.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_potentiometer:

5.8 Tourner le bouton
===========================

Un potentiom√®tre est un dispositif √† trois bornes couramment utilis√© pour ajuster la r√©sistance dans un circuit. Il est √©quip√© d'un bouton ou d'un levier coulissant permettant de varier la valeur de la r√©sistance du potentiom√®tre. Dans ce projet, nous l'utiliserons pour contr√¥ler la luminosit√© d'une LED, de mani√®re similaire √† une lampe de bureau. En ajustant la position du potentiom√®tre, nous pouvons changer la r√©sistance dans le circuit, r√©gulant ainsi le courant traversant la LED et ajustant sa luminosit√© en cons√©quence. Cela nous permet de cr√©er une exp√©rience d'√©clairage personnalisable et ajustable, semblable √† celle d'une lampe de bureau.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_pot`
        - |link_potentiometer_buy|

**Broches disponibles**

* **Broches disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 15

        *   - Broches disponibles
            - IO14, IO25, I35, I34, I39, I36

* **Broches de strapping**

    Les broches suivantes sont des broches de strapping, qui affectent le processus de d√©marrage de l'ESP32 lors de la mise sous tension ou de la r√©initialisation. Cependant, une fois que l'ESP32 est d√©marr√©e avec succ√®s, elles peuvent √™tre utilis√©es comme broches normales.

    .. list-table::
        :widths: 5 15

        *   - Broches de strapping
            - IO0, IO12


**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.8_potentiometer.png

Lorsque vous tournez le potentiom√®tre, la valeur de I35 changera. En programmant, vous pouvez utiliser la valeur de I35 pour contr√¥ler la luminosit√© de la LED. Ainsi, en tournant le potentiom√®tre, la luminosit√© de la LED changera √©galement en cons√©quence.

**C√¢blage**

.. image:: ../../img/wiring/5.8_potentiometer_bb.png

**Code**


.. note::

    * Ouvrez le fichier ``5.8_turn_the_knob.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 



.. code-block:: python

    from machine import ADC, Pin, PWM
    import time

    pot = ADC(Pin(35, Pin.IN)) # cr√©er un objet ADC agissant sur une broche      

    # Configurer l'att√©nuation de l'ADC √† 11dB pour la pleine √©chelle
    pot.atten(pot.ATTN_11DB)

    # Cr√©er un objet PWM
    led = PWM(Pin(26), freq=1000)

    while True:
        # Lire une valeur analogique brute dans la plage de 0 √† 4095
        value = pot.read()

        # √âchelonner la valeur √† la plage de 0 √† 1023 pour le cycle de travail PWM de l'ESP32
        pwm_value = int(value * 1023 / 4095)

        # Mettre √† jour la luminosit√© de la LED en fonction de la valeur du potentiom√®tre
        led.duty(pwm_value)

        # Lire la tension en microvolts et la convertir en volts
        voltage = pot.read_uv() / 1000000

        # Imprimer la valeur brute et la tension
        print(f"value: {value}, Voltage: {voltage}V")

        # Attendre 0.5 secondes avant de prendre la prochaine lecture
        time.sleep(0.5)

Avec ce script, la luminosit√© de la LED change lorsque le potentiom√®tre est tourn√©, tandis que la valeur analogique et la tension √† ce point sont affich√©es dans le Shell.

* `machine.ADC - MicroPython Docs <https://docs.micropython.org/en/latest/esp32/quickref.html#adc-analog-to-digital-conversion>`_

