.. note::

    Bonjour, bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_fruit_piano:

6.1 Piano en Fruits
============================

Avez-vous d√©j√† voulu jouer du piano mais ne pouviez pas vous le permettre ? Ou peut-√™tre voulez-vous simplement vous amuser avec un piano en fruits fait maison ? Alors ce projet est pour vous ! 

Avec seulement quelques capteurs tactiles sur la carte ESP32, vous pouvez maintenant jouer vos airs pr√©f√©r√©s et profiter de l'exp√©rience de jouer du piano sans vous ruiner.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - |link_passive_buzzer_buy|
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

**√Ä propos des broches tactiles**

Le microcontr√¥leur ESP32 dispose d'une fonctionnalit√© de capteur tactile int√©gr√©e, qui vous permet d'utiliser certaines broches de la carte 
comme entr√©es sensibles au toucher. Le capteur tactile fonctionne en mesurant les changements de capacitance sur les broches tactiles, 
provoqu√©s par les propri√©t√©s √©lectriques du corps humain.

Voici quelques caract√©ristiques cl√©s du capteur tactile sur l'ESP32 :

* **Nombre de broches tactiles**

    L'ESP32 dispose de jusqu'√† 10 broches tactiles, selon la carte sp√©cifique. Les broches tactiles sont g√©n√©ralement √©tiquet√©es avec un "T" suivi d'un num√©ro.

    * GPIO4: TOUCH0
    * GPIO0ÔºöTOUCH1
    * GPIO2: TOUCH2
    * GPIO15: TOUCH3
    * GPIO13: TOUCH4
    * GPIO12: TOUCH5
    * GPIO14: TOUCH6
    * GPIO27: TOUCH7
    * GPIO33: TOUCH8
    * GPIO32: TOUCH9

    .. note::
        Les broches GPIO0 et GPIO2 sont utilis√©es respectivement pour le d√©marrage et le flashage du firmware sur l'ESP32. Ces broches sont √©galement connect√©es √† la LED et au bouton int√©gr√©s. Par cons√©quent, il est g√©n√©ralement d√©conseill√© d'utiliser ces broches √† d'autres fins, car cela pourrait interf√©rer avec le fonctionnement normal de la carte.

* **Sensibilit√©**

    Le capteur tactile de l'ESP32 est tr√®s sensible et peut d√©tecter m√™me de petits changements de capacitance. La sensibilit√© peut √™tre ajust√©e √† l'aide de param√®tres logiciels.

* **Protection ESD**

    Les broches tactiles de l'ESP32 sont √©quip√©es d'une protection ESD (d√©charge √©lectrostatique) int√©gr√©e, qui aide √† pr√©venir les dommages √† la carte caus√©s par l'√©lectricit√© statique.

* **Multitouch**

    Le capteur tactile de l'ESP32 prend en charge le multitouch, ce qui signifie que vous pouvez d√©tecter plusieurs √©v√©nements tactiles simultan√©ment.

**Sch√©ma**

.. image:: ../../img/circuit/circuit_6.1_fruit_piano.png

L'id√©e derri√®re ce projet est d'utiliser des capteurs tactiles pour d√©tecter quand un utilisateur touche une broche sp√©cifique. 
Chaque broche tactile est associ√©e √† une note sp√©cifique, et lorsque l'utilisateur touche une broche, 
la note correspondante est jou√©e sur le buzzer passif. 
Le r√©sultat est une mani√®re simple et abordable de profiter de l'exp√©rience de jouer du piano.

**C√¢blage**

.. image:: ../../img/wiring/6.1_fruit_piano_bb.png

Dans ce projet, vous devez retirer l'ESP32 WROOM 32E de la carte d'extension, puis l'ins√©rer dans la plaque d'exp√©rimentation. En effet, certaines broches de la carte d'extension sont connect√©es √† des r√©sistances, ce qui affectera la capacitance des broches.

**Code**

.. note::

    * Ouvrez le fichier ``6.1_fruit_piano.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 

.. code-block:: python

    from machine import Pin, PWM, TouchPad
    import time

    # D√©finir les broches tactiles et leurs notes correspondantes
    touch_pins = [4, 15, 13, 12, 14, 27, 33, 32]  # Utiliser des broches tactiles valides
    notes = [262, 294, 330, 349, 392, 440, 494, 523]

    # Initialiser les capteurs tactiles
    touch_sensors = [TouchPad(Pin(pin)) for pin in touch_pins]

    # Initialiser le buzzer
    buzzer = PWM(Pin(25), duty=0)

    # Fonction pour jouer une tonalit√©
    def play_tone(frequency, duration):
        buzzer.freq(frequency)
        buzzer.duty(512)
        time.sleep_ms(duration)
        buzzer.duty(0)

    touch_threshold = 200

    # Boucle principale pour v√©rifier les entr√©es tactiles et jouer la note correspondante
    while True:
        for i, touch_sensor in enumerate(touch_sensors):
            value = touch_sensor.read()
            print(i,value)
            if value < touch_threshold:
                play_tone(notes[i], 100)
                time.sleep_ms(50)
            time.sleep(0.01)


Vous pouvez connecter des fruits √† ces broches de l'ESP32 : 4, 15, 13, 12, 14, 27, 33, 32.

Lorsque le script s'ex√©cute, toucher ces fruits jouera les notes C, D, E, F, G, A, B et C5.

.. note::
    Le ``touch_threshold`` doit √™tre ajust√© en fonction de la conductivit√© des diff√©rents fruits. 
    
    Vous pouvez d'abord ex√©cuter le script pour voir les valeurs imprim√©es par le terminal.

    .. code-block::

        0 884
        1 801
        2 856
        3 964
        4 991
        5 989
        6 1072
        7 1058

    Apr√®s avoir touch√© les fruits sur les broches 12, 14 et 27, les valeurs imprim√©es sont les suivantes. Par cons√©quent, j'ai r√©gl√© le ``touch_threshold`` √† 200, ce qui signifie que lorsqu'une valeur inf√©rieure √† 200 est d√©tect√©e, elle est consid√©r√©e comme touch√©e et le buzzer √©mettra diff√©rentes notes.
    
    .. code-block::

        0 882
        1 810
        2 799
        3 109
        4 122
        5 156
        6 1068
        7 1055


