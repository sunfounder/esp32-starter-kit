.. note::

    Bonjour, bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_dice:

6.6 D√© num√©rique
================================

Ce projet est une extension du projet :ref:`py_7_segment` en ajoutant un bouton pour contr√¥ler le chiffre affich√© sur l'afficheur √† sept segments.

Lorsque le bouton est press√©, l'afficheur √† 7 segments fait d√©filer les chiffres de 1 √† 6, et lorsque le bouton est rel√¢ch√©, il affiche un chiffre al√©atoire.

Ce cycle se r√©p√®te √† chaque fois que le bouton est press√©.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_74hc595`
        - |link_74hc595_buy|
    *   - :ref:`cpn_7_segment`
        - |link_7segment_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

**Sch√©ma**

.. image:: ../../img/circuit/circuit_6.6_electronic_dice.png

Ce projet est une extension du projet :ref:`py_7_segment` en ajoutant un bouton pour contr√¥ler le chiffre affich√© sur l'afficheur √† sept segments.

Le bouton est directement connect√© √† IO13 sans r√©sistance de pull-up ou pull-down externe car IO13 a une r√©sistance de pull-up interne de 47K, √©liminant ainsi le besoin d'une r√©sistance externe suppl√©mentaire.

**C√¢blage**

.. image:: ../../img/wiring/6.6_DICE_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``6.6_digital_dice.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 

.. code-block:: python

    import machine
    import time
    import random

    # D√©finir le code des segments pour un afficheur √† sept segments √† anode commune
    SEGCODE = [0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f]

    # Initialiser les broches pour le registre √† d√©calage 74HC595
    sdi = machine.Pin(25, machine.Pin.OUT)  # DS
    rclk = machine.Pin(27, machine.Pin.OUT)  # STcp
    srclk = machine.Pin(26, machine.Pin.OUT)  # SHcp

    button = machine.Pin(13, machine.Pin.IN) # Broche du bouton

    # D√©finir la fonction hc595_shift pour d√©caler les donn√©es dans le registre √† d√©calage 74HC595
    def hc595_shift(dat):
        # Mettre la broche RCLK √† bas
        rclk.off()
        
        # It√©rer √† travers chaque bit (de 7 √† 0)
        for bit in range(7, -1, -1):
            # Extraire le bit actuel des donn√©es d'entr√©e
            value = 1 & (dat >> bit)
            
            # Mettre la broche SRCLK √† bas
            srclk.off()
            
            # D√©finir la valeur de la broche SDI
            sdi.value(value)
            
            # Synchroniser le bit actuel dans le registre √† d√©calage en mettant la broche SRCLK √† haut
            srclk.on()
            
        # Verrouiller les donn√©es dans le registre de stockage en mettant la broche RCLK √† haut
        rclk.on()

    # Initialiser la graine al√©atoire
    random.seed(time.ticks_us())

    num = 1
    button_state = False

    # D√©finir la fonction de rappel du bouton pour basculer l'√©tat du bouton
    def button_callback(pin):
        global button_state
        button_state = not button_state

    # Attacher la fonction de rappel du bouton au front descendant de la broche du bouton
    button.irq(trigger=machine.Pin.IRQ_FALLING, handler=button_callback)

    # Afficher continuellement le chiffre actuel sur l'afficheur √† 7 segments, d√©filement si le bouton n'est pas press√©
    while True:
        
        # Afficher le chiffre actuel sur l'afficheur √† 7 segments
        hc595_shift(SEGCODE[num])
        
        # Si le bouton est press√© et que l'√©tat du bouton est True
        if button_state:
            pass

        # Si le bouton est press√© √† nouveau et que l'√©tat du bouton est False, g√©n√©rer un nouveau chiffre al√©atoire
        if not button_state:
            num = random.randint(1, 6)
            time.sleep_ms(10) # Ajustez cette valeur pour contr√¥ler la fr√©quence de rafra√Æchissement de l'affichage
        
Lorsque le programme est en cours d'ex√©cution, appuyer sur le bouton fera d√©filer l'afficheur √† 7 segments et affichera al√©atoirement un chiffre entre 1 et 6. 

En appuyant √† nouveau sur le bouton, l'afficheur √† 7 segments s'arr√™tera et r√©v√©lera un chiffre sp√©cifique. Appuyez une fois de plus sur le bouton, et l'afficheur √† 7 segments reprendra le d√©filement des chiffres.

