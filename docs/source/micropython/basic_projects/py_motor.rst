.. note::

    ¬°Hola, bienvenido a la Comunidad de Aficionados a Raspberry Pi, Arduino y ESP32 de SunFounder en Facebook! Profundiza en Raspberry Pi, Arduino y ESP32 con otros entusiastas.

    **¬øPor qu√© unirse?**

    - **Soporte de expertos**: Resuelve problemas posventa y desaf√≠os t√©cnicos con ayuda de nuestra comunidad y equipo.
    - **Aprender y compartir**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Vistas previas exclusivas**: Obt√©n acceso anticipado a anuncios de nuevos productos y avances.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s nuevos.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones de fiestas.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy!

.. _py_motor:

4.1 Peque√±o Ventilador
=======================

En este proyecto apasionante, exploraremos c√≥mo manejar un motor utilizando el L293D.

El L293D es un circuito integrado (CI) vers√°til com√∫nmente utilizado para el control de motores en proyectos de electr√≥nica y rob√≥tica. Puede manejar dos motores en direcciones hacia adelante y hacia atr√°s, lo que lo convierte en una opci√≥n popular para aplicaciones que requieren un control preciso del motor.

Al final de este proyecto fascinante, habr√°s ganado una comprensi√≥n profunda de c√≥mo se pueden utilizar eficazmente las se√±ales digitales y las se√±ales PWM para controlar motores. Este conocimiento invaluable ser√° una base s√≥lida para tus futuros empe√±os en rob√≥tica y mecatr√≥nica. ¬°Prep√°rate y sum√©rgete en el emocionante mundo del control de motores con el L293D!

**Componentes Requeridos**

Para este proyecto, necesitamos los siguientes componentes.

Definitivamente es conveniente comprar un kit completo, aqu√≠ est√° el enlace:

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nombre	
        - ELEMENTOS EN ESTE KIT
        - ENLACE
    *   - Kit de Inicio ESP32
        - 320+
        - |link_esp32_starter_kit|

Tambi√©n puedes comprarlos por separado en los enlaces a continuaci√≥n.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCCI√ìN DEL COMPONENTE
        - ENLACE DE COMPRA

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_motor`
        - |link_motor_buy|
    *   - :ref:`cpn_l293d`
        - \-

**Pines Disponibles**

Aqu√≠ hay una lista de pines disponibles en la placa ESP32 para este proyecto.

.. list-table::
    :widths: 5 20 

    * - Pines Disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

**Esquem√°tico**

.. image:: ../../img/circuit/circuit_4.1_motor_l293d.png

**Conexi√≥n**

.. note:: 

    Dado que el motor requiere una corriente relativamente alta, es necesario primero insertar la bater√≠a y luego deslizar el interruptor en la placa de expansi√≥n a la posici√≥n ON para activar el suministro de bater√≠a. 

.. image:: ../../img/wiring/4.1_motor_l293d_bb.png

**C√≥digo**

.. note::

    * Abre el archivo ``4.1_motor_turn.py`` ubicado en la ruta ``esp32-starter-kit-main\micropython\codes`` o copia y pega el c√≥digo en Thonny. Luego, haz clic en "Ejecutar script actual" o presiona F5 para ejecutarlo.
    * Aseg√∫rate de seleccionar el int√©rprete "MicroPython (ESP32).COMxx" en la esquina inferior derecha. 

.. code-block:: python

    import machine
    import time

    # Create Pin objects representing the motor control pins and set them to output mode
    motor1A = machine.Pin(13, machine.Pin.OUT)
    motor2A = machine.Pin(14, machine.Pin.OUT)

    # Define a function to rotate the motor clockwise
    def clockwise():
        motor1A.value(1)
        motor2A.value(0)

    # Define a function to rotate the motor anticlockwise
    def anticlockwise():
        motor1A.value(0)
        motor2A.value(1)

    # Define a function to stop the motor
    def stop():
        motor1A.value(0)
        motor2A.value(0)

    # Enter an infinite loop

    try:
        while True:
            clockwise() # Rotate the motor clockwise
            time.sleep(1) # Pause for 1 second
            anticlockwise() # Rotate the motor anticlockwise
            time.sleep(1)
            stop() # Stop the motor
            time.sleep(2)

    except KeyboardInterrupt:
        stop()  # Stop the motor when KeyboardInterrupt is caught



Durante la ejecuci√≥n del script, ver√°s el motor girando alternativamente en el sentido de las agujas del reloj y en sentido contrario cada segundo.


**Aprender M√°s**

Adem√°s de simplemente hacer girar el motor en sentido horario y antihorario, tambi√©n puedes controlar la velocidad de rotaci√≥n del motor utilizando modulaci√≥n por ancho de pulso (PWM) en el pin de control, como se muestra a continuaci√≥n.

.. note::

    * Abre el archivo ``4.1_motor_turn_pwm.py`` ubicado en la ruta ``esp32-starter-kit-main\micropython\codes`` o copia y pega el c√≥digo en Thonny. Luego, haz clic en "Ejecutar script actual" o presiona F5 para ejecutarlo.
    * Aseg√∫rate de seleccionar el int√©rprete "MicroPython (ESP32).COMxx" en la esquina inferior derecha. 



.. code-block:: python

    from machine import Pin, PWM
    import time

    # Create PWM objects representing the motor control pins and set their frequency to 1000 Hz
    motor1A = PWM(Pin(13, Pin.OUT))
    motor2A = PWM(Pin(14, Pin.OUT))
    motor1A.freq(500)
    motor2A.freq(500)

    # Enter an infinite loop
    while True:
        # Rotate the motor forward by gradually increasing the power on the motor1A pin
        for power in range(0, 1023, 20):
            motor1A.duty(power)
            motor2A.duty(0)
            time.sleep(0.1)
        # Decreasing the power on the motor1A pin
        for power in range(1023, 0, -20):
            motor1A.duty(power)
            motor2A.duty(0)
            time.sleep(0.1)
        # Rotate the motor in the opposite direction by gradually increasing the power on the motor2A pin
        for power in range(0, 1023, 20):
            motor1A.duty(0)
            motor2A.duty(power)
            time.sleep(0.1)
        # Decreasing the power on the motor2A pin
        for power in range(1023, 0, -20):
            motor1A.duty(0)
            motor2A.duty(power)
            time.sleep(0.1)




A diferencia del script anterior, aqu√≠ el motor es controlado por se√±ales PWM con una frecuencia de 1000 Hz, lo cual determina la velocidad del motor.

* El c√≥digo utiliza un bucle ``while True`` para funcionar continuamente. Dentro del bucle, hay cuatro bucles ``for`` que controlan los motores en secuencia. 
* Los primeros dos bucles ``for`` aumentan y disminuyen la velocidad de IN1 manteniendo IN2 a 0 de velocidad. 
* Los siguientes dos bucles ``for`` aumentan y disminuyen la velocidad de IN2 manteniendo IN1 a 0 de velocidad.
* La funci√≥n ``range`` en cada bucle ``for`` produce una serie de n√∫meros que sirve como el ciclo de trabajo de la se√±al PWM. Esto se env√≠a luego a IN1 o IN2 a trav√©s del m√©todo ``duty``. El ciclo de trabajo determina el porcentaje de tiempo que la se√±al PWM est√° alta, lo que a su vez determina el voltaje promedio aplicado al motor, y por lo tanto la velocidad del motor.
* La funci√≥n ``time.sleep`` se utiliza para introducir un retraso de 0.1 segundos entre cada paso en la secuencia, lo que permite que el motor cambie de velocidad gradualmente, en lugar de saltar de una velocidad a otra instant√°neamente.
