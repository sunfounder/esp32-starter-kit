.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_motor:

4.1 Petit Ventilateur
============================

Dans ce projet captivant, nous allons explorer comment piloter un moteur √† l'aide du L293D.

Le L293D est un circuit int√©gr√© (IC) polyvalent couramment utilis√© pour le contr√¥le des moteurs dans les projets √©lectroniques et robotiques. Il peut piloter deux moteurs dans les deux sens, ce qui en fait un choix populaire pour les applications n√©cessitant un contr√¥le pr√©cis des moteurs.

√Ä la fin de ce projet passionnant, vous aurez acquis une compr√©hension approfondie de la mani√®re dont les signaux num√©riques et les signaux PWM peuvent √™tre utilis√©s efficacement pour contr√¥ler les moteurs. Ces connaissances inestimables constitueront une base solide pour vos futures aventures en robotique et en m√©catronique. Pr√©parez-vous √† plonger dans le monde passionnant du contr√¥le des moteurs avec le L293D !

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_motor`
        - |link_motor_buy|
    *   - :ref:`cpn_l293d`
        - \-

**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

**Sch√©ma**

.. image:: ../../img/circuit/circuit_4.1_motor_l293d.png

**C√¢blage**

.. note:: 

    Comme le moteur n√©cessite un courant relativement √©lev√©, il est n√©cessaire d'ins√©rer d'abord la batterie, puis de faire glisser l'interrupteur sur la carte d'extension en position ON pour activer l'alimentation de la batterie. 

.. image:: ../../img/wiring/4.1_motor_l293d_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``4.1_motor_turn.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 

.. code-block:: python

    import machine
    import time

    # Cr√©er des objets Pin repr√©sentant les broches de contr√¥le du moteur et les configurer en mode sortie
    motor1A = machine.Pin(13, machine.Pin.OUT)
    motor2A = machine.Pin(14, machine.Pin.OUT)

    # D√©finir une fonction pour faire tourner le moteur dans le sens horaire
    def clockwise():
        motor1A.value(1)
        motor2A.value(0)

    # D√©finir une fonction pour faire tourner le moteur dans le sens antihoraire
    def anticlockwise():
        motor1A.value(0)
        motor2A.value(1)

    # D√©finir une fonction pour arr√™ter le moteur
    def stop():
        motor1A.value(0)
        motor2A.value(0)

    # Entrer dans une boucle infinie

    try:
        while True:
            clockwise() # Faire tourner le moteur dans le sens horaire
            time.sleep(1) # Pause pendant 1 seconde
            anticlockwise() # Faire tourner le moteur dans le sens antihoraire
            time.sleep(1)
            stop() # Arr√™ter le moteur
            time.sleep(2)

    except KeyboardInterrupt:
        stop()  # Arr√™ter le moteur en cas d'interruption clavier



Pendant l'ex√©cution du script, vous verrez le moteur tourner alternativement dans le sens horaire et antihoraire toutes les secondes.


**En savoir plus**

En plus de simplement faire tourner le moteur dans le sens horaire et antihoraire, vous pouvez √©galement contr√¥ler la vitesse de rotation du moteur en utilisant la modulation de largeur d'impulsion (PWM) sur la broche de contr√¥le, comme indiqu√© ci-dessous.

.. note::

    * Ouvrez le fichier ``4.1_motor_turn_pwm.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 



.. code-block:: python

    from machine import Pin, PWM
    import time

    # Cr√©er des objets PWM repr√©sentant les broches de contr√¥le du moteur et configurer leur fr√©quence √† 1000 Hz
    motor1A = PWM(Pin(13, Pin.OUT))
    motor2A = PWM(Pin(14, Pin.OUT))
    motor1A.freq(500)
    motor2A.freq(500)

    # Entrer dans une boucle infinie
    while True:
        # Faire tourner le moteur vers l'avant en augmentant progressivement la puissance sur la broche motor1A
        for power in range(0, 1023, 20):
            motor1A.duty(power)
            motor2A.duty(0)
            time.sleep(0.1)
        # Diminuer la puissance sur la broche motor1A
        for power in range(1023, 0, -20):
            motor1A.duty(power)
            motor2A.duty(0)
            time.sleep(0.1)
        # Faire tourner le moteur dans la direction oppos√©e en augmentant progressivement la puissance sur la broche motor2A
        for power in range(0, 1023, 20):
            motor1A.duty(0)
            motor2A.duty(power)
            time.sleep(0.1)
        # Diminuer la puissance sur la broche motor2A
        for power in range(1023, 0, -20):
            motor1A.duty(0)
            motor2A.duty(power)
            time.sleep(0.1)





Contrairement au script pr√©c√©dent, ici le moteur est contr√¥l√© par des signaux PWM avec une fr√©quence de 1000 Hz, ce qui d√©termine la vitesse du moteur.

* Le code utilise une boucle ``while True`` pour s'ex√©cuter en continu. √Ä l'int√©rieur de la boucle, il y a quatre boucles ``for`` qui contr√¥lent les moteurs dans une s√©quence. 
* Les deux premi√®res boucles ``for`` augmentent et diminuent la vitesse de IN1 tout en maintenant IN2 √† 0 vitesse. 
* Les deux boucles ``for`` suivantes augmentent et diminuent la vitesse de IN2 tout en maintenant IN1 √† 0 vitesse.
* La fonction ``range`` dans chaque boucle ``for`` produit une cha√Æne de nombres qui sert de cycle de service du signal PWM. Ceci est ensuite envoy√© √† IN1 ou IN2 via la m√©thode ``duty``. Le cycle de service d√©termine le pourcentage de temps pendant lequel le signal PWM est √©lev√©, ce qui d√©termine √† son tour la tension moyenne appliqu√©e au moteur, et donc la vitesse du moteur.
* La fonction ``time.sleep`` est utilis√©e pour introduire un d√©lai de 0,1 seconde entre chaque √©tape de la s√©quence, ce qui permet au moteur de changer de vitesse progressivement, plut√¥t que de passer instantan√©ment d'une vitesse √† une autre.
