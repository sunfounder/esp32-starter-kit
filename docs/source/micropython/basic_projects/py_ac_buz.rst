.. note::

    Bonjour, bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_ac_buz:

3.1 Bip
==================
Voici un projet simple pour faire biper un buzzer actif rapidement quatre fois par seconde.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_buzzer`
        - \-
    *   - :ref:`cpn_transistor`
        - |link_transistor_buy|

**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23


**Sch√©ma**

.. image:: ../../img/circuit/circuit_3.1_buzzer.png
    :width: 500
    :align: center

Lorsque la sortie IO14 est haute, apr√®s la r√©sistance de limitation de courant de 1K (pour prot√©ger le transistor), le S8050 (transistor NPN) conduira, ce qui fera sonner le buzzer.

Le r√¥le du S8050 (transistor NPN) est d'amplifier le courant et de rendre le son du buzzer plus fort. En fait, vous pouvez √©galement connecter le buzzer directement √† IO14, mais vous constaterez que le son du buzzer est plus faible.

**C√¢blage**

Deux types de buzzers sont inclus dans le kit. 
Nous devons utiliser un buzzer actif. Tournez-les, le dos scell√© (non le PCB expos√©) est celui que nous voulons.

.. image:: ../../components/img/buzzer.png
    :width: 500
    :align: center

Le buzzer doit utiliser un transistor pour fonctionner, ici nous utilisons un S8050 (transistor NPN).

.. image:: ../../img/wiring/3.1_buzzer_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``3.1_beep.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 




.. code-block:: python

    import machine
    import time

    # Cr√©ez un objet Pin repr√©sentant la broche 14 et d√©finissez-le en mode sortie
    buzzer = machine.Pin(14, machine.Pin.OUT)

    # Entrez dans une boucle infinie
    while True:
        # It√©rez sur les valeurs de 0 √† 3 en utilisant une boucle for
        for i in range(4):
            # Allumez le buzzer en r√©glant sa valeur √† 1
            buzzer.value(1)
            # Pause de 0,2 secondes
            time.sleep(0.2)
            # √âteignez le buzzer
            buzzer.value(0)
            # Pause de 0,2 secondes
            time.sleep(0.2)
        # Pause de 1 seconde avant de red√©marrer la boucle for
        time.sleep(1)



Lorsque le script est en cours d'ex√©cution, le buzzer √©mettra un bip rapide quatre fois par seconde.
