.. note::

    Bonjour et bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_plant_monitor:

6.8 Moniteur de plantes
===============================

Bienvenue dans le projet Moniteur de plantes ! 

Dans ce projet, nous allons utiliser une carte ESP32 pour cr√©er un syst√®me qui nous aidera √† prendre soin de nos plantes. Gr√¢ce √† ce syst√®me, nous pourrons surveiller la temp√©rature, l'humidit√©, l'humidit√© du sol et les niveaux de lumi√®re de nos plantes, et nous assurer qu'elles re√ßoivent les soins et l'attention n√©cessaires pour prosp√©rer.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_dht11`
        - |link_dht11_buy|
    *   - :ref:`cpn_lcd`
        - |link_i2clcd1602_buy|
    *   - :ref:`cpn_pump`
        - \-
    *   - :ref:`cpn_l293d`
        - \-
    *   - :ref:`cpn_button`
        - |link_button_buy|
    *   - :ref:`cpn_photoresistor`
        - |link_photoresistor_buy|
    *   - :ref:`cpn_soil_moisture`
        - |link_soil_moisture_buy|

**Sch√©ma**

.. image:: ../../img/circuit/circuit_6.8_plant_monitor_l293d.png

Le syst√®me utilise un capteur DHT11 pour mesurer les niveaux de temp√©rature et d'humidit√© de l'environnement. 
Pendant ce temps, un module d'humidit√© du sol est utilis√© pour mesurer le niveau d'humidit√© du sol et une 
photoresistance est utilis√©e pour mesurer le niveau de lumi√®re. Les lectures de ces capteurs sont affich√©es sur 
un √©cran LCD, et une pompe √† eau peut √™tre contr√¥l√©e √† l'aide d'un bouton pour arroser la plante si n√©cessaire.

IO32 poss√®de une r√©sistance de tirage vers le bas interne de 1K, et par d√©faut, il est √† un niveau logique bas. 
Lorsque le bouton est press√©, il √©tablit une connexion avec VCC (haute tension), ce qui entra√Æne un niveau logique haut sur IO32.

**C√¢blage**

.. note::

    Il est recommand√© ici d'ins√©rer la batterie puis de faire glisser l'interrupteur sur la carte d'extension en position ON pour activer l'alimentation de la batterie.


.. image:: ../../img/wiring/6.8_plant_monitor_l293d_bb.png
    :width: 800

**Code**

.. note::

    * Ouvrez le fichier ``6.8_plant_monitor.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 

.. code-block:: python

    from machine import ADC, Pin
    import time
    import dht
    from lcd1602 import LCD

    # DHT11
    dht11 = dht.DHT11(Pin(13))

    # Humidit√© du sol
    moisture_pin = ADC(Pin(14))
    moisture_pin.atten(ADC.ATTN_11DB)

    # Photoresistance
    photoresistor = ADC(Pin(35))
    photoresistor.atten(ADC.ATTN_11DB)

    # Bouton et pompe
    button = Pin(32, Pin.IN)

    motor1A = Pin(27, Pin.OUT)
    motor2A = Pin(26, Pin.OUT)

    # Configuration du LCD1602 I2C
    lcd = LCD()

    # Faire tourner la pompe
    def rotate():
        motor1A.value(1)
        motor2A.value(0)

    # Arr√™ter la pompe
    def stop():
        motor1A.value(0)
        motor2A.value(0)

    button_state = False

    # D√©finir la fonction de rappel du bouton pour basculer l'√©tat du bouton
    def button_callback(pin):
        global button_state
        button_state = not button_state

    # Attacher la fonction de rappel du bouton au front montant de la broche du bouton
    button.irq(trigger=Pin.IRQ_RISING, handler=button_callback)

    page = 0
    temp = 0
    humi = 0
            
    try:
        while True:
            # Si le bouton est press√© et que l'√©tat du bouton est True
            if button_state:
                print("rotate")
                rotate()

            # Si le bouton est press√© √† nouveau et que l'√©tat du bouton est False
            if not button_state:
                print("stop")
                stop()
            time.sleep(2)

            # Effacer l'affichage du LCD
            lcd.clear()
            
            # Basculer la valeur de la variable page entre 0 et 1
            page = (page + 1) % 2
            
            # Lorsque page vaut 1, afficher la temp√©rature et l'humidit√© sur le LCD1602
            if page == 1:
                try:
                    # Mesurer la temp√©rature et l'humidit√©
                    dht11.measure()

                    # Obtenir les valeurs de temp√©rature et d'humidit√©
                    temp = dht11.temperature()
                    humi = dht11.humidity()
                except Exception as e:
                    print("Error: ", e)         

                # Afficher la temp√©rature et l'humidit√©
                lcd.write(0, 0, "Temp: {}\xDFC".format(temp))
                lcd.write(0, 1, "Humi: {}%".format(humi))

            # Si page vaut 0, afficher l'humidit√© du sol et la lumi√®re
            else:
                light = photoresistor.read()
                moisture = moisture_pin.read()

                # Effacer l'affichage du LCD
                lcd.clear()

                # Afficher la valeur de l'humidit√© du sol et de la lumi√®re
                lcd.write(0, 0, f"Moisture: {moisture}")
                lcd.write(0, 1, f"Light: {light}")

    except KeyboardInterrupt:
        # Arr√™ter le moteur en cas d'interruption clavier
        stop()

* Lorsque le code est ex√©cut√©, le LCD1602 I2C affiche alternativement la temp√©rature et l'humidit√©, ainsi que les valeurs analogiques de l'humidit√© du sol et de l'intensit√© lumineuse, avec un intervalle de 2 secondes.
* Appuyez sur le bouton pour d√©marrer la pompe √† eau, et appuyez de nouveau pour arr√™ter la pompe √† eau.

.. note:: 

    Si le code et le c√¢blage sont corrects, mais que le LCD n'affiche toujours aucun contenu, vous pouvez ajuster le potentiom√®tre √† l'arri√®re pour augmenter le contraste.

