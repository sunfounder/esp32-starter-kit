.. note::

    Bonjour, bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_fading:

2.2 LED √† intensit√© variable
===================================

Dans le projet pr√©c√©dent, nous avons contr√¥l√© la LED en l'allumant et en l'√©teignant √† l'aide d'une sortie num√©rique. Dans ce projet, nous allons cr√©er un effet de respiration sur la LED en utilisant la modulation de largeur d'impulsion (PWM). Le PWM est une technique qui nous permet de contr√¥ler la luminosit√© d'une LED ou la vitesse d'un moteur en faisant varier le rapport cyclique d'un signal carr√©.

Avec le PWM, au lieu de simplement allumer ou √©teindre la LED, nous allons ajuster le temps pendant lequel la LED est allum√©e par rapport au temps pendant lequel elle est √©teinte √† chaque cycle. En allumant et √©teignant rapidement la LED √† des intervalles variables, nous pouvons cr√©er l'illusion que la LED s'allume et s'√©teint progressivement, simulant un effet de respiration.

En utilisant les capacit√©s PWM de l'ESP32 WROOM 32E, nous pouvons obtenir un contr√¥le pr√©cis et fluide de la luminosit√© de la LED. Cet effet de respiration ajoute un √©l√©ment dynamique et visuellement attrayant √† vos projets, cr√©ant un affichage accrocheur ou une ambiance.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|

**Broches disponibles**

Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

.. list-table::
    :widths: 5 20 

    * - Broches disponibles
      - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

**Sch√©ma**

.. image:: ../../img/circuit/circuit_2.1_led.png

Ce projet utilise le m√™me circuit que le premier projet :ref:`py_blink`, mais le type de signal est diff√©rent. Dans le premier projet, nous avons utilis√© une sortie num√©rique haute et basse (0 et 1) directement √† partir de la broche 26 pour allumer ou √©teindre la LED. Dans ce projet, nous utilisons un signal PWM provenant de la broche 26 pour contr√¥ler la luminosit√© de la LED.

**C√¢blage**

.. image:: ../../img/wiring/2.1_hello_led_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``2.2_fading_led.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 

.. code-block:: python

    # Importer les biblioth√®ques n√©cessaires
    from machine import Pin, PWM
    import time

    # Cr√©er un objet PWM
    led = PWM(Pin(26), freq=1000)

    while True:
        # Augmenter progressivement la luminosit√©
        for duty_cycle in range(0, 1024, 1):
            led.duty(duty_cycle)
            time.sleep(0.01)

        # Diminuer progressivement la luminosit√©
        for duty_cycle in range(1023, -1, -1):
            led.duty(duty_cycle)
            time.sleep(0.01)


La LED deviendra progressivement plus lumineuse √† mesure que le code s'ex√©cute.

**Comment √ßa marche ?**

Dans l'ensemble, ce code montre comment utiliser les signaux PWM pour contr√¥ler la luminosit√© d'une LED.

#. Il importe deux modules, ``machine`` et ``time``. Le module ``machine`` fournit un acc√®s de bas niveau au mat√©riel du microcontr√¥leur, tandis que le module ``time`` fournit des fonctions pour les op√©rations li√©es au temps.

    .. code-block:: python

        import machine
        import time

#. Ensuite, il initialise un objet ``PWM`` pour contr√¥ler la LED connect√©e √† la broche 26 et d√©finit la fr√©quence du signal PWM √† 1000 Hz.

    .. code-block:: python

        led = PWM(Pin(26), freq=1000)

#. Faire varier l'intensit√© de la LED √† l'aide d'une boucle : La boucle ext√©rieure ``while True`` s'ex√©cute ind√©finiment. Deux boucles ``for`` imbriqu√©es sont utilis√©es pour augmenter et diminuer progressivement la luminosit√© de la LED. Le cycle de travail varie de 0 √† 1023, repr√©sentant un cycle de travail de 0% √† 100%.

    .. code-block:: python

        # Importer les biblioth√®ques n√©cessaires
        from machine import Pin, PWM
        import time

        # Cr√©er un objet PWM
        led = PWM(Pin(26), freq=1000)

        while True:
            # Augmenter progressivement la luminosit√©
            for duty_cycle in range(0, 1024, 2):
                led.duty(duty_cycle)
                time.sleep(0.01)

            # Diminuer progressivement la luminosit√©
            for duty_cycle in range(1023, -1, -2):
                led.duty(duty_cycle)
                time.sleep(0.01)


    * ``range()`` : Cr√©e une s√©quence d'entiers de 0 √† 1023. 
    * Le cycle de travail du signal PWM est d√©fini sur chaque valeur de la s√©quence √† l'aide de la m√©thode ``duty()`` de l'objet ``PWM``. 
    * ``time.sleep()`` : Met en pause l'ex√©cution du programme pendant 10 millisecondes entre chaque it√©ration de la boucle, cr√©ant une augmentation progressive de la luminosit√© au fil du temps.

    
