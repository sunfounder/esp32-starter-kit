.. note::

    Bonjour, bienvenue dans la communaut√© des passionn√©s de SunFounder Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez au c≈ìur des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-premi√®res.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions festives.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pir:

5.5 D√©tecter les mouvements humains
========================================

Le capteur infrarouge passif (capteur PIR) est un capteur courant qui peut mesurer la lumi√®re infrarouge (IR) √©mise par les objets dans son champ de vision.
En termes simples, il d√©tecte le rayonnement infrarouge √©mis par le corps, permettant ainsi de d√©tecter les mouvements des personnes et autres animaux.
Plus sp√©cifiquement, il informe la carte de contr√¥le principale que quelqu'un est entr√© dans votre pi√®ce.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien :

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom	
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_pir`
        - |link_pir_buy|

**Broches disponibles**

* **Broches disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 20

        *   - Pour entr√©e
            - IO13, IO14, IO27, IO26, IO25, IO33, I35, I34, I39, I36, IO4, IO18, IO19, IO21, IO22, IO23
        *   - Pour sortie
            - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

.. note::
    
    IO32 ne peut pas √™tre utilis√©e **comme broche d'entr√©e** dans ce projet car elle est connect√©e en interne √† une r√©sistance de tirage vers le bas de 1K, ce qui d√©finit sa valeur par d√©faut √† 0.

* **Broches de Strapping (entr√©e)**

    Les broches de strapping sont un ensemble sp√©cial de broches utilis√©es pour d√©terminer des modes de d√©marrage sp√©cifiques pendant le d√©marrage de l'appareil 
    (c'est-√†-dire, la r√©initialisation lors de la mise sous tension).

    
    .. list-table::
        :widths: 5 15

        *   - Broches de Strapping
            - IO5, IO0, IO2, IO12, IO15 
    

    

    En g√©n√©ral, il est **d√©conseill√© de les utiliser comme broches d'entr√©e**. Si vous souhaitez utiliser ces broches, tenez compte de l'impact potentiel sur le processus de d√©marrage. Pour plus de d√©tails, veuillez vous r√©f√©rer √† la section :ref:`esp32_strapping`.

**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.5_pir.png

Lorsque le module PIR d√©tecte un mouvement, IO14 passe √† un niveau haut et la LED s'allume. Sinon, lorsque aucun mouvement n'est d√©tect√©, IO14 reste √† un niveau bas et la LED s'√©teint.

.. note::
    Le module PIR dispose de deux potentiom√®tres : l'un ajuste la sensibilit√©, l'autre ajuste la distance de d√©tection. Pour optimiser le fonctionnement du module PIR, il est n√©cessaire de tourner les deux √† fond dans le sens antihoraire.

    .. image:: ../../components/img/PIR_TTE.png
        :width: 300
        :align: center

**C√¢blage**

.. image:: ../../img/wiring/5.5_pir_bb.png

**Code**

.. note::

    * Ouvrez le fichier ``5.5_detect_human_movement.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Puis cliquez sur "Run Current Script" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 



.. code-block:: python

    import machine
    import time

    # D√©finir les broches
    PIR_PIN = 14    # Capteur PIR
    LED_PIN = 26    # LED

    # Initialiser la broche du capteur PIR comme une broche d'entr√©e
    pir_sensor = machine.Pin(PIR_PIN, machine.Pin.IN, machine.Pin.PULL_DOWN)
    # Initialiser la broche LED comme une broche de sortie
    led = machine.Pin(LED_PIN, machine.Pin.OUT)

    # Indicateur global pour d√©tecter un mouvement
    motion_detected_flag = False

    # Fonction pour g√©rer l'interruption
    def motion_detected(pin):
        global motion_detected_flag
        print("Motion detected!")
        motion_detected_flag = True

    # Attacher l'interruption √† la broche du capteur PIR
    pir_sensor.irq(trigger=machine.Pin.IRQ_RISING, handler=motion_detected)

    # Boucle principale
    while True:
        if motion_detected_flag:
            led.value(1)  # Allumer la LED
            time.sleep(5)  # Garder la LED allum√©e pendant 5 secondes
            led.value(0)  # √âteindre la LED
            motion_detected_flag = False

Lorsque le script est en cours d'ex√©cution, la LED s'allumera pendant 5 secondes puis s'√©teindra lorsque le module PIR d√©tectera quelqu'un qui passe.

.. note::

    Le module PIR dispose de deux potentiom√®tres : l'un ajuste la sensibilit√©, l'autre ajuste la distance de d√©tection. Pour optimiser le fonctionnement du module PIR, il est n√©cessaire de tourner les deux √† fond dans le sens antihoraire.

    .. image:: ../../components/img/PIR_TTE.png
        :width: 300
        :align: center




**Comment √ßa marche ?**


Ce code configure un syst√®me de d√©tection de mouvement simple utilisant un capteur PIR et une LED. Lorsqu'un mouvement est d√©tect√©, la LED s'allume pendant 5 secondes. 

Voici une explication d√©taill√©e du code :

#. D√©finir la fonction de gestion de l'interruption qui sera ex√©cut√©e lorsque le mouvement est d√©tect√© :

    .. code-block:: python

        def motion_detected(pin):
            global motion_detected_flag
            print("Motion detected!")
            motion_detected_flag = True

#. Attacher l'interruption √† la broche du capteur PIR, avec le d√©clenchement r√©gl√© sur "mont√©e" (c'est-√†-dire lorsque la broche passe d'une basse √† une haute tension) :

    .. code-block:: python

        pir_sensor.irq(trigger=machine.Pin.IRQ_RISING, handler=motion_detected)

    Cela configure une interruption sur la broche ``pir_sensor``, qui est connect√©e au capteur de mouvement PIR.

    Voici une explication d√©taill√©e des param√®tres :

    * ``trigger=machine.Pin.IRQ_RISING`` : Ce param√®tre d√©finit la condition de d√©clenchement de l'interruption. Dans ce cas, l'interruption sera d√©clench√©e sur un front montant. Un front montant est lorsque la tension sur la broche passe d'un √©tat bas (0V) √† un √©tat haut (typiquement 3,3V ou 5V, selon votre mat√©riel). Pour un capteur de mouvement PIR, lorsque le mouvement est d√©tect√©, la broche de sortie passe g√©n√©ralement de bas √† haut, ce qui fait du front montant une condition de d√©clenchement appropri√©e.

    * ``handler=motion_detected`` : Ce param√®tre sp√©cifie la fonction qui sera ex√©cut√©e lorsque l'interruption est d√©clench√©e. Dans ce cas, la fonction ``motion_detected`` est fournie en tant que gestionnaire d'interruption. Cette fonction sera appel√©e automatiquement lorsque la condition d'interruption (front montant) est d√©tect√©e sur la broche ``pir_sensor``.

    Ainsi, cette ligne de code configure le capteur PIR pour appeler la fonction ``motion_detected`` chaque fois qu'un mouvement est d√©tect√© par le capteur, en raison du passage de la broche de sortie d'un √©tat bas √† un √©tat haut.



#. Dans la boucle principale, si le ``motion_detected_flag`` est r√©gl√© sur ``True``, la LED sera allum√©e pendant 5 secondes, puis √©teinte. Le drapeau est ensuite r√©initialis√© √† ``False`` pour attendre le prochain √©v√©nement de mouvement.

    .. code-block:: python

        while True:
            if motion_detected_flag:
                led.value(1)  # Allumer la LED
                time.sleep(5)  # Garder la LED allum√©e pendant 5 secondes
                led.value(0)  # √âteindre la LED
                motion_detected_flag = False

