.. note::

    Bonjour, bienvenue dans la communaut√© Facebook des passionn√©s de SunFounder Raspberry Pi & Arduino & ESP32 ! Plongez plus profond√©ment dans l'univers des Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi nous rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprenez et partagez** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et aux avant-go√ªts.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos derniers produits.
    - **Promotions festives et cadeaux** : Participez √† des tirages au sort et √† des promotions sp√©ciales pour les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_button:

5.1 Lecture de la valeur du bouton
==============================================

Dans ce projet interactif, nous allons explorer le contr√¥le de boutons et la manipulation de LED.

Le concept est simple mais efficace. Nous allons lire l'√©tat d'un bouton. Lorsque le bouton est enfonc√©, il enregistre un niveau de tension √©lev√©, ou "√©tat haut". Cette action d√©clenchera ensuite l'allumage d'une LED.

**Composants n√©cessaires**

Dans ce projet, nous aurons besoin des composants suivants. 

Il est d√©finitivement pratique d'acheter un kit complet, voici le lien : 

.. list-table::
    :widths: 20 20 20
    :header-rows: 1

    *   - Nom
        - ARTICLES DANS CE KIT
        - LIEN
    *   - Kit de d√©marrage ESP32
        - 320+
        - |link_esp32_starter_kit|

Vous pouvez √©galement les acheter s√©par√©ment via les liens ci-dessous.

.. list-table::
    :widths: 30 20
    :header-rows: 1

    *   - INTRODUCTION DES COMPOSANTS
        - LIEN D'ACHAT

    *   - :ref:`cpn_esp32_wroom_32e`
        - |link_esp32_wroom_32e_buy|
    *   - :ref:`cpn_esp32_camera_extension`
        - |link_esp32_extension_board|
    *   - :ref:`cpn_breadboard`
        - |link_breadboard_buy|
    *   - :ref:`cpn_wires`
        - |link_wires_buy|
    *   - :ref:`cpn_resistor`
        - |link_resistor_buy|
    *   - :ref:`cpn_led`
        - |link_led_buy|
    *   - :ref:`cpn_button`
        - |link_button_buy|

**Broches disponibles**

* **Broches disponibles**

    Voici une liste des broches disponibles sur la carte ESP32 pour ce projet.

    .. list-table::
        :widths: 5 20

        *   - Pour l'entr√©e
            - IO14, IO25, I35, I34, I39, I36, IO18, IO19, IO21, IO22, IO23
        *   - Pour la sortie
            - IO13, IO12, IO14, IO27, IO26, IO25, IO33, IO32, IO15, IO2, IO0, IO4, IO5, IO18, IO19, IO21, IO22, IO23

* **Broches √† usage conditionnel (entr√©e)**

    Les broches suivantes poss√®dent des r√©sistances pull-up ou pull-down int√©gr√©es, donc des r√©sistances externes ne sont pas n√©cessaires lorsqu'elles sont **utilis√©es comme broches d'entr√©e** :

    .. list-table::
        :widths: 5 15
        :header-rows: 1

        *   - Broches √† usage conditionnel
            - Description
        *   - IO13, IO15, IO2, IO4
            - Pull-up avec une r√©sistance de 47K par d√©faut √† un niveau √©lev√©.
        *   - IO27, IO26, IO33
            - Pull-up avec une r√©sistance de 4.7K par d√©faut √† un niveau √©lev√©.
        *   - IO32
            - Pull-down avec une r√©sistance de 1K par d√©faut √† un niveau bas.

* **Broches de d√©marrage (entr√©e)**

    Les broches de d√©marrage sont un ensemble sp√©cial de broches utilis√©es pour d√©terminer les modes de d√©marrage sp√©cifiques lors du d√©marrage de l'appareil 
    (c'est-√†-dire, reset √† la mise sous tension).

    .. list-table::
        :widths: 5 15

        *   - Broches de d√©marrage
            - IO5, IO0, IO2, IO12, IO15 

    En g√©n√©ral, il est **non recommand√© de les utiliser comme broches d'entr√©e**. Si vous souhaitez utiliser ces broches, consid√©rez l'impact potentiel sur le processus de d√©marrage. Pour plus de d√©tails, veuillez consulter la section :ref:`esp32_strapping`.

**Sch√©ma**

.. image:: ../../img/circuit/circuit_5.1_button.png

Pour assurer un bon fonctionnement, connectez un c√¥t√© de la broche du bouton √† 3.3V et l'autre c√¥t√© √† IO14. Lorsque le bouton est enfonc√©, IO14 sera r√©gl√© sur haut, ce qui allumera la LED. Lorsque le bouton est rel√¢ch√©, IO14 reviendra √† son √©tat suspendu, qui peut √™tre soit haut soit bas. Pour assurer un niveau bas stable lorsque le bouton n'est pas enfonc√©, IO14 doit √™tre connect√© √† la terre via une r√©sistance pull-down de 10K.

**C√¢blage**

.. image:: ../../img/wiring/5.1_button_bb.png

.. note::

    Un bouton √† quatre broches est con√ßu en forme de H. Lorsque le bouton n'est pas enfonc√©, les broches gauche et droite sont d√©connect√©es, et le courant ne peut pas circuler entre elles. Cependant, lorsque le bouton est enfonc√©, les broches gauche et droite sont connect√©es, cr√©ant un chemin pour que le courant circule.

**Code**

.. note::

    * Ouvrez le fichier ``5.1_read_button_value.py`` situ√© dans le chemin ``esp32-starter-kit-main\micropython\codes``, ou copiez et collez le code dans Thonny. Ensuite, cliquez sur "Ex√©cuter le script actuel" ou appuyez sur F5 pour l'ex√©cuter.
    * Assurez-vous de s√©lectionner l'interpr√©teur "MicroPython (ESP32).COMxx" dans le coin inf√©rieur droit. 

.. code-block:: python

    import machine
    import time

    button = machine.Pin(14, machine.Pin.IN) # Broche du bouton
    led = machine.Pin(26, machine.Pin.OUT) # Broche de la LED

    while True:
        # Si le bouton est enfonc√© en lisant sa valeur
        if button.value() == 1:
            # Allumer la LED en r√©glant sa valeur √† 1
            led.value(1)
        else:
            # √âteindre la LED
            led.value(0)

Pendant l'ex√©cution du script, la LED s'allume lorsque vous appuyez sur le bouton et s'√©teint lorsque vous le rel√¢chez.
